<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>项目小结</title>
      <link href="/2018/04/03/Linux%E4%B8%8B%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
      <url>/2018/04/03/Linux%E4%B8%8B%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h2 id="1-Linux下生成密钥"><a href="#1-Linux下生成密钥" class="headerlink" title="1.Linux下生成密钥"></a>1.Linux下生成密钥</h2><p>　　ssh-keygen的命令手册，通过”man ssh-keygen“命令：<br><a href="https://images2015.cnblogs.com/blog/1040840/201610/1040840-20161012142718656-1307073903.png" target="_blank" rel="noopener">man ssh-keygen</a><br>　　通过命令”ssh-keygen -t rsa“</p><p><a href="https://images2015.cnblogs.com/blog/1040840/201610/1040840-20161012142757453-1604775837.png" target="_blank" rel="noopener">ssh-keygen</a><br>　　生成之后会在用户的根目录生成一个 “.ssh”的文件夹<br><a href="https://images2015.cnblogs.com/blog/1040840/201610/1040840-20161012142915437-1691338920.png" target="_blank" rel="noopener">.ssh</a><br>　　进入“.ssh”会生成以下几个文件<br><a href="https://images2015.cnblogs.com/blog/1040840/201610/1040840-20161012143011312-1844037897.png" target="_blank" rel="noopener">.ssh2</a></p><p>　　authorized_keys:存放远程免密登录的公钥,主要通过这个文件记录多台机器的公钥<br>　　id_rsa : 生成的私钥文件<br>　　id_rsa.pub ： 生成的公钥文件<br>　　know_hosts : 已知的主机公钥清单</p><p>　　　　如果希望ssh公钥生效需满足至少下面两个条件：</p><p>　　　　　　1) .ssh目录的权限必须是700<br>　　　　　　2) .ssh/authorized_keys文件权限必须是600</p><h2 id="2-远程免密登录"><a href="#2-远程免密登录" class="headerlink" title="2.远程免密登录"></a>2.远程免密登录</h2><p>　　原理图：<br><a href="https://images2015.cnblogs.com/blog/1040840/201610/1040840-20161012145601046-1887231974.png" target="_blank" rel="noopener">原理图</a><br> 　　常用以下几种方法：</p><p>　　　　2.1 通过ssh-copy-id的方式</p><p>　　　　命令： ssh-copy-id -i ~/.ssh/id_rsa.put &lt;romte_ip&gt;</p><p>　　　　举例：　　　　　　<br><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">[root@test .ssh]<span class="meta"># ssh-copy-id -i ~/.ssh/id_rsa.pub 192.168.91.135 </span></span><br><span class="line">root@<span class="number">192.168</span><span class="number">.91</span><span class="number">.135</span><span class="comment">'s password: </span></span><br><span class="line">Now <span class="keyword">try</span> logging <span class="keyword">into</span> the machine, <span class="keyword">with</span> <span class="string">"ssh '192.168.91.135'"</span>, <span class="keyword">and</span> check <span class="keyword">in</span>:</span><br><span class="line"></span><br><span class="line">.ssh/authorized_keys</span><br><span class="line"></span><br><span class="line"><span class="keyword">to</span> make sure we haven<span class="comment">'t added extra keys that you weren't expecting.</span></span><br><span class="line"></span><br><span class="line">[root@test .ssh]<span class="meta"># ssh root@192.168.91.135</span></span><br><span class="line">Last login: Mon Oct <span class="number">10</span> <span class="number">01</span>:<span class="number">25</span>:<span class="number">49</span> <span class="number">2016</span> <span class="keyword">from</span> <span class="number">192.168</span><span class="number">.91</span><span class="number">.133</span></span><br><span class="line">[root@localhost ~]<span class="meta">#</span></span><br></pre></td></tr></table></figure></p><p>　　　　常见错误：<br><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">　　　　　　[root@test ~]<span class="comment"># ssh-copy-id -i ~/.ssh/id_rsa.pub 192.168.91.135</span></span><br><span class="line"></span><br><span class="line">　　　　　　-bash: ssh-<span class="keyword">copy</span><span class="bash">-id: <span class="built_in">command</span> not found   //提示命令不存在</span></span><br><span class="line"><span class="bash"></span></span><br><span class="line"><span class="bash">　　　　　　解决办法：yum -y install openssh-clients</span></span><br></pre></td></tr></table></figure></p><p> 　　　2.2　通过scp将内容写到对方的文件中<br><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">　　　　　　命令：scp -p ~/.ssh/id_rsa.pub root<span class="meta">@&lt;remote_ip&gt;:/root/.ssh/authorized_keys</span></span><br><span class="line"></span><br><span class="line">　　　　　　举例：</span><br><span class="line"></span><br><span class="line">[root<span class="meta">@test</span> .ssh]<span class="comment"># scp -p ~/.ssh/id_rsa.pub root@192.168.91.135:/root/.ssh/authorized_keys</span></span><br><span class="line">root<span class="meta">@192.168.91.135's</span> password: </span><br><span class="line">id_rsa.pub 100% 408 0.4KB/s 00:00 </span><br><span class="line">[root<span class="meta">@test</span> .ssh]<span class="comment"># </span></span><br><span class="line">[root<span class="meta">@test</span> .ssh]<span class="comment"># </span></span><br><span class="line">[root<span class="meta">@test</span> .ssh]<span class="comment"># </span></span><br><span class="line">[root<span class="meta">@test</span> .ssh]<span class="comment"># ssh root@192.168.91.135</span></span><br><span class="line">Last login: Mon Oct 10 01:27:02 2016 from 192.168.91.133</span><br><span class="line"></span><br><span class="line">[root<span class="meta">@localhost</span> ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>　　　　　　也可以分为两步操作：<br><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">$ scp ~<span class="string">/.ssh/id_rsa.pub</span> root@&lt;remote_ip&gt;<span class="function">:pub_key</span>       <span class="string">//</span>将文件拷贝至远程服务器</span><br><span class="line">$ cat ~<span class="string">/pub_key</span> &gt;&gt;~<span class="string">/.ssh/authorized_keys</span>                     <span class="string">//</span>将内容追加到authorized_keys文件中， 不过要登录远程服务器来执行这条命令</span><br></pre></td></tr></table></figure></p><p>　　　　2.3 通过Ansible实现批量免密</p><p>2.3.1 将需要做免密操作的机器hosts添加到/etc/ansible/hosts下：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">　　<span class="selector-attr">[Avoid close]</span></span><br><span class="line">　　192<span class="selector-class">.168</span><span class="selector-class">.91</span><span class="selector-class">.132</span></span><br><span class="line">　　192<span class="selector-class">.168</span><span class="selector-class">.91</span><span class="selector-class">.133</span></span><br><span class="line">　　192<span class="selector-class">.168</span><span class="selector-class">.91</span><span class="selector-class">.134</span></span><br></pre></td></tr></table></figure></p><p>2.3.2 执行命令进行免密操作<br><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">　　ansible &lt;groupname&gt; -m authorized_key -a <span class="string">"user=root key='&#123;&#123; lookup('file','/root/.ssh/id_rsa.pub') &#125;&#125;'"</span> -k</span><br><span class="line"></span><br><span class="line">示例：</span><br><span class="line">　　[root@test sshpass-<span class="number">1.05</span>]<span class="comment"># ansible test -m authorized_key -a "user=root key='&#123;&#123; lookup('file','/root/.ssh/id_rsa.pub') &#125;&#125;'" -k</span></span><br><span class="line">　　SSH password: ---<span class="function">--&gt;</span>输入密码</span><br><span class="line">　　<span class="number">192.168</span>.<span class="number">91.135</span> | success &gt;&gt; &#123;</span><br><span class="line">　　<span class="string">"changed"</span>: <span class="literal">true</span>, </span><br><span class="line">　　<span class="string">"key"</span>: <span class="string">"ssh-rsa 　　  AAAAB3NzaC1yc2EAAAABIwAAAQEArZI4kxlYuw7j1nt5ueIpTPWfGBJoZ8Mb02OJHR8yGW7A3izwT3/uhkK7RkaGavBbAlprp5bxp3i0TyNxa/apBQG5NiqhYO8YCuiGYGsQAGwZCBlNLF3gq1/18B6FV5moE/8yTbFA4dBQahdtVP  PejLlSAbb5ZoGK8AtLlcRq49IENoXB99tnFVn3gMM0aX24ido1ZF9RfRWzfYF7bVsLsrIiMPmVNe5KaGL9kZ0svzoZ708yjWQQCEYWp0m+sODbtGPC34HMGAHjFlsC/SJffLuT/ug/hhCJUYeExHIkJF8OyvfC6DeF7ArI6zdKER7D8M0SM　　WQmpKUltj2nltuv3w== root@localhost.localdomain"</span>, </span><br><span class="line">　　<span class="string">"key_options"</span>: <span class="literal">null</span>, </span><br><span class="line">　　<span class="string">"keyfile"</span>: <span class="string">"/root/.ssh/authorized_keys"</span>, </span><br><span class="line">　　<span class="string">"manage_dir"</span>: <span class="literal">true</span>, </span><br><span class="line">　　<span class="string">"path"</span>: <span class="literal">null</span>, </span><br><span class="line">　　<span class="string">"state"</span>: <span class="string">"present"</span>, </span><br><span class="line">　　<span class="string">"unique"</span>: <span class="literal">false</span>, </span><br><span class="line">　　<span class="string">"user"</span>: <span class="string">"root"</span></span><br><span class="line">　　&#125;</span><br><span class="line">　　[root@test sshpass-<span class="number">1.05</span>]<span class="comment">#</span></span><br></pre></td></tr></table></figure></p><p>2.4 手工复制粘贴的方式</p><p>　　将本地id_rsa.pub文件的内容拷贝至远程服务器的~/.ssh/authorized_keys文件中</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>服务器迁移</title>
      <link href="/2018/04/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%81%E7%A7%BB/"/>
      <url>/2018/04/02/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%81%E7%A7%BB/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="前记"><a href="#前记" class="headerlink" title="前记"></a>前记</h4><p>　　月底阿里云到期，准备迁移到腾讯云服务器。将自已</p>]]></content>
      
      <categories>
          
          <category> 随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>项目小结</title>
      <link href="/2018/04/02/%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93/"/>
      <url>/2018/04/02/%E9%A1%B9%E7%9B%AE%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>　　记录一下自已再开发中碰到疑难杂症。</p>]]></content>
      
      <categories>
          
          <category> 随记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MyDoc</title>
      <link href="/2018/02/01/MyDoc/"/>
      <url>/2018/02/01/MyDoc/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>#Hi MyDoc#</p><p><strong> mydoc主要是为了记录日常开发过程中经常会使用的知识记录以及汇总，避免去重复的查找。</strong></p><p><a href="http://doc.rtime.xin" target="_blank" rel="noopener">MyDoc</a></p>]]></content>
      
      <categories>
          
          <category> doc </category>
          
      </categories>
      
      
        <tags>
            
            <tag> doc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>问题辑录</title>
      <link href="/2018/01/17/%E9%97%AE%E9%A2%98%E8%BE%91%E5%BD%95/"/>
      <url>/2018/01/17/%E9%97%AE%E9%A2%98%E8%BE%91%E5%BD%95/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>　　记录一下自已再开发中碰到疑难杂症。</p><h4 id="fastjson的parseObject对json解析map乱序"><a href="#fastjson的parseObject对json解析map乱序" class="headerlink" title="fastjson的parseObject对json解析map乱序"></a>fastjson的parseObject对json解析map乱序</h4><p><strong>解决办法：</strong></p><pre><code>JSON.parseObject(&quot;...&quot;, Feature.OrderedField)JSON.parseObject(&quot;...&quot;, LinkedHashMap.class, Feature.OrderedField)</code></pre><h4 id="Caused-by-java-lang-UnsupportedClassVersionError-xxx-xxxx-xxxx-xxx-Unsupported-major-minor-version-51-0"><a href="#Caused-by-java-lang-UnsupportedClassVersionError-xxx-xxxx-xxxx-xxx-Unsupported-major-minor-version-51-0" class="headerlink" title="Caused by: java.lang.UnsupportedClassVersionError: xxx/xxxx/xxxx/xxx : Unsupported major.minor version 51.0"></a>Caused by: java.lang.UnsupportedClassVersionError: xxx/xxxx/xxxx/xxx : Unsupported major.minor version 51.0</h4><p><strong>解决思路：</strong></p><p>　　判断自已项目引入的jar是否存在高版本。<strong>建议jar没有引入jdk新特性,最好不要用高版本的jdk进行编译。</strong></p><h4 id="BigDecimal-movePointLeft"><a href="#BigDecimal-movePointLeft" class="headerlink" title="BigDecimal.movePointLeft"></a>BigDecimal.movePointLeft</h4><p>　　movePointLeft等效于将该值的小数点移动n位到左边。如果n为非负，则调用仅将n添加至刻度。如果n为负时，调用相当于调用movePointRight(-n)。<br>　　如果参数为小数的时候。比如0.01，BigDecimal.movePointLeft的结果为“<strong>0.001000000000000000055511151231257827021181583404541015625</strong>”</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RSA公私钥生成</title>
      <link href="/2017/09/27/RSA%E5%85%AC%E7%A7%81%E9%92%A5%E7%94%9F%E6%88%90/"/>
      <url>/2017/09/27/RSA%E5%85%AC%E7%A7%81%E9%92%A5%E7%94%9F%E6%88%90/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><p>　　　　在安全性比较高的应用交互的时候，会采用对称加密算 法的方式。双方应用在服务端都生成一套公私钥对，双方互换公钥证书。 通过加签验签（或者加密解密）对数据的合法校验。保证数据交互的安全性。</p><p>　　　　下面介绍下，如何在服务端生成公私钥对。</p><h4 id="安装OpenSSL"><a href="#安装OpenSSL" class="headerlink" title="安装OpenSSL"></a>安装OpenSSL</h4><p>　　　　Linux环境可能自带OpenSSL工具，直接键入命令，看命令是否安装。 如果未安装，通过<code>yum install openssl -y</code>命令进行安装。</p><p>　　　　Window下请下载指定的OpenSSL工具。地址：<a href="http://gnuwin32.sourceforge.net/packages/openssl.htm" target="_blank" rel="noopener">http://gnuwin32.sourceforge.net/packages/openssl.htm</a></p><p>　　　　OpenSSL的官网：<a href="https://www.openssl.org/source/" target="_blank" rel="noopener">https://www.openssl.org/source/</a></p><h4 id="生成公私钥"><a href="#生成公私钥" class="headerlink" title="生成公私钥"></a>生成公私钥</h4><p>　　　　<strong><em>下文中的命令都是在OpenSSL窗口中执行。假如出现某个文件不存在的时候，请尝试重启OpenSSL窗口。</em></strong>　　　　</p><h5 id="生成RSA私钥"><a href="#生成RSA私钥" class="headerlink" title="生成RSA私钥"></a>生成RSA私钥</h5><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line">req -<span class="keyword">new</span> -x509 -<span class="built_in">key</span> rsa-<span class="keyword">private</span>.<span class="built_in">key</span> -days <span class="number">720</span> -out rsa-<span class="keyword">public</span>.cer</span><br><span class="line"></span><br><span class="line">回车之后输入密码</span><br></pre></td></tr></table></figure><h5 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h5><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">req -new -x509 -key rsa-<span class="keyword">private</span>.key -days <span class="number">720</span> -<span class="keyword">out</span> rsa-<span class="keyword">public</span>.cer</span><br><span class="line"></span><br><span class="line">需要验证设置的key密码</span><br><span class="line">还有几项用户自定义输入项：</span><br><span class="line"></span><br><span class="line">　　　　　　　　Contry <span class="keyword">Name</span> (<span class="number">2</span> letter code) [au]：   CN</span><br><span class="line"></span><br><span class="line">　　　　　　　　State <span class="keyword">or</span> Province <span class="keyword">Name</span> (full <span class="keyword">name</span>)[Some-State]：        SH</span><br><span class="line"></span><br><span class="line">　　　　　　　　Locality <span class="keyword">Name</span> （eg.city）【】：    SH</span><br><span class="line"></span><br><span class="line">         Organation <span class="keyword">Name</span>（eg.company）【Internet Widgits Pty Ltd】：xxxx</span><br><span class="line"></span><br><span class="line">　　　　　　　　Organational <span class="keyword">Unit</span> <span class="keyword">Name</span>（eg.section）【】：xxxx</span><br><span class="line"></span><br><span class="line">　　　　　　　　Common <span class="keyword">Name</span>（eg.Your <span class="keyword">name</span>）：Zs</span><br><span class="line"></span><br><span class="line">　　　　　　　　Email Address：xxxxx@<span class="number">163</span>.com</span><br></pre></td></tr></table></figure><h5 id="生成PKCS12私钥文件"><a href="#生成PKCS12私钥文件" class="headerlink" title="生成PKCS12私钥文件"></a>生成PKCS12私钥文件</h5><figure class="highlight delphi"><table><tr><td class="code"><pre><span class="line">pkcs12 -<span class="keyword">export</span> -<span class="keyword">name</span> test-<span class="keyword">alias</span> -inkey rsa-<span class="keyword">private</span>.key -<span class="keyword">in</span> rsa-<span class="keyword">public</span>.cer -<span class="keyword">out</span> test-rsa.pfx</span><br><span class="line"></span><br><span class="line">需要验证key的密码</span><br></pre></td></tr></table></figure><h5 id="获得PKCS12的PEM文件"><a href="#获得PKCS12的PEM文件" class="headerlink" title="获得PKCS12的PEM文件"></a>获得PKCS12的PEM文件</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">pkcs12 -<span class="keyword">in</span> test-rsa<span class="selector-class">.pfx</span> -nodes -out test-rsa.pem</span><br><span class="line"></span><br><span class="line">需要验证key的密码</span><br></pre></td></tr></table></figure><h5 id="提取私钥"><a href="#提取私钥" class="headerlink" title="提取私钥"></a>提取私钥</h5><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">rsa -<span class="keyword">in</span> <span class="keyword">test</span>-rsa.pem -<span class="keyword">out</span> <span class="keyword">test</span>-rsa.key</span><br></pre></td></tr></table></figure><h5 id="转换密钥格式（PKCS8）"><a href="#转换密钥格式（PKCS8）" class="headerlink" title="转换密钥格式（PKCS8）"></a>转换密钥格式（PKCS8）</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">pkcs8 -topk8 -inform PEM -<span class="keyword">in</span> test-rsa<span class="selector-class">.key</span> -outform pem -nocrypt -out test-rsa<span class="selector-class">.pem</span><span class="selector-class">.pkcs8</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> RSA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
            <tag> SHA1WithRSA </tag>
            
            <tag> OpenSSL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>技术小结一</title>
      <link href="/2017/09/22/%E6%8A%80%E6%9C%AF%E5%B0%8F%E7%BB%93%E4%B8%80/"/>
      <url>/2017/09/22/%E6%8A%80%E6%9C%AF%E5%B0%8F%E7%BB%93%E4%B8%80/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="SHA1WithRSA算法"><a href="#SHA1WithRSA算法" class="headerlink" title="SHA1WithRSA算法"></a>SHA1WithRSA算法</h4><p>SHA1WithRSA即安全哈希算法，用于签名；RSA是目前最有影响力额公私钥算法。</p><p>SHA1WithRSA:用SHA算法进行签名，用RSA算法进行加密。<a href="https://baike.baidu.com/item/sha1withrsa" target="_blank" rel="noopener">sha1withrsa</a>通过公钥加签，私钥解签。验证数据的合法性。</p><p>RSA依赖公私钥PEM进行对称加密。公钥证书CER，私钥PEM。<a href="http://blog.csdn.net/xiao_zhu_kuai_pao/article/details/45675509" target="_blank" rel="noopener">PEM_密钥对生成与读取方法</a></p><p><a href="http://gaofulai1988.iteye.com/blog/2262802" target="_blank" rel="noopener">Java RSA 加密 解密 签名 验签</a></p><h5 id="提取PEM证书-—需要密码"><a href="#提取PEM证书-—需要密码" class="headerlink" title="提取PEM证书  —需要密码"></a>提取PEM证书  —需要密码</h5><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -<span class="keyword">in</span> <span class="keyword">test</span>-party-2.pfx -nodes -<span class="keyword">out</span> xxxx.pem</span><br></pre></td></tr></table></figure><h5 id="提取私钥"><a href="#提取私钥" class="headerlink" title="提取私钥"></a>提取私钥</h5><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">openssl rsa -<span class="keyword">in</span> bill99<span class="selector-class">.pem</span> -out bill99.key</span><br></pre></td></tr></table></figure><h5 id="提取Pkcs8格式的证书"><a href="#提取Pkcs8格式的证书" class="headerlink" title="提取Pkcs8格式的证书"></a>提取Pkcs8格式的证书</h5><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">openssl pkcs8 -topk8 -inform PEM -<span class="keyword">in</span> <span class="keyword">private</span>.key -outform pem -nocrypt -<span class="keyword">out</span> pkcs8.pem</span><br></pre></td></tr></table></figure><h4 id="Java代码实现公私钥的加载以及加签验签"><a href="#Java代码实现公私钥的加载以及加签验签" class="headerlink" title="Java代码实现公私钥的加载以及加签验签"></a>Java代码实现公私钥的加载以及加签验签</h4><h5 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h5><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> ENCRYP_TYPE = <span class="string">"SHA1WithRSA"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> RSA = <span class="string">"RSA"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> CHARSET = <span class="string">"UTF-8"</span>;</span><br></pre></td></tr></table></figure><h5 id="公钥加载"><a href="#公钥加载" class="headerlink" title="公钥加载"></a>公钥加载</h5><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">FileInputStream input = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</span><br><span class="line">input = <span class="keyword">new</span> FileInputStream(publicCertPath);</span><br><span class="line">X509Certificate cer = (X509Certificate) cf.generateCertificate(input);</span><br><span class="line"></span><br><span class="line">PublicKey pk = cer.getPublicKey();</span><br><span class="line"><span class="keyword">this</span>.publicKey = pk;</span><br><span class="line">&#125; <span class="keyword">catch</span> (CertificateException e) &#123;</span><br><span class="line"><span class="comment">//证书异常</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">//文件不存在</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (input != <span class="literal">null</span>) &#123;</span><br><span class="line">input.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">//关闭流异常</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="私钥加载"><a href="#私钥加载" class="headerlink" title="私钥加载"></a>私钥加载</h5><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">String</span> getPrivateKeyStream() &#123;</span><br><span class="line"><span class="keyword">BufferedReader</span> br = <span class="keyword">null</span>;</span><br><span class="line">StringBuffer <span class="built_in">key</span> = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">br = <span class="keyword">new</span> <span class="keyword">BufferedReader</span>(<span class="keyword">new</span> FileReader(privateCertPath));</span><br><span class="line"><span class="keyword">String</span> s = br.readLine();</span><br><span class="line">s = br.readLine();</span><br><span class="line"><span class="keyword">while</span> (!StringUtils.isEmpty(s) &amp;&amp; s.charAt(<span class="number">0</span>) != <span class="string">'-'</span>) &#123;</span><br><span class="line"><span class="built_in">key</span>.<span class="built_in">append</span>(s + <span class="string">"\r"</span>);</span><br><span class="line">s = br.readLine();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line"><span class="comment">//文件不存在</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">//IO读取异常</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (br != <span class="keyword">null</span>) &#123;</span><br><span class="line">br.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">//关闭流异常</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">key</span>.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> createPrivateKey() &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">byte</span>[] b = Base64.decodeBase64(getPrivateKeyStream().getBytes(CHARSET));</span><br><span class="line"><span class="comment">// 生成私匙</span></span><br><span class="line">KeyFactory kf = KeyFactory.getInstance(RSA);</span><br><span class="line">PKCS8EncodedKeySpec keySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(b);</span><br><span class="line">PrivateKey privateKey = kf.generatePrivate(keySpec);</span><br><span class="line"><span class="keyword">this</span>.privateKey = privateKey;</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line"><span class="comment">//编码异常</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line"><span class="comment">//算法异常</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InvalidKeySpecException e) &#123;</span><br><span class="line"><span class="comment">//验证证书格式异常</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="加签"><a href="#加签" class="headerlink" title="加签"></a>加签</h5><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">//getSignField 根据TestVo生成指定的加签串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> doSign(SignVO request) &#123;</span><br><span class="line"><span class="keyword">String</span> signField = getSignField(request);</span><br><span class="line"><span class="built_in">try</span> &#123;</span><br><span class="line">Signature signature = Signature.getInstance(ENCRYP_TYPE);</span><br><span class="line">signature.initSign(<span class="keyword">this</span>.privateKey);</span><br><span class="line">signature.update(signField.getBytes(CHARSET));</span><br><span class="line"><span class="keyword">byte</span>[] sign = signature.sign();</span><br><span class="line">request.setSign(<span class="keyword">new</span> <span class="keyword">String</span>(Base64.encodeBase64(sign), CHARSET));</span><br><span class="line">&#125; <span class="built_in">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="解签"><a href="#解签" class="headerlink" title="解签"></a>解签</h5><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">//getSignField 根据TestVo生成指定的加签串</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> verificate(TestVo response) &#123;</span><br><span class="line"><span class="keyword">String</span> sign = response.getSign();<span class="comment">//返回的验签标识</span></span><br><span class="line"><span class="built_in">boolean</span> pass = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">String</span> signField = getRespSignField(response);</span><br><span class="line">Signature sig = Signature.getInstance(ENCRYP_TYPE);</span><br><span class="line">sig.initVerify(<span class="keyword">this</span>.publicKey);</span><br><span class="line"><span class="built_in">byte</span>[] signFields = Base64.decodeBase64(sign.getBytes(CHARSET));</span><br><span class="line">sig.update(signField.getBytes(CHARSET));</span><br><span class="line">pass = sig.verify(signFields);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//验签异常</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="HttpClient实现Https请求"><a href="#HttpClient实现Https请求" class="headerlink" title="HttpClient实现Https请求"></a>HttpClient实现Https请求</h4><h5 id="初始化基础配置"><a href="#初始化基础配置" class="headerlink" title="初始化基础配置"></a>初始化基础配置</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> PoolingHttpClientConnectionManager connManager;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> RequestConfig requestConfig;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">SSLContext sslcontext = createIgnoreVerifySSL();</span><br><span class="line">Registry&lt;ConnectionSocketFactory&gt; socketFactoryRegistry = RegistryBuilder</span><br><span class="line">        .&lt;ConnectionSocketFactory&gt; create().<span class="keyword">register</span>(<span class="string">"http"</span>, PlainConnectionSocketFactory.INSTANCE)</span><br><span class="line">        .<span class="keyword">register</span>(<span class="string">"https"</span>, <span class="keyword">new</span> SSLConnectionSocketFactory(sslcontext)).build();</span><br><span class="line">connManager = <span class="keyword">new</span> PoolingHttpClientConnectionManager(</span><br><span class="line">        socketFactoryRegistry);</span><br><span class="line"><span class="comment">// 连接池超时时间使用connect超时时间</span></span><br><span class="line">requestConfig = RequestConfig.custom()</span><br><span class="line">.setConnectionRequestTimeout(SdkConstants.DEFAULT_CONNECTION_TIMEOUT)</span><br><span class="line">.setConnectTimeout(SdkConstants.DEFAULT_CONNECTION_TIMEOUT)</span><br><span class="line">.setSocketTimeout(SdkConstants.DEFAULT_SOCKET_TIMEOUT).build();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//初始化异常</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实现Https请求"><a href="#实现Https请求" class="headerlink" title="实现Https请求"></a>实现Https请求</h5><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绕过验证</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> KeyManagementException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="function">SSLContext <span class="title">createIgnoreVerifySSL</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException, KeyManagementException </span>&#123;</span><br><span class="line">        SSLContext sc = SSLContext.getInstance(<span class="string">"SSLv3"</span>);</span><br><span class="line">        <span class="comment">// 实现一个X509TrustManager接口，用于绕过验证，不用修改里面的方法</span></span><br><span class="line">        X509TrustManager trustManager = <span class="keyword">new</span> X509TrustManager() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> checkClientTrusted(java.security.cert.X509Certificate[] paramArrayOfX509Certificate,</span><br><span class="line">                     String paramString) <span class="keyword">throws</span> CertificateException &#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> checkServerTrusted(java.security.cert.X509Certificate[] paramArrayOfX509Certificate,</span><br><span class="line">                     String paramString) <span class="keyword">throws</span> CertificateException &#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> java.security.cert.X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        sc.init(<span class="keyword">null</span>, <span class="keyword">new</span> TrustManager[] &#123; trustManager &#125;, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> sc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String doPostJsonRequestByHttps(String reqeustString, String url,</span><br><span class="line"><span class="keyword">int</span> connectTimeout, <span class="keyword">int</span> socketTimeOut) &#123;</span><br><span class="line"><span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        String responseString;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">changeRequestConfig(connectTimeout,socketTimeOut);</span><br><span class="line">CloseableHttpClient httpsClient = HttpClients.custom().setConnectionManager(connManager).build();</span><br><span class="line">HttpPost httpPost = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">httpPost.addHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">httpPost.setConfig(requestConfig);</span><br><span class="line">httpPost.setEntity(<span class="keyword">new</span> StringEntity(reqeustString, ContentType.APPLICATION_JSON));</span><br><span class="line">response = httpsClient.execute(httpPost);</span><br><span class="line"><span class="comment">// get http status code</span></span><br><span class="line"><span class="keyword">int</span> resStatu = response.getStatusLine().getStatusCode();</span><br><span class="line">responseString = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (resStatu == HttpStatus.SC_OK) &#123;</span><br><span class="line">responseString = EntityUtils.toString(response.getEntity());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> Exception(url + <span class="string">",the statusCode is "</span> + resStatu);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> responseString;</span><br><span class="line">&#125;<span class="keyword">catch</span> (ConnectTimeoutException e) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (SocketTimeoutException e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (response != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">EntityUtils.consume(response.getEntity());</span><br><span class="line">response.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改默认超时时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> connectionTime</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> soTimeout</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">void</span> <span class="title">changeRequestConfig</span><span class="params">(<span class="keyword">int</span> connectionTime,<span class="keyword">int</span> soTimeout)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(connectionTime != requestConfig.getConnectionRequestTimeout()  </span><br><span class="line">|| soTimeout != requestConfig.getSocketTimeout())&#123;</span><br><span class="line">requestConfig = RequestConfig.custom()</span><br><span class="line">.setConnectionRequestTimeout(connectionTime)</span><br><span class="line">.setConnectTimeout(connectionTime)</span><br><span class="line">.setSocketTimeout(soTimeout).build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="JSON转换Map存在的问题"><a href="#JSON转换Map存在的问题" class="headerlink" title="JSON转换Map存在的问题"></a>JSON转换Map存在的问题</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> json = <span class="string">""</span>;</span><br><span class="line"><span class="built_in">Map</span>&lt;<span class="built_in">String</span>,<span class="built_in">Object</span>&gt; result = <span class="built_in">JSON</span>.parseObject(json);</span><br><span class="line"></span><br><span class="line">如果转换的<span class="built_in">Map</span>中存在<span class="built_in">Map</span>对象， toString（）方法会返回<span class="built_in">JSON</span>字符串。   </span><br><span class="line"></span><br><span class="line">需要下列方法在此转换：</span><br><span class="line"><span class="built_in">JSON</span>.parseObject(result.get(<span class="string">"xxxx"</span>).toString(), HashMap.class)</span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">&#123;<span class="string">"aaa"</span>:<span class="string">"bbbb"</span>&#125;  不转之前的</span><br><span class="line">&#123;aaa=bbb&#125;  转之后的</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Spring与Hessian的集成</title>
      <link href="/2017/06/28/Spring%E4%B8%8EHessian%E7%9A%84%E9%9B%86%E6%88%90/"/>
      <url>/2017/06/28/Spring%E4%B8%8EHessian%E7%9A%84%E9%9B%86%E6%88%90/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h4><p>　　在<a href="http://www.rtime.xin/2017/06/27/Java%20Hessian%E5%88%9D%E4%BD%93%E9%AA%8C/" target="_blank" rel="noopener">上一篇</a>中我们通过HessianServlet的方式暴露一个简单的Hessian服务，这种方式会造成服务层和控制层之间耦合。一般情况下我们都不会采取这种方式【本次只是为了演示基础的Hessian服务实现】。Spring框架也集成了对一些基础RPC框架的支持，比如jaxws-WebService、Hessian、Http invoker等。<br>　　<br>    本篇文章就简单介绍下，Spring与Hessian集成的方法。</p><h4 id="Spring-Hessian-Demo"><a href="#Spring-Hessian-Demo" class="headerlink" title="Spring-Hessian Demo"></a>Spring-Hessian Demo</h4><h5 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h5><p>　　<strong>pom.xml</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lmax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>disruptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="接口声明以及实现"><a href="#接口声明以及实现" class="headerlink" title="接口声明以及实现"></a>接口声明以及实现</h5><p>　　<br>　　<strong>HelloWordService.java</strong></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">　　public<span class="built_in"> interface </span>HelloWordService &#123;</span><br><span class="line"></span><br><span class="line">　　　　public String sayMsg(String message);</span><br><span class="line"></span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure><p>　　<strong>HelloWordServiceImpl.java</strong></p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWordServiceImpl</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">HelloWordService</span></span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">String</span> sayMsg(<span class="keyword">String</span> message) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello  "</span> + message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="测试Code"><a href="#测试Code" class="headerlink" title="测试Code"></a>测试Code</h5><p>　　<strong>HellowordController.java</strong></p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HellowordController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> static Logger logger = LogManager.getLogger(HellowordController.<span class="keyword">class</span>.getName());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource(name=<span class="meta-string">"hellowordServiceImpl"</span>)</span></span><br><span class="line"><span class="keyword">private</span> HelloWordService service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value=<span class="meta-string">"/sayMsg"</span>,method=RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String sayMsg(String msg)&#123;</span><br><span class="line">logger.info(<span class="string">"parameter msg ----::::"</span>+msg);</span><br><span class="line"><span class="keyword">return</span> service.sayMsg(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　<strong>Test.java</strong></p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) throws Exception&#123;</span><br><span class="line"></span><br><span class="line">String url = <span class="string">"http://localhost:8080/hessian-server-springmvc/hessian/hellowordService"</span>;</span><br><span class="line"></span><br><span class="line">HessianProxyFactory factory = new HessianProxyFactory();</span><br><span class="line">HelloWordService<span class="built_in"> service </span>= (HelloWordService) factory.create(HelloWordService.class, url);</span><br><span class="line"></span><br><span class="line">System.out.println(service.sayMsg(<span class="string">" word!!!!"</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>　　<strong>webContext.xml</strong><br><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">context:annotation-config</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.luis.framework.hessian"</span>/&gt;</span>  </span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span> /&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- 2.jsp视图解析器，内部资源视图解析器;前缀+逻辑名+后缀 --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jspViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br><span class="line"><span class="xml">   </span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span> <span class="comment">&lt;!-- PropertyPlaceholderConfigurer类中有个locations属性，接收的是一个数组，即我们可以在下面配好多个properties文件 --&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">array</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:application.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"hellowordServiceImpl"</span> <span class="attr">class</span>=<span class="string">"org.springframework.remoting.caucho.HessianProxyFactoryBean"</span>&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"serviceInterface"</span> <span class="attr">value</span>=<span class="string">"org.luis.framework.hessian.service.HelloWordService"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"serviceUrl"</span> <span class="attr">value</span>=<span class="string">"$</span></span></span><span class="template-variable">&#123;hessian.server.url&#125;</span><span class="xml"><span class="tag"><span class="string">/hellowordService"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>　　<strong>hessian-servlet.xml</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"hellowordService"</span> <span class="attr">class</span>=<span class="string">"org.luis.framework.hessian.service.impl.HelloWordServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 测试服务 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"/hellowordService"</span> <span class="attr">class</span>=<span class="string">"org.springframework.remoting.caucho.HessianServiceExporter"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"service"</span> <span class="attr">ref</span>=<span class="string">"hellowordService"</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"serviceInterface"</span> <span class="attr">value</span>=<span class="string">"org.luis.framework.hessian.service.HelloWordService"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>　　<strong>application.properties</strong></p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">hessian<span class="selector-class">.server</span><span class="selector-class">.url</span>=http:<span class="comment">//localhost:8080/hessian-server-springmvc/hessian</span></span><br></pre></td></tr></table></figure><p>　　<strong>web.xml</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener</span><br><span class="line"><span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hessianService<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:hessian-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hessianService<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hessian/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring MVC --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span></span><br><span class="line">classpath:webContext.xml</span><br><span class="line"><span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>　　将应用通过war的方式发布至Tomcat容器，容器正常启动。<br>　　浏览器中输入：<code>http://localhost:8080/hessian-server-springmvc/hessian/hellowordService</code></p><p>　　输出：“<strong>HTTP Status 405 - HessianServiceExporter only supports POST requests</strong>”，即表示Hessian服务发布成功<br>　　<br>　　<strong>两种验证方式：</strong><br>　　　　1.通过HTTP的方式，自已调用自已的Hessian服务<br>　　　　2.通过Main方法直接验证</p><p>　　<strong>第一种方式</strong><br>　　　　浏览器输入：<code>http://localhost:8080/hessian-server-springmvc/sayMsg?msg=xxx</code><br>　　　　输出”Hello xxx“表示服务自已调用自已正常、</p><p>　　<strong>第二种方式：</strong><br>　　　　直接运行Main方法即可。</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> hessian </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java Hessian初体验</title>
      <link href="/2017/06/27/Java%20Hessian%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/2017/06/27/Java%20Hessian%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h4><p>　　<a href="http://hessian.caucho.com/" target="_blank" rel="noopener">Hessian</a>是一个轻量级的远程调用框架，集成Hessian后的web应用既可以暴露服务，也可引入其他的应用Hessian服务，可以实现简单的跨系统之间的交互。<strong>Hessian采用的是二进制的RPC协议。</strong><br>　　Hessian主要核心有两块：<br>　　-  暴露HTTP服务<br>　　-  序列化（内置）<br>　　<br>　　Hessian暴露Http服务是基于HttpServlet实现，通过数据流的方式接收请求信息（类、方法、请求参数），invoke执行实际Object的方法。<br>　　序列化是指数据在网络中传输的处理，比如我们在网络传递一段信息或者数据落地（写入磁盘），不通过序列化直接传递信息本身。这种会存在第一是效率问题，第二是安全问题，第三是规范问题。数据的传输一般都要先进行序列化。<br>　　序列化就是数据写入或者传输时候进行的处理。<br>　　反序列化就将读到的数据进行解析，得到实际的Object。　　　　</p><h4 id="Hessian-Demo"><a href="#Hessian-Demo" class="headerlink" title="Hessian Demo"></a>Hessian Demo</h4><h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><p>　　<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">　　<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.38<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="创建对外暴露的接口"><a href="#创建对外暴露的接口" class="headerlink" title="创建对外暴露的接口"></a>创建对外暴露的接口</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">　　public<span class="built_in"> interface </span>HelloWordService &#123;</span><br><span class="line"></span><br><span class="line">public String sayMsg(String message);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h5 id="接口暴露成HTTP服务"><a href="#接口暴露成HTTP服务" class="headerlink" title="接口暴露成HTTP服务"></a>接口暴露成HTTP服务</h5><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">HelloWordServiceImpl</span> <span class="keyword">extends</span> <span class="title">HessianServlet</span> <span class="title">implements</span> <span class="title">HelloWordService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">public <span class="type">String</span> sayMsg(<span class="type">String</span> message) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello"</span> + message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloword<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.luis.framework.hessian.service.impl.HelloWordServiceImpl<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>helloword<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="容器启动"><a href="#容器启动" class="headerlink" title="容器启动"></a>容器启动</h5><p>　　将应用通过war的方式发布至Tomcat容器，容器正常启动。<br>　　浏览器中输入：<code>http://localhost:8080/hessian-server/hello</code><br>　　<br>　　输出：“<strong>Hessian Requires POST</strong>”，即表示Hessian服务发布成功</p><h5 id="客户端调用"><a href="#客户端调用" class="headerlink" title="客户端调用"></a>客户端调用</h5><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">　　public static void main(String[] args) throws Exception&#123;</span><br><span class="line"></span><br><span class="line">String url = <span class="string">"http://localhost:8080/hessian-server/hello"</span>;</span><br><span class="line"></span><br><span class="line">HessianProxyFactory factory = new HessianProxyFactory();</span><br><span class="line">HelloWordService<span class="built_in"> service </span>= (HelloWordService) factory.create(HelloWordService.class, url);</span><br><span class="line"></span><br><span class="line">System.out.println(service.sayMsg(<span class="string">" word!!!!"</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　运行测试方法，Console输出<code>hello word!!!!</code>表示调用远程正常。<br>　　<br>　　一个简单的Java版Hessian服务【Hello world！】就完成勒。</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> hessian </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Oracle 实践</title>
      <link href="/2017/06/27/Oracle%20%E5%AE%9E%E8%B7%B5/"/>
      <url>/2017/06/27/Oracle%20%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="查看当前的库"><a href="#查看当前的库" class="headerlink" title="查看当前的库"></a>查看当前的库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  <span class="keyword">name</span>  <span class="keyword">from</span>  v$ <span class="keyword">database</span>  ;</span><br></pre></td></tr></table></figure><h4 id="查看当前表是否存在"><a href="#查看当前表是否存在" class="headerlink" title="查看当前表是否存在"></a>查看当前表是否存在</h4><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> count<span class="comment">(*) from user_tables where table_name = 'TABLE_NAME';      0表示不存在，1表示存在。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">select count(*)</span> <span class="keyword">from</span> dba_tables <span class="keyword">where</span> owner = <span class="string">'USER_NAME'</span> <span class="keyword">and</span> table_name = <span class="string">'TABLE_NAME'</span>;</span><br></pre></td></tr></table></figure><h4 id="建立索引"><a href="#建立索引" class="headerlink" title="建立索引"></a>建立索引</h4><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> IDX_OUT_REFUND_NO <span class="keyword">ON</span> ACCTPAY.T_ACC_REFUND_APPLY(OUT_REFUND_NO);</span><br></pre></td></tr></table></figure><h4 id="查看表的索引"><a href="#查看表的索引" class="headerlink" title="查看表的索引"></a>查看表的索引</h4><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_indexes;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> all_indexes;</span><br></pre></td></tr></table></figure><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> ACCTPAY.IDX_OUT_REFUND_NO;</span><br></pre></td></tr></table></figure><h4 id="表新增列"><a href="#表新增列" class="headerlink" title="表新增列"></a>表新增列</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Schema.Table <span class="keyword">add</span> <span class="keyword">Column</span> VARCHAR2(<span class="number">32</span>) ;</span><br><span class="line">  <span class="keyword">comment</span> <span class="keyword">on</span> <span class="keyword">column</span> Schema.Table.Column</span><br><span class="line">    <span class="keyword">is</span> <span class="string">'字段备注'</span>;</span><br></pre></td></tr></table></figure><h4 id="表删除列"><a href="#表删除列" class="headerlink" title="表删除列"></a>表删除列</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Schema.Table <span class="keyword">drop</span> <span class="keyword">column</span> ColumnName;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sql </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql 实践</title>
      <link href="/2017/06/27/Mysql%20SQL%20%E5%AE%9E%E8%B7%B5/"/>
      <url>/2017/06/27/Mysql%20SQL%20%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="Updaet语句"><a href="#Updaet语句" class="headerlink" title="Updaet语句"></a>Updaet语句</h4><p>　　需求：判断字段是否为空，为空则添加默认值，不位空，则在JSON字符串后面追加。<br>　　<br>　　判断为空的函数：IFNULL()<br>　　字符串追加的函数（这个不是追加，只是替换，因为使用的Json字符串）：replace()</p><p>　　实现语句：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="number">111</span> <span class="keyword">SET</span> <span class="number">222</span> = <span class="keyword">replace</span>(<span class="number">222</span>, <span class="string">'333'</span>, <span class="string">'1'</span>) <span class="keyword">WHERE</span> vod_cid =<span class="number">15</span></span><br><span class="line"></span><br><span class="line">以及</span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> <span class="keyword">table</span> m <span class="keyword">set</span> m.status1 = <span class="number">2</span>,m.status2 = <span class="number">2</span>,m.ext=<span class="keyword">IFNULL</span>(<span class="keyword">replace</span>(ext,<span class="string">'&#125;'</span>,<span class="keyword">CONCAT</span>(<span class="string">',"a":'</span> , <span class="string">'"'</span>, <span class="string">'b'</span> , <span class="string">'"'</span>, <span class="string">'&#125;'</span>)),<span class="string">'&#123;"a":"b"&#125;'</span>),m.update_time = <span class="keyword">NOW</span>()   <span class="keyword">where</span> m.num =<span class="string">'123456'</span>;</span><br></pre></td></tr></table></figure></p><h4 id="commit、rollback等事务控制命令"><a href="#commit、rollback等事务控制命令" class="headerlink" title="commit、rollback等事务控制命令"></a>commit、rollback等事务控制命令</h4><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#commit、rollback用来确保数据库有足够的剩余空间；</span></span><br><span class="line"><span class="meta">#commit、rollback只能用于DML操作，即insert、update、delet;</span></span><br><span class="line"><span class="meta">#rollback操作撤销上一个commit、rollback之后的事务。</span></span><br><span class="line"> </span><br><span class="line">create table test</span><br><span class="line">(</span><br><span class="line"> <span class="function">PROD_ID <span class="title">varchar</span>(<span class="params"><span class="number">10</span></span>) not <span class="literal">null</span>,</span></span><br><span class="line"><span class="function"> PROD_DESC <span class="title">varchar</span>(<span class="params"><span class="number">25</span></span>)  <span class="literal">null</span>,</span></span><br><span class="line"><span class="function"> COST <span class="title">decimal</span>(<span class="params"><span class="number">6</span>,<span class="number">2</span></span>)  <span class="literal">null</span></span></span><br><span class="line"><span class="function">)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#禁止自动提交</span></span><br><span class="line"><span class="keyword">set</span> autocommit=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#设置事务特性,必须在所有事务开始前设置</span></span><br><span class="line"><span class="meta">#set transaction read only;  #设置事务只读</span></span><br><span class="line"><span class="keyword">set</span> transaction read write;  <span class="meta">#设置事务可读、写</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#开始一次事务</span></span><br><span class="line">start transaction;</span><br><span class="line">insert <span class="keyword">into</span> test</span><br><span class="line">values(<span class="string">'4456'</span>,<span class="string">'mr right'</span>,<span class="number">46.97</span>);</span><br><span class="line">commit;     <span class="meta">#位置1</span></span><br><span class="line"> </span><br><span class="line">insert <span class="keyword">into</span> test</span><br><span class="line">values(<span class="string">'3345'</span>,<span class="string">'mr wrong'</span>,<span class="number">54.90</span>);</span><br><span class="line">rollback;    <span class="meta">#回到位置1，(位置2)；上次commit处</span></span><br><span class="line"> </span><br><span class="line">insert <span class="keyword">into</span> test</span><br><span class="line">values(<span class="string">'1111'</span>,<span class="string">'mr wan'</span>,<span class="number">89.76</span>);</span><br><span class="line">rollback;    <span class="meta">#回到位置2，上次rollback处</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
            <tag> Sql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅尝PHP</title>
      <link href="/2017/06/25/%E6%B5%85%E5%B0%9DPHP/"/>
      <url>/2017/06/25/%E6%B5%85%E5%B0%9DPHP/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><p>　　最近需求上线，涉及到底层框架的升级（<code>Spring2.5.6升级为3.2.16</code>）。导致外部商城平台调用Java Hessian服务异常。查询订单状态异常，最后无法支付。商城平台采用的是PHP（<code>世界上最好的语言</code>）。在排查问题的时候，需要模拟PHP调Java场景。不得不在自已本地构建PHP环境。<br>　　<br>　　之前也接触过一些PHP的信息，比如说很出名的博客平台<a href="https://cn.wordpress.org/" target="_blank" rel="noopener">WordPress</a>，一些YY网站（嘿嘿~~~~）。常用的PHP构建环境<code>LMAP（Linux+Mysql+Apache+PHP）</code>，能够帮助我们快速迭代出一个站点。在互联网的初期，很多站点都是采用PHP开发的，比如淘宝商城的第一版(最后在某一些性能或者安全方面的考虑，慢慢的被替换，架构也与之不断的演变。这里就不细述)。<br>　　<br>　　还有一点就是PHP语言入门门槛比较低，编写完的代码直接扔到容器中运行即可。 没有java编译，重新部署等等复杂的流程。每个语言都有自已的优劣势。不同场景下使用不同的语言和技术即可。</p><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>　　1.下载<a href="https://www.apachefriends.org/zh_cn/index.html" target="_blank" rel="noopener">XAMPP</a>，一键构建<code>Apache+MariaDB+PHP+Perl</code>环境<br>　　2.下载<a href="http://www.upupw.net/" target="_blank" rel="noopener">upupw</a>，点击下载Apache服务即可。<br>　　<br>　　第二种方式会比第一种方式更加简单，在功能上没有第一点多，但是小而美。足够我们使用。<br>　　<br>　　我下载的是<a href="UPUPW_NP5.4-1511.7z">PHP 5.4</a>版本。<br>　　<br>　　下载完成直接解压，双击upupw.exe既可以运行。</p><p>　　<img src="https://infos.rtime.xin/upupw_console.png" alt="upupw console">　　</p><h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><p>　　<br>　　打开<code>upupw</code>,输入<code>s1，</code>开启全部服务。等待完成之后浏览器中输入<code>http://localhost/</code>.看到如下页面表示启动应用成功。</p><p>　　<img src="https://infos.rtime.xin/upupw_index.png" alt=""><br>　　<br>　　现在，我们来开发一个PHP版本的<code>HelloWorld</code>。<br>　　在容器的应用部署目录（解压包的<code>htdocs</code>目录）下新增一个test.php文件，键入如下代码：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>  </span></span><br><span class="line"><span class="php">   <span class="keyword">echo</span> <span class="string">"Hello world"</span>;</span></span><br><span class="line"><span class="php">   <span class="keyword">print</span> <span class="string">"hello world"</span>;</span></span><br><span class="line"><span class="php"> <span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>　　打开浏览器重新输入<code>http://localhost/test.php</code>，返回页面中包含<code>&quot;hello world&quot;</code>输出即表示应用无问题，并且运行正常。一个PHP简单版本的HelloWorld就完成了。　　</p><h4 id="后续思考"><a href="#后续思考" class="headerlink" title="后续思考"></a>后续思考</h4><p>　　<br>　　- PHP的语法，数据结构，关键词，基础库，第三方框架等？<br>　　- PHP中存在JAVA中类似Main方法的入口？<br>　　- 语言的使用场景？<br>　　- 最佳实践？以及与JAVA语言的类比？<br>　　- 常用的开发工具？　　</p>]]></content>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 添加自定义的内置标签</title>
      <link href="/2017/06/21/Hexo%20%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%86%85%E7%BD%AE%E6%A0%87%E7%AD%BE/"/>
      <url>/2017/06/21/Hexo%20%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E5%86%85%E7%BD%AE%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h4><p>　　<br>　　想设计一个记录自已骑行的页面，显示时间、地点、路线图等信息。方便以后做一些留念。定位想实现下面类似的效果。参考：《<a href="http://www.iissnan.com/" target="_blank" rel="noopener">特效</a>》<br>　　<br>　　<img src="/images/hexo_lsb.png" alt="特效"><br>　　<br>　　实现方案也比较简单，反键查看源码。直接Copy，在加之改造即可。下面所述的方式是怎么提高代码的复用性。（内置标签）</p><h4 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h4><p>　　　查看源码发现大致结构代码如下：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"location"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"location-icon"</span> <span class="attr">style</span>=<span class="string">"opacity: 1; top: 0px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"location-text animate-init"</span> <span class="attr">style</span>=<span class="string">"opacity: 1; top: 0px;"</span>&gt;</span>XiaMen - China<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>　　相关的CSS样式（<code>优化后</code>）：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.location</span> &#123;</span><br><span class="line">    <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.location-icon</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: top;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'../images/mini_location.png'</span>) no-repeat left center;</span><br><span class="line">    <span class="attribute">background-size</span>: <span class="number">16px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.animate-init</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.location-text</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">vertical-align</span>: top;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　将CSS样式追加到<code>blog/themes/next/source/css/_custom/custom.styl</code>中。<br>　　<br>　　<a href="http://www.rtime.xin/images/mini_location.png" target="_blank" rel="noopener">定位图标下载</a></p><p>　　添加定位信息的时候，拷贝上面的HTML代码至<code>MD文件</code>中，修改span中text文本即可实现效果。（替换“<code>XiaMen - China</code>”）。　　　　</p><h4 id="内置标签"><a href="#内置标签" class="headerlink" title="内置标签"></a>内置标签</h4><p>　　在<code>Hexo</code>中存在一些<a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="noopener">内置标签</a>，比如<code>blockquote</code>,<code>codeblock</code>,<code>pullquote</code>等等。</p><p>　　<strong>我们是否可以上面的HTML抽成一些内置标签？</strong>，比如：<code>lsb</code>。</p><p>　　通过查看自定义标签的标志，发现主题自带标签脚本都会存放在<code>themes/xxx/script/tag/xxx.js</code>中。</p><p>　　参考脚本，编写了一个类似的<code>lsb脚本</code>。如下：<br><figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* global hexo */</span></span><br><span class="line">// Usage: &#123;<span class="symbol">%</span> locationAddr date, address <span class="symbol">%</span>&#125;</span><br><span class="line">// Alias: &#123;<span class="symbol">%</span> lsb date, address <span class="symbol">%</span>&#125;</span><br><span class="line"></span><br><span class="line">function locationAddr(<span class="built_in">args</span>) &#123;</span><br><span class="line">  <span class="built_in">args</span> = <span class="built_in">args</span>.<span class="built_in">join</span>(' ').<span class="built_in">split</span>(',');</span><br><span class="line">  <span class="built_in">var</span> date = <span class="built_in">args</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">var</span> address = <span class="built_in">args</span>[<span class="number">1</span>] || '';</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!date) &#123;</span><br><span class="line">    hexo.<span class="built_in">log</span>.warn('Location date can NOT be empty');</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(!address)&#123;</span><br><span class="line">    hexo.<span class="built_in">log</span>.warn('Location address can NOT be empty');</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  date = date.trim();</span><br><span class="line">  address = address.trim();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">var</span> lsb = ['&lt;div class=<span class="string">"location"</span>&gt;&lt;i class=<span class="string">"location-icon"</span> <span class="built_in">style</span>=<span class="string">"opacity: 1; top:0px;"</span>&gt;&lt;/i&gt;&lt;span class=<span class="string">"location-text animate-init"</span> <span class="built_in">style</span>=<span class="string">"opacity: 1; top: 0px;"</span>&gt;'];</span><br><span class="line"></span><br><span class="line">  date.<span class="built_in">length</span> &gt; <span class="number">0</span> &amp;&amp; lsb.<span class="built_in">push</span>(alt+<span class="string">"-"</span>);</span><br><span class="line">  address.<span class="built_in">length</span> &gt; <span class="number">0</span> &amp;&amp; lsb.<span class="built_in">push</span>(address);</span><br><span class="line">  lsb.<span class="built_in">push</span> ('&lt;/span&gt;&lt;/div&gt;');</span><br><span class="line"></span><br><span class="line">  <span class="built_in">return</span> lsb.<span class="built_in">join</span>(' ');</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.extend.tag.register('locationAddr', locationAddr);</span><br><span class="line">hexo.extend.tag.register('lsb', locationAddr);</span><br></pre></td></tr></table></figure></p><p>　　使用方法：</p><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">　　 &#123;% locationAddr <span class="string">''</span>, <span class="string">'Test Address'</span> %&#125;</span><br><span class="line">　   或者</span><br><span class="line">　　 &#123;% locationAddr <span class="string">'2017-01-22'</span>, <span class="string">'Test Address'</span> %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo High一下以及压缩排版问题</title>
      <link href="/2017/06/21/Hexo%20High%E4%B8%80%E4%B8%8B%E4%BB%A5%E5%8F%8A%E5%8E%8B%E7%BC%A9%E6%8E%92%E7%89%88%E9%97%AE%E9%A2%98/"/>
      <url>/2017/06/21/Hexo%20High%E4%B8%80%E4%B8%8B%E4%BB%A5%E5%8F%8A%E5%8E%8B%E7%BC%A9%E6%8E%92%E7%89%88%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><p>　　<strong>集成<code>Hight一下</code>以及<code>Gulp-html压缩</code>之后出现的问题：</strong></p><p>　　<code>High一下</code>功能多次点击，会创建多个<code>Audio</code>对象，导致同时播放多次音乐，重音。解决办法：判断是否添加<code>Audio</code>对象，如果存在则判断是否播放，播放状态不做任何处理，未播放则调用播放方法。如果不存在则调用后续创建音乐对象的处理。<br>　　<code>Gulp-html压缩</code>会导致我们页面故意添加的空格排版也会被清空掉。查询<code>Gulp-html</code>的API，发现没有这种配置，而且尝试去组合配置，最后发现还是不行。实在没办法后，只能看压缩的源代码。核心思路：就是找到要压缩的地方，对某一类或者几类标签不做压缩处理。</p><h4 id="Hight一下"><a href="#Hight一下" class="headerlink" title="Hight一下"></a>Hight一下</h4><p>　　<a href="https://infos.rtime.xin/high-animation.js" target="_blank" rel="noopener">JavaScript源码</a></p><p>　　定位到100行左右，添加如下代码：<br>　　<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> audios = document.getElementsByTagName(<span class="string">"audio"</span>);</span><br><span class="line"><span class="keyword">if</span>(audios.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!audios[<span class="number">0</span>].ended)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        audios[<span class="number">0</span>].play();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="Gulp-html压缩"><a href="#Gulp-html压缩" class="headerlink" title="Gulp-html压缩"></a>Gulp-html压缩</h4><p>　　gulp对HTML的压缩有两种框架<a href="https://github.com/jonschlinkert/gulp-htmlmin" target="_blank" rel="noopener">gulp-minify-html</a>和<a href="https://github.com/jonschlinkert/gulp-htmlmin" target="_blank" rel="noopener">gulp-htmlmin</a>。<br>　　<br>　　<code>gulp-minify-html</code>是基于<a href="https://github.com/Swaagie/minimize" target="_blank" rel="noopener">minimize</a>做的包装，其核心压缩的处理都是在<code>minimize</code>中完成的。<br>　　<code>gulp-htmlmin</code>是基于<a href="https://github.com/kangax/html-minifier" target="_blank" rel="noopener">html-minifier</a>的包装。<br>　　<br>　　本文暂时只讨论基于<code>html-minifier</code>的改造，<strong>设置多个标签不做压缩处理</strong>。<br>　　<br>　　找到<code>html-minifier</code>压缩的核心代码：<br>　　绝对路径：<code>blog/node_modules/gulp-htmlmin/node_modules/html-minifier/src/htmlminifier.js</code><br>　　<br>　　翻阅源码发现压缩是通过<code>HTMLParser</code>解析DOM的方式。轮训每个标签，在通过正则表达式替换指定字符。（还有更多的特殊处理，这里就不细节描述。）<br>　　<br>　　定位到如下一行：<br><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">chars: <span class="function"><span class="keyword">function</span><span class="params">(text, prevTag, nextTag)</span> </span>&#123;</span><br><span class="line">  prevTag = prevTag === <span class="string">''</span> ? <span class="string">'comment'</span> : prevTag;</span><br><span class="line">  nextTag = nextTag === <span class="string">''</span> ? <span class="string">'comment'</span> : nextTag;</span><br></pre></td></tr></table></figure></p><p>　　<br>　　添加过滤处理：<br><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">　　/<span class="regexp">/  当前标签为p/br</span><span class="regexp">/strong/div</span> ,不做处理直接返回</span><br><span class="line"><span class="keyword">if</span>(currentTag === undefined <span class="params">||</span>  currentTag === <span class="string">'p'</span> <span class="params">||</span> prevTag === <span class="string">'p'</span> </span><br><span class="line">        <span class="params">||</span> nextTag === <span class="string">'p'</span> <span class="params">||</span> currentTag === <span class="string">'br'</span><span class="params">||</span> currentTag === <span class="string">'strong'</span></span><br><span class="line">        <span class="params">||</span> currentTag === <span class="string">'div'</span>)&#123;</span><br><span class="line">        buffer.push(text);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></p><p>　　</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo页面优化和音乐的心得</title>
      <link href="/2017/06/20/Hexo%E9%A1%B5%E9%9D%A2%E4%BC%98%E5%8C%96%E5%92%8C%E9%9F%B3%E4%B9%90%E7%9A%84%E5%BF%83%E5%BE%97/"/>
      <url>/2017/06/20/Hexo%E9%A1%B5%E9%9D%A2%E4%BC%98%E5%8C%96%E5%92%8C%E9%9F%B3%E4%B9%90%E7%9A%84%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h4><p>　　这两天在添加“留言”以及“关于”页面，准备先简单设计一下自已的页面。<code>留言</code>页面可以放置一些自已比较感兴趣的音乐、以及一些JS特效，再集成一个第三方的留言功能。<code>关于</code>页面可以放置一些简单的联系方式、以及基础信息的存放，还有自已<code>帅照</code>。嘿嘿嘿嘿。。。。。<br>　　音乐插件的集成不在这里过多复述，请参考：<a href="http://tc9011.com/2016/12/24/hexo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E3%80%81high%E4%B8%80%E4%B8%8B%E5%8F%8A%E4%B8%80%E4%BA%9B%E5%9D%91/" target="_blank" rel="noopener">hexo添加音乐</a><br>　　关于页面帅照采用NexT的扩展标签<code>fullimage</code>。嘿嘿嘿嘿。。。。<br>　　<br>　　在官方的<code>常见方案</code>中关于NexT的优化，看到一篇帖子，是关于gulp插件的介绍，自动化构建工具，通过一系列的<code>Task</code>,完成引用的优化。主要思想就是通过压缩HTML，CSS，JavaSCript减少加载内容的大小，提升网站响应效率。<br>　　<br>　　关于<code>Gulp</code>的优化，可以参照“<a href="http://www.5941740.cn/2016/02/19/gulp-minify-blog/" target="_blank" rel="noopener">使用gulp精简hexo博客代码</a>”，也可以参考我写一篇博客“<a href="http://www.rtime.xin/2017/06/14/Next%20%E8%B0%83%E4%BC%98/" target="_blank" rel="noopener">Next 调优</a>”。</p><h4 id="从1000到1"><a href="#从1000到1" class="headerlink" title="从1000到1"></a>从1000到1</h4><p>　　通过<code>hexo g</code>命令生成静态页面，随便打开一个<code>index.html</code>都可以发现有几百行到上千行的代码，其中大部分都是空白片段。关于大片的空白片段可以通过<code>gulp</code>插件进行压缩，下面方法主要是要讲怎么压缩HTML中的JavaScript代码。<br>　　插件对于HTML页面进行压缩时，不会对HTML中包含的JavaScript代码进行压缩，参考<code>浏览器--》反键查看源码</code>，还是有一些小段的JavaScript代码，对于存在有代码洁癖的程序猿，肯定会去想方设法去优化掉。<br>　　<img src="https://infos.rtime.xin/hexo_js.png" alt="hexo js ">　　</p><h5 id="定位该段JavaScript"><a href="#定位该段JavaScript" class="headerlink" title="定位该段JavaScript"></a>定位该段JavaScript</h5><p>　　<br>　　由于站点是部署在Linux系统下，切换到站点主题目录(<code>/blog/themes/next</code>)。执行<code>find . -type f | xargs grep -F &quot;code标识&quot;</code>。定位该段代码在何配置文件中。<br><figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="xml">[root@luisyang next]# find . -type f | xargs grep -F "var NexT=window.NexT||&#123;&#125;;"</span></span><br><span class="line"><span class="xml">./layout/_partials/head.swig:<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">id</span>=<span class="string">"hexo.configurations"</span>&gt;</span><span class="javascript"><span class="keyword">var</span> NexT=<span class="built_in">window</span>.NexT||&#123;&#125;;<span class="keyword">var</span> CONFIG=&#123;<span class="attr">root</span>:<span class="string">'</span></span></span><span class="template-variable">&#123;&#123; theme.root &#125;&#125;</span><span class="xml"><span class="actionscript"><span class="string">',scheme:'</span></span></span><span class="template-variable">&#123;&#123; theme.scheme &#125;&#125;</span><span class="xml"><span class="undefined">',sidebar:</span></span><span class="template-variable">&#123;&#123;theme.sidebar|<span class="keyword">json_encode</span>&#125;&#125;</span><span class="xml"><span class="undefined">,fancybox:</span></span><span class="template-variable">&#123;&#123;theme.fancybox&#125;&#125;</span><span class="xml"><span class="undefined">,motion:</span></span><span class="template-variable">&#123;&#123;theme.use_motion&#125;&#125;</span><span class="xml"><span class="undefined">,duoshuo:&#123;userId:'</span></span><span class="template-variable">&#123;&#123; theme.duoshuo_info.user_id | default() &#125;&#125;</span><span class="xml"><span class="actionscript"><span class="string">',author:'</span></span></span><span class="template-variable">&#123;&#123; theme.duoshuo_info.admin_nickname | default(__('author'))&#125;&#125;</span><span class="xml"><span class="actionscript"><span class="string">'&#125;,algolia:&#123;applicationID:'</span></span></span><span class="template-variable">&#123;&#123; theme.algolia.applicationID &#125;&#125;</span><span class="xml"><span class="actionscript"><span class="string">',apiKey:'</span></span></span><span class="template-variable">&#123;&#123; theme.algolia.apiKey &#125;&#125;</span><span class="xml"><span class="actionscript"><span class="string">',indexName:'</span></span></span><span class="template-variable">&#123;&#123; theme.algolia.indexName &#125;&#125;</span><span class="xml"><span class="undefined">',hits:</span></span><span class="template-variable">&#123;&#123;theme.algolia_search.hits|<span class="keyword">json_encode</span>&#125;&#125;</span><span class="xml"><span class="undefined">,labels:</span></span><span class="template-variable">&#123;&#123;theme.algolia_search.labels|<span class="keyword">json_encode</span>&#125;&#125;</span><span class="xml"><span class="undefined">&#125;&#125;;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>　　可以发现该段代码存在<code>./layout/_partials/head.swig</code>中。特别注意：<code>{ \{  xxx  }\  }</code>标识模板会引用页面变量中的某个属性，<strong>这段代码是不能单独抽取成一个JS文件。</strong></p><h5 id="JS压缩"><a href="#JS压缩" class="headerlink" title="JS压缩"></a>JS压缩</h5><p>　　<br>　　常见的JavaScript压缩工具：<br>　　　　<a href="http://tool.chinaz.com/js.aspx" target="_blank" rel="noopener">站长工具-JS压缩</a><br>　　　　<a href="http://tool.lu/js/" target="_blank" rel="noopener">在线JS压缩</a><br>　　<br>　　点击“普通压缩”<br>　　<br><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">var NexT=<span class="keyword">window</span>.NexT||&#123;&#125;;var CONFIG=&#123;root:<span class="string">'&#123;&#123; theme.root &#125;&#125;'</span>,scheme:<span class="string">'&#123;&#123; theme.scheme &#125;&#125;'</span>,sidebar:&#123;&#123;theme.sidebar|json_encode&#125;&#125;,fancybox:&#123;&#123;theme.fancybox&#125;&#125;,motion:&#123;&#123;theme.use_motion&#125;&#125;,duoshuo:&#123;userId:<span class="string">'&#123;&#123; theme.duoshuo_info.user_id | default() &#125;&#125;'</span>,author:<span class="string">'&#123;&#123; theme.duoshuo_info.admin_nickname | default(__('</span>author<span class="string">'))&#125;&#125;'</span>&#125;,algolia:&#123;applicationID:<span class="string">'&#123;&#123; theme.algolia.applicationID &#125;&#125;'</span>,apiKey:<span class="string">'&#123;&#123; theme.algolia.apiKey &#125;&#125;'</span>,indexName:<span class="string">'&#123;&#123; theme.algolia.indexName &#125;&#125;'</span>,hits:&#123;&#123;theme.algolia_search.hits|json_encode&#125;&#125;,labels:&#123;&#123;theme.algolia_search.labels|json_encode&#125;&#125;&#125;&#125;;</span><br></pre></td></tr></table></figure></p><h5 id="修改模板"><a href="#修改模板" class="headerlink" title="修改模板"></a>修改模板</h5><p>　　<br>　　再次打开模板文件。<br><figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> id=<span class="string">"hexo.configurations"</span>&gt;</span><br><span class="line">  var NexT = <span class="keyword">window</span>.NexT || &#123;&#125;;</span><br><span class="line">  var CONFIG = &#123;</span><br><span class="line">    root: <span class="string">'&#123;&#123; theme.root &#125;&#125;'</span>,</span><br><span class="line">    scheme: <span class="string">'&#123;&#123; theme.scheme &#125;&#125;'</span>,</span><br><span class="line">    sidebar: &#123;&#123; theme.sidebar | json_encode &#125;&#125;,</span><br><span class="line">    fancybox: &#123;&#123; theme.fancybox &#125;&#125;,</span><br><span class="line">    motion: &#123;&#123; theme.use_motion &#125;&#125;,</span><br><span class="line">    duoshuo: &#123;</span><br><span class="line">      userId: <span class="string">'&#123;&#123; theme.duoshuo_info.user_id | default() &#125;&#125;'</span>,</span><br><span class="line">      author: <span class="string">'&#123;&#123; theme.duoshuo_info.admin_nickname | default(__('</span>author<span class="string">'))&#125;&#125;'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    algolia: &#123;</span><br><span class="line">      applicationID: <span class="string">'&#123;&#123; theme.algolia.applicationID &#125;&#125;'</span>,</span><br><span class="line">      apiKey: <span class="string">'&#123;&#123; theme.algolia.apiKey &#125;&#125;'</span>,</span><br><span class="line">      indexName: <span class="string">'&#123;&#123; theme.algolia.indexName &#125;&#125;'</span>,</span><br><span class="line">      hits: &#123;&#123; theme.algolia_search.hits | json_encode &#125;&#125;,</span><br><span class="line">      labels: &#123;&#123; theme.algolia_search.labels | json_encode &#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>　　替换为<br><figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="xml">　　<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">id</span>=<span class="string">"hexo.configurations"</span>&gt;</span><span class="javascript"><span class="keyword">var</span> NexT=<span class="built_in">window</span>.NexT||&#123;&#125;;<span class="keyword">var</span> CONFIG=&#123;<span class="attr">root</span>:<span class="string">'</span></span></span><span class="template-variable">&#123;&#123; theme.root &#125;&#125;</span><span class="xml"><span class="actionscript"><span class="string">',scheme:'</span></span></span><span class="template-variable">&#123;&#123; theme.scheme &#125;&#125;</span><span class="xml"><span class="undefined">',sidebar:</span></span><span class="template-variable">&#123;&#123;theme.sidebar|<span class="keyword">json_encode</span>&#125;&#125;</span><span class="xml"><span class="undefined">,fancybox:</span></span><span class="template-variable">&#123;&#123;theme.fancybox&#125;&#125;</span><span class="xml"><span class="undefined">,motion:</span></span><span class="template-variable">&#123;&#123;theme.use_motion&#125;&#125;</span><span class="xml"><span class="undefined">,duoshuo:&#123;userId:'</span></span><span class="template-variable">&#123;&#123; theme.duoshuo_info.user_id | default() &#125;&#125;</span><span class="xml"><span class="actionscript"><span class="string">',author:'</span></span></span><span class="template-variable">&#123;&#123; theme.duoshuo_info.admin_nickname | default(__('author'))&#125;&#125;</span><span class="xml"><span class="actionscript"><span class="string">'&#125;,algolia:&#123;applicationID:'</span></span></span><span class="template-variable">&#123;&#123; theme.algolia.applicationID &#125;&#125;</span><span class="xml"><span class="actionscript"><span class="string">',apiKey:'</span></span></span><span class="template-variable">&#123;&#123; theme.algolia.apiKey &#125;&#125;</span><span class="xml"><span class="actionscript"><span class="string">',indexName:'</span></span></span><span class="template-variable">&#123;&#123; theme.algolia.indexName &#125;&#125;</span><span class="xml"><span class="undefined">',hits:</span></span><span class="template-variable">&#123;&#123;theme.algolia_search.hits|<span class="keyword">json_encode</span>&#125;&#125;</span><span class="xml"><span class="undefined">,labels:</span></span><span class="template-variable">&#123;&#123;theme.algolia_search.labels|<span class="keyword">json_encode</span>&#125;&#125;</span><span class="xml"><span class="undefined">&#125;&#125;;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>　　</p><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><p>　　JavaScript的压缩原理就是将多行代码转成一行代码，代码换行的地方记得要用“<code>；</code>”隔开，<strong>不然浏览器解析的时候会报错。</strong><br>　　<br>　　<strong>这里只介绍一段JavaScript的优化，其余的地方类似。</strong></p><h4 id="添加音乐"><a href="#添加音乐" class="headerlink" title="添加音乐"></a>添加音乐</h4><p>　　音乐采用的是<code>hexo-tag-aplayer</code>插件。声明歌单的时候我们会使用如下数据字符串。<br><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">　　&#123;% aplayerlist %&#125;&#123;<span class="string">"narrow"</span>: false,<span class="string">"autoplay"</span>: true,<span class="string">"showlrc"</span>: <span class="number">3</span>,<span class="string">"mode"</span>: <span class="string">"random"</span>,<span class="string">"music"</span>: [&#123;<span class="string">"title"</span>: <span class="string">"平凡之路"</span>,<span class="string">"author"</span>: <span class="string">"朴树"</span>,<span class="string">"url"</span>: <span class="string">"http://xxx.com/%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF.mp3"</span>,<span class="string">"pic"</span>: <span class="string">"https://xxx.com/1.jpg"</span>,<span class="string">"lrc"</span>: <span class="string">"http://og9ocpmwk.bkt.clouddn.com/%E5%B9%B3%E5%87%A1%E4%B9%8B%E8%B7%AF.txt"</span>&#125;,&#123;<span class="string">"title"</span>: <span class="string">"野子"</span>,<span class="string">"author"</span>: <span class="string">"苏运莹"</span>,<span class="string">"url"</span>: <span class="string">"http://xxx.com/01%20%E9%87%8E%E5%AD%90.m4a"</span>,<span class="string">"pic"</span>: <span class="string">"http://xxxx.com/%E9%87%8E%E5%AD%90.jpg"</span>,<span class="string">"lrc"</span>:<span class="string">"https://xxx.com/%E9%87%8E%E5%AD%90.txt"</span>&#125;]&#125;&#123;% endaplayerlist %&#125;</span><br></pre></td></tr></table></figure></p><p>　　其中url表示音乐的地址（mp3,mp4）,lrc表示歌词文件的地址，pic表示歌曲的封面图片。</p><h5 id="音乐的下载"><a href="#音乐的下载" class="headerlink" title="音乐的下载"></a>音乐的下载</h5><p>　　可以下载“网易云音乐”客户端，选择喜欢的音乐，点击下载。比较简单。</p><h5 id="歌词的下载"><a href="#歌词的下载" class="headerlink" title="歌词的下载"></a>歌词的下载</h5><p>　　<a href="http://www.lrcgc.com/lyric-11423-253098.html" target="_blank" rel="noopener">歌词下载网站</a><br>　　<br>　　通过网易云音乐下载会自动下载歌词，不过会保存在<code>%USERPROFILE%\AppData\Local\Netease\CloudMusic\webdata\lyric</code>路径下。<br>　　<br>　　反键编辑找到自已喜欢歌曲的歌词，如<code>成都-赵雷</code>：<br><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">　　&#123;"sgc":false,"sfy":false,"qfy":false,"lrc":&#123;"version":4,"lyric":"[<span class="string">00:00.00</span>] 作曲 : 赵雷\n[<span class="string">00:01.00</span>] 作词 : 赵雷\n[<span class="string">00:16.75</span>]让我掉下眼泪的 不止昨夜的酒\n[<span class="string">00:25.91</span>]让我依依不舍的 不止你的温柔\n[<span class="string">00:33.91</span>]余路还要走多久 你攥着我的手\n[<span class="string">00:41.70</span>]让我感到为难的 是挣扎的自由\n[<span class="string">00:52.10</span>]分别总是在九月 回忆是思念的愁\n[<span class="string">00:59.63</span>]深秋嫩绿的垂柳 亲吻着我额头\n[<span class="string">01:07.53</span>]在那座阴雨的小城里 我从未忘记你\n[<span class="string">01:15.41</span>]成都 带不走的 只有你\n[<span class="string">01:23.69</span>]和我在成都的街头走一走\n[<span class="string">01:31.08</span>]直到所有的灯都熄灭了也不停留\n[<span class="string">01:39.69</span>]你会挽着我的衣袖 我会把手揣进裤兜\n[<span class="string">01:47.08</span>]走到玉林路的尽头 坐在(走过)小酒馆的门口\n[<span class="string">02:30.37</span>]分别总是在九月 回忆是思念的愁\n[<span class="string">02:38.10</span>]深秋嫩绿的垂柳 亲吻着我额头\n[<span class="string">02:46.13</span>]在那座阴雨的小城里 我从未忘记你\n[<span class="string">02:54.02</span>]成都 带不走的 只有你\n[<span class="string">03:02.34</span>]和我在成都的街头走一走\n[<span class="string">03:10.41</span>]直到所有的灯都熄灭了也不停留\n[<span class="string">03:18.34</span>]你会挽着我的衣袖 我会把手揣进裤兜\n[<span class="string">03:25.51</span>]走到玉林路的尽头 坐在(走过)小酒馆的门口\n[<span class="string">04:35.96</span>][<span class="symbol">03:35.40</span>]和我在成都的街头走一走\n[<span class="string">04:42.76</span>][<span class="symbol">03:45.39</span>]直到所有的灯都熄灭了也不停留\n[03:53.62]和我在成都的街头走一走\n[04:01.35]直到所有的灯都熄灭了也不停留\n[04:08.95]你会挽着我的衣袖 我会把手揣进裤兜\n[04:17.27]走到玉林路的尽头 坐在(走过)小酒馆的门口\n"&#125;,"klyric":&#123;"version":0&#125;,"tlyric":&#123;"version":0,"lyric":null&#125;,"code":200&#125;</span><br></pre></td></tr></table></figure></p><p>　　格式排版存在问题，需要优化成如下方式：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[ti:成都]</span></span><br><span class="line"><span class="selector-attr">[ar:赵雷]</span></span><br><span class="line"><span class="selector-attr">[al:成都]</span></span><br><span class="line"><span class="selector-attr">[by:赵雷]</span></span><br><span class="line"><span class="selector-attr">[00:00.00]</span> 作曲 : 赵雷</span><br><span class="line"><span class="selector-attr">[00:01.00]</span> 作词 : 赵雷</span><br><span class="line"><span class="selector-attr">[00:16.75]</span>让我掉下眼泪的 不止昨夜的酒</span><br><span class="line"><span class="selector-attr">[00:25.91]</span>让我依依不舍的 不止你的温柔</span><br><span class="line"><span class="selector-attr">[00:33.91]</span>余路还要走多久 你攥着我的手</span><br><span class="line"><span class="selector-attr">[00:41.70]</span>让我感到为难的 是挣扎的自由</span><br><span class="line"><span class="selector-attr">[00:52.10]</span>分别总是在九月 回忆是思念的愁</span><br><span class="line"><span class="selector-attr">[00:59.63]</span>深秋嫩绿的垂柳 亲吻着我额头</span><br><span class="line"><span class="selector-attr">[01:07.53]</span>在那座阴雨的小城里 我从未忘记你</span><br><span class="line"><span class="selector-attr">[01:15.41]</span>成都 带不走的 只有你</span><br><span class="line"><span class="selector-attr">[01:23.69]</span>和我在成都的街头走一走</span><br><span class="line"><span class="selector-attr">[01:31.08]</span>直到所有的灯都熄灭了也不停留</span><br><span class="line"><span class="selector-attr">[01:39.69]</span>你会挽着我的衣袖 我会把手揣进裤兜</span><br><span class="line"><span class="selector-attr">[01:47.08]</span>走到玉林路的尽头 坐在(走过)小酒馆的门口</span><br><span class="line"><span class="selector-attr">[02:30.37]</span>分别总是在九月 回忆是思念的愁</span><br><span class="line"><span class="selector-attr">[02:38.10]</span>深秋嫩绿的垂柳 亲吻着我额头</span><br><span class="line"><span class="selector-attr">[02:46.13]</span>在那座阴雨的小城里 我从未忘记你</span><br><span class="line"><span class="selector-attr">[02:54.02]</span>成都 带不走的 只有你</span><br><span class="line"><span class="selector-attr">[03:02.34]</span>和我在成都的街头走一走</span><br><span class="line"><span class="selector-attr">[03:10.41]</span>直到所有的灯都熄灭了也不停留</span><br><span class="line"><span class="selector-attr">[03:18.34]</span>你会挽着我的衣袖 我会把手揣进裤兜</span><br><span class="line"><span class="selector-attr">[03:25.51]</span>走到玉林路的尽头 坐在(走过)小酒馆的门口</span><br><span class="line"><span class="selector-attr">[04:35.96]</span><span class="selector-attr">[03:35.40]</span>和我在成都的街头走一走</span><br><span class="line"><span class="selector-attr">[04:42.76]</span><span class="selector-attr">[03:45.39]</span>直到所有的灯都熄灭了也不停留</span><br><span class="line"><span class="selector-attr">[03:53.62]</span>和我在成都的街头走一走</span><br><span class="line"><span class="selector-attr">[04:01.35]</span>直到所有的灯都熄灭了也不停留</span><br><span class="line"><span class="selector-attr">[04:08.95]</span>你会挽着我的衣袖 我会把手揣进裤兜</span><br><span class="line"><span class="selector-attr">[04:17.27]</span>走到玉林路的尽头 坐在(走过)小酒馆的门口<span class="selector-tag">aba</span></span><br></pre></td></tr></table></figure><p>　　<strong>保存为txt文本，保存编码格式一定要是UNIX / UTF-8w/o BOM的方式，而且命名最好不是中文。</strong></p><h5 id="封面图片下载"><a href="#封面图片下载" class="headerlink" title="封面图片下载"></a>封面图片下载</h5><p>　　<br>　　打开网页版的<a href="http://music.163.com/#/user/home?id=262759259" target="_blank" rel="noopener">网易云音乐</a>，搜索“成都-赵雷”，回车。打开控制台，下载歌词封面图片。<br>　　<br>　　<img src="https://infos.rtime.xin/wangyi_xiazai.png" alt="网易云下载封面图片"></p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 相册实践</title>
      <link href="/2017/06/18/Hexo%20%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/"/>
      <url>/2017/06/18/Hexo%20%E7%9B%B8%E5%86%8C%E5%8A%9F%E8%83%BD/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h4><p>　　想给自已的<code>blog</code>添加一个相册功能、给生活中的点点滴滴留影记录。搜寻网络上给Next主题添加相册功能的基本上没有，只能重头到尾开始一点点的实践。<br>　　<br>　　大致的想法：<br>　　　　1. 相册展示类似于<code>归档</code>一样，按时间戳来分类<br>　　　　2.每一个时间节点都是一个小相册，展示的时候上面是相册的标题，下面是几张经典图片的缩略图<br>　　　　3.点击标题，进行相册的详细页面，可以看到更多关于这个小相册的图片<br>　　　　4.相册展示的特效类似于<a href="http://lawlite.me/photos/" target="_blank" rel="noopener">Lawlite</a>　　　　</p><h4 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h4><h5 id="插件开发实践"><a href="#插件开发实践" class="headerlink" title="插件开发实践"></a>插件开发实践</h5><p>　　<br>　　由于Hexo基于NodeJS开发的，通过插件的方式集成一些第三方的功能。比如归档是 通过<a href="https://github.com/hexojs/hexo-generator-archive" target="_blank" rel="noopener">hexo-generator-archive</a>实现的，标签页是通过<a href="https://github.com/hexojs/hexo-generator-tag" target="_blank" rel="noopener">hexo-generator-tag</a>实现的。更多Hexo插件请看<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">Hexo Plugins</a>.这里就不过多讨论。<br>　　<br>　　本次实践修改的插件有：<br>　　　　1.<a href="https://github.com/hexojs/hexo-generator-archive" target="_blank" rel="noopener">hexo-generator-archive</a><br>　　　　2.<a href="https://github.com/hexojs/hexo-generator-index" target="_blank" rel="noopener">hexo-generator-index</a><br>　　　　2.<a href="https://github.com/hexojs/hexo-generator-category" target="_blank" rel="noopener">hexo-generator-category</a><br>　　　　4.hexo-generator-photo[自已新增的]</p><p>　　每一个小相册都是一个MD文件,每次首页和归档生成的时候都会把相册加载进去。我想让相册和博客进行区别，所以在MD文件的开头会声明一个属性<code>isPhoto</code>,<code>true表示相册、false表示普通博客文章</code>。<br>　　<code>hexo-generator-archive</code>和<code>hexo-generator-index</code>中去除相册的展示。<br>　　修改插件的<code>\lib\generator.js</code>文件，在<code>exports</code>函数，变量声明完加上如下一段代码。<br><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//过滤所有的文章</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">filterPhoto</span><span class="params">(posts)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = [];</span><br><span class="line">    posts.<span class="keyword">forEach</span>(<span class="function"><span class="keyword">function</span><span class="params">(post)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> isPhoto = post.isPhoto; <span class="comment">//相册</span></span><br><span class="line">      <span class="keyword">if</span>(!isPhoto)&#123;</span><br><span class="line">        tmp.push(post);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    posts.data = tmp;</span><br><span class="line">    posts.length = tmp.length;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//hexo-generator-index中调用</span></span><br><span class="line">  filterPhoto(posts);</span><br><span class="line">  <span class="comment">//hexo-generator-archive中调用</span></span><br><span class="line">  filterPhoto(allPosts);</span><br></pre></td></tr></table></figure></p><p>　　归档的时候会显示所有文章的总数（包含相册）,通过下列方式去除掉。<br>　　在<code>hexo-generator-archive</code>插件的<code>\lib\generator.js</code>文件添加如下注释的代码：<br><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">function generate(path, posts, <span class="keyword">options</span>) &#123;</span><br><span class="line">   <span class="keyword">options</span> = <span class="keyword">options</span> || &#123;&#125;;</span><br><span class="line">   <span class="keyword">options</span>.archive = <span class="keyword">true</span>;</span><br><span class="line">   <span class="keyword">options</span>.postLength = allPosts.length; <span class="comment">//新增的</span></span><br></pre></td></tr></table></figure></p><p>　　修改归档的展示页面代码（<code>themes\next\layout\archive.swig</code>）：<br>　　将<code>site.posts.length</code>改为<code>page.postLength</code>即可。</p><p>　　新增<code>hexo-generator-photo</code>插件，自动生成相册时间戳界面,参考<code>hexo-generator-archive</code>插件。<br>　　<br>　　拷贝<code>hexo-generator-archive</code>的源码，主要修改以下几个文件：<br>　　<br>　　1.<code>index.js</code>：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* global hexo */</span></span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> assign = <span class="built_in">require</span>(<span class="string">'object-assign'</span>);</span><br><span class="line"><span class="comment">// when archive disabled pagination, per_page should be 0.</span></span><br><span class="line"><span class="keyword">var</span> per_page;</span><br><span class="line"><span class="keyword">if</span> (hexo.config.photo === <span class="number">1</span>) &#123;</span><br><span class="line">  per_page = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> hexo.config.per_page === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  per_page = <span class="number">10</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  per_page = hexo.config.per_page;</span><br><span class="line">&#125;</span><br><span class="line">hexo.config.photo_generator = assign(&#123;</span><br><span class="line">  per_page: per_page,</span><br><span class="line">  yearly: <span class="literal">true</span>,</span><br><span class="line">  monthly: <span class="literal">true</span>,</span><br><span class="line">  daily: <span class="literal">false</span></span><br><span class="line">&#125;, hexo.config.photo_generator);</span><br><span class="line">hexo.extend.generator.register(<span class="string">'photo'</span>, <span class="built_in">require</span>(<span class="string">'./lib/generator'</span>));</span><br></pre></td></tr></table></figure></p><p>　　2.<code>package.json</code>：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"hexo-generator-photo"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"photo generator for Hexo."</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"eslint"</span>: <span class="string">"eslint ."</span>,</span><br><span class="line">    <span class="attr">"jscs"</span>: <span class="string">"jscs ."</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"mocha test/index.js"</span>,</span><br><span class="line">    <span class="attr">"test-cov"</span>: <span class="string">"istanbul cover --print both _mocha -- test/index.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"directories"</span>: &#123;</span><br><span class="line">    <span class="attr">"lib"</span>: <span class="string">"./lib"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"repository"</span>: <span class="string">"hexojs/hexo-generator-photo"</span>,</span><br><span class="line">  <span class="attr">"homepage"</span>: <span class="string">"http://hexo.io/"</span>,</span><br><span class="line">  <span class="attr">"keywords"</span>: [</span><br><span class="line">    <span class="string">"hexo"</span>,</span><br><span class="line">    <span class="string">"generator"</span>,</span><br><span class="line">    <span class="string">"photo"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"chai"</span>: <span class="string">"^1.9.1"</span>,</span><br><span class="line">    <span class="attr">"eslint"</span>: <span class="string">"^1.10.3"</span>,</span><br><span class="line">    <span class="attr">"eslint-config-hexo"</span>: <span class="string">"^1.0.2"</span>,</span><br><span class="line">    <span class="attr">"hexo"</span>: <span class="string">"^3.1.1"</span>,</span><br><span class="line">    <span class="attr">"istanbul"</span>: <span class="string">"^0.4.1"</span>,</span><br><span class="line">    <span class="attr">"jscs"</span>: <span class="string">"^2.7.0"</span>,</span><br><span class="line">    <span class="attr">"jscs-preset-hexo"</span>: <span class="string">"^1.0.1"</span>,</span><br><span class="line">    <span class="attr">"mocha"</span>: <span class="string">"^2.0.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"hexo-pagination"</span>: <span class="string">"0.0.2"</span>,</span><br><span class="line">    <span class="attr">"object-assign"</span>: <span class="string">"^2.0.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　3.<code>generator.js</code>：<br><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="string">'use strict'</span>;</span><br><span class="line"></span><br><span class="line">var pagination = require(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"></span><br><span class="line">var fmtNum = function(num) &#123;</span><br><span class="line">  <span class="keyword">return</span> num &lt; <span class="number">10</span> ? <span class="string">'0'</span> + num : num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">module.exports = function(locals) &#123;</span><br><span class="line">  var config = <span class="keyword">this</span>.config;</span><br><span class="line">  var photoDir = config.photo_dir;</span><br><span class="line">  var paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  var allPosts = locals.posts.<span class="built_in">sort</span>(<span class="string">'-date'</span>);</span><br><span class="line">  var perPage = config.photo_generator.per_page;</span><br><span class="line">  var result = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!allPosts.length) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  function screenPhoto(posts)&#123;</span><br><span class="line"></span><br><span class="line">    var tmp = [];</span><br><span class="line">    posts.forEach(function(post) &#123;</span><br><span class="line">      var isPhoto = post.isPhoto; <span class="comment">//相册</span></span><br><span class="line">      <span class="keyword">if</span>(isPhoto)&#123;</span><br><span class="line">        tmp.push(post);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    posts.data = tmp;</span><br><span class="line">    posts.length = tmp.length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  screenPhoto(allPosts);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (photoDir[photoDir.length - <span class="number">1</span>] !== <span class="string">'/'</span>) photoDir += <span class="string">'/'</span>;</span><br><span class="line"></span><br><span class="line">  function generate(path, posts, options) &#123;</span><br><span class="line">    options = options || &#123;&#125;;</span><br><span class="line">    options.photo = <span class="keyword">true</span>;</span><br><span class="line">    options.postLength = allPosts.length;</span><br><span class="line"></span><br><span class="line">    result = result.<span class="built_in">concat</span>(pagination(path, posts, &#123;</span><br><span class="line">      perPage: perPage,</span><br><span class="line">      layout: [<span class="string">'photo'</span>, <span class="string">'index'</span>],</span><br><span class="line">      format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">      data: options</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  generate(photoDir, allPosts);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!config.photo_generator.yearly) <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">  var posts = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Organize posts by date</span></span><br><span class="line">  allPosts.forEach(function(post) &#123;</span><br><span class="line">      var date = post.date;</span><br><span class="line">      var <span class="built_in">year</span> = date.<span class="built_in">year</span>();</span><br><span class="line">      var <span class="built_in">month</span> = date.<span class="built_in">month</span>() + <span class="number">1</span>; <span class="comment">// month is started from 0</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (!posts.hasOwnProperty(<span class="built_in">year</span>)) &#123;</span><br><span class="line">      <span class="comment">// 13 arrays. The first array is for posts in this year</span></span><br><span class="line">      <span class="comment">// and the other arrays is for posts in this month</span></span><br><span class="line">      posts[<span class="built_in">year</span>] = [</span><br><span class="line">        [],</span><br><span class="line">        [],</span><br><span class="line">        [],</span><br><span class="line">        [],</span><br><span class="line">        [],</span><br><span class="line">        [],</span><br><span class="line">        [],</span><br><span class="line">        [],</span><br><span class="line">        [],</span><br><span class="line">        [],</span><br><span class="line">        [],</span><br><span class="line">        [],</span><br><span class="line">        []</span><br><span class="line">      ];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    posts[<span class="built_in">year</span>][<span class="number">0</span>].push(post);</span><br><span class="line">    posts[<span class="built_in">year</span>][<span class="built_in">month</span>].push(post);</span><br><span class="line">    <span class="comment">// Daily</span></span><br><span class="line">    <span class="keyword">if</span> (config.photo_generator.daily) &#123;</span><br><span class="line">      var <span class="built_in">day</span> = date.date();</span><br><span class="line">      <span class="keyword">if</span> (!posts[<span class="built_in">year</span>][<span class="built_in">month</span>].hasOwnProperty(<span class="built_in">day</span>)) &#123;</span><br><span class="line">        posts[<span class="built_in">year</span>][<span class="built_in">month</span>].<span class="built_in">day</span> = &#123;&#125;;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      (posts[<span class="built_in">year</span>][<span class="built_in">month</span>].<span class="built_in">day</span>[<span class="built_in">day</span>] || (posts[<span class="built_in">year</span>][<span class="built_in">month</span>].<span class="built_in">day</span>[<span class="built_in">day</span>] = [])).push(post);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  var Query = <span class="keyword">this</span>.model(<span class="string">'Post'</span>).Query;</span><br><span class="line">  var years = <span class="keyword">Object</span>.keys(posts);</span><br><span class="line">  var <span class="built_in">year</span>, data, <span class="built_in">month</span>, monthData, url;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Yearly</span></span><br><span class="line">  <span class="keyword">for</span> (var i = <span class="number">0</span>, len = years.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="built_in">year</span> = +years[i];</span><br><span class="line">    data = posts[<span class="built_in">year</span>];</span><br><span class="line">    url = photoDir + <span class="built_in">year</span> + <span class="string">'/'</span>;</span><br><span class="line">    <span class="keyword">if</span> (!data[<span class="number">0</span>].length) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    generate(url, <span class="keyword">new</span> Query(data[<span class="number">0</span>]), &#123;<span class="built_in">year</span>: <span class="built_in">year</span>&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!config.photo_generator.monthly &amp;&amp; !config.photo_generator.daily) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Monthly</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">month</span> = <span class="number">1</span>; <span class="built_in">month</span> &lt;= <span class="number">12</span>; <span class="built_in">month</span>++) &#123;</span><br><span class="line">      monthData = data[<span class="built_in">month</span>];</span><br><span class="line">      <span class="keyword">if</span> (!monthData.length) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">if</span> (config.photo_generator.monthly) &#123;</span><br><span class="line">        generate(url + fmtNum(<span class="built_in">month</span>) + <span class="string">'/'</span>, <span class="keyword">new</span> Query(monthData), &#123;</span><br><span class="line">          <span class="built_in">year</span>: <span class="built_in">year</span>,</span><br><span class="line">          <span class="built_in">month</span>: <span class="built_in">month</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!config.photo_generator.daily) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Daily</span></span><br><span class="line">      <span class="keyword">for</span> (var <span class="built_in">day</span> = <span class="number">1</span>; <span class="built_in">day</span> &lt;= <span class="number">31</span>; <span class="built_in">day</span>++) &#123;</span><br><span class="line">        var dayData = monthData.<span class="built_in">day</span>[<span class="built_in">day</span>];</span><br><span class="line">        <span class="keyword">if</span> (!dayData || !dayData.length) <span class="keyword">continue</span>;</span><br><span class="line">        generate(url + fmtNum(<span class="built_in">month</span>) + <span class="string">'/'</span> + fmtNum(<span class="built_in">day</span>) + <span class="string">'/'</span>, <span class="keyword">new</span> Query(dayData), &#123;</span><br><span class="line">          <span class="built_in">year</span>: <span class="built_in">year</span>,</span><br><span class="line">          <span class="built_in">month</span>: <span class="built_in">month</span>,</span><br><span class="line">          <span class="built_in">day</span>: <span class="built_in">day</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>　　<code>hexo</code>执行调用<code>Hexo-generator-photo</code>插件：<br>　　网站根目录的<code>package.json</code>文件中天价如下一行：<br><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="string">"hexo-server"</span>: <span class="string">"^0.2.0"</span>,  <span class="regexp">//</span>下面添加,不要遗漏<span class="string">","</span></span><br><span class="line"><span class="string">"hexo-generator-photo"</span>:<span class="string">"^0.0.1"</span></span><br></pre></td></tr></table></figure></p><h5 id="相册样式调整"><a href="#相册样式调整" class="headerlink" title="相册样式调整"></a>相册样式调整</h5><p>　　新增相册的swig文件（<code>themes\next\layout\photo.swig</code>）：<br><figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">extends</span></span> '_layout.swig' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">import</span></span> '_macro/post-collapse-photo.swig' as post_template %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">import</span></span> '_macro/sidebar.swig' as sidebar_template %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> title %&#125;</span><span class="xml"></span><span class="template-variable">&#123;&#123; __('title.photo') &#125;&#125;</span><span class="xml"> | </span><span class="template-variable">&#123;&#123; config.title &#125;&#125;</span><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> page_class %&#125;</span><span class="xml"> page-archive </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> content %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"posts"</span> <span class="attr">class</span>=<span class="string">"posts-collapse"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> post in page.posts %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="comment">&#123;# Show year #&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> year %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> post.year = <span class="name">date</span><span class="params">(post.date, 'YYYY')</span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> post.year !== year %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> year = post.year %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collection-title"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"archive-year motion-element"</span> <span class="attr">id</span>=<span class="string">"archive-year-</span></span></span><span class="template-variable">&#123;&#123; year &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123; year &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="comment">&#123;# endshow #&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      </span><span class="template-variable">&#123;&#123; post_template.render(post) &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">include</span></span> '_partials/pagination.swig' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> sidebar %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  </span><span class="template-variable">&#123;&#123; sidebar_template.render(false) &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> script_extra %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> theme.use_motion %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">id</span>=<span class="string">"motion.page.archive"</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">      $('.archive-year').velocity('transition.slideLeftIn');</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p><p>　　添加相册子标题模板（<code>themes\next\layout\_macro\post-collapse-photo.swig</code>）：<br><figure class="highlight twig"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">macro</span></span> render(post) %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"post post-type-</span></span></span><span class="template-variable">&#123;&#123; post.type | default('normal') &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/Article"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"post-header2"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> theme.seo %&#125;</span><span class="xml"><span class="tag"><span class="attr">h3</span></span></span><span class="template-tag">&#123;% <span class="name">else</span> %&#125;</span><span class="xml"><span class="tag"><span class="attr">h2</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="xml"><span class="tag"> <span class="attr">class</span>=<span class="string">"post-title"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> post.link %&#125;</span><span class="xml"></span><span class="comment">&#123;# Link posts #&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"post-title-link post-title-link-external"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(post.link) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">itemprop</span>=<span class="string">"url"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="template-variable">&#123;&#123; post.title or post.link &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-external-link"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name">else</span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"post-title-link"</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; url_for(post.path) &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">itemprop</span>=<span class="string">"url"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> post.type === 'picture' %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">                </span><span class="template-variable">&#123;&#123; post.content &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">              </span><span class="template-tag">&#123;% <span class="name">else</span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"name"</span>&gt;</span></span><span class="template-variable">&#123;&#123; post.title | default(__('post.untitled')) &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">              </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/</span></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> theme.seo %&#125;</span><span class="xml"><span class="tag"><span class="attr">h3</span></span></span><span class="template-tag">&#123;% <span class="name">else</span> %&#125;</span><span class="xml"><span class="tag"><span class="attr">h2</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="xml"><span class="tag">&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">for</span></span> photo in post.photos %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">figure</span> <span class="attr">class</span>=<span class="string">"thumb"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123;photo&#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endfor</span></span> %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"post-meta"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">time</span> <span class="attr">class</span>=<span class="string">"post-time"</span> <span class="attr">itemprop</span>=<span class="string">"dateCreated"</span></span></span></span><br><span class="line"><span class="xml">              datetime="</span><span class="template-variable">&#123;&#123; moment(post.date).format() &#125;&#125;</span><span class="xml">"</span></span><br><span class="line"><span class="xml">              content="</span><span class="template-variable">&#123;&#123; <span class="name">date</span><span class="params">(post.date, config.date_format)</span> &#125;&#125;</span><span class="xml">" &gt;</span></span><br><span class="line"><span class="xml">          </span><span class="template-variable">&#123;&#123; <span class="name">date</span><span class="params">(post.date, 'MM-DD')</span> &#125;&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">time</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">endmacro</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p><p>　　新增样式（<code>themes\next\source\css\_custom\custom.styl</code>）：<br><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">box</span>&#123; <span class="attribute">width</span>:<span class="number">100%</span>;&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">li</span>&#123; <span class="attribute">float</span>:left; <span class="attribute">width</span>:<span class="number">100px</span>; <span class="attribute">height</span>:<span class="number">80px</span>; <span class="attribute">margin-right</span>:<span class="number">10px</span>; <span class="attribute">padding</span>:<span class="number">0</span>; <span class="attribute">margin</span>:<span class="number">5px</span>; <span class="attribute">overflow</span>:hidden;<span class="attribute">list-style</span>:none;&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.posts-collapse</span> <span class="selector-class">.post-header2</span> &#123;</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">transition-duration</span>: <span class="number">0.2s</span>;</span><br><span class="line">    <span class="attribute">transition-timing-function</span>: ease-in-out;</span><br><span class="line">    <span class="attribute">transition-delay</span>: <span class="number">0s</span>;</span><br><span class="line">    <span class="attribute">transition-property</span>: border;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.thumb</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">25%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">25%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.thumb</span> <span class="selector-tag">img</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>#####相册配置#####<br>　　<br>　　站点文件配置（_config.yml）新增如下配置：<br><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Directory节点添加如下配置</span></span><br><span class="line"><span class="symbol">photo_dir:</span> photos <span class="comment">//添加Photo生成目录</span></span><br></pre></td></tr></table></figure></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">//Photo生成配置</span></span><br><span class="line"><span class="attr">photo_generator:</span></span><br><span class="line"><span class="attr">  per_page:</span> <span class="number">3</span>   <span class="string">//默认展示的条数</span></span><br><span class="line"><span class="attr">  yearly:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  monthly:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>　　主题文件配置（_config.yml）新增如下配置<br><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span>  <span class="comment">//menu节点添加如下一行</span></span><br><span class="line"><span class="symbol">  photos:</span> <span class="meta-keyword">/photos/</span></span><br><span class="line"></span><br><span class="line"><span class="symbol">menu_icons:</span> <span class="comment">//menu节点下添加如下一行</span></span><br><span class="line"><span class="symbol">  photos:</span> book</span><br></pre></td></tr></table></figure></p><p>　　中文显示（themes\next\languages\zh-Hans.yml）：<br><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">title:</span>  <span class="comment">//节点下添加如下一行</span></span><br><span class="line"><span class="symbol">  photo:</span> 相册</span><br><span class="line">menu： <span class="comment">//节点下添加如下一行</span></span><br><span class="line"><span class="symbol">  photos:</span> 相册</span><br></pre></td></tr></table></figure></p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>　　<code>source\_posts</code>目录下添加相册的MD文件，内容如下：<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">王二狗是个大帅哥</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017</span><span class="bullet">-06</span><span class="bullet">-17</span> <span class="number">10</span><span class="string">:26:32</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">photos:</span> <span class="string">["http://img5.duitang.com/uploads/item/201508/10/20150810153526_2ifjW.jpeg","http://img5.duitang.com/uploads/item/201508/10/20150810153526_2ifjW.jpeg","http://img5.duitang.com/uploads/item/201508/10/20150810153526_2ifjW.jpeg","http://img5.duitang.com/uploads/item/201508/10/20150810153526_2ifjW.jpeg","http://img5.duitang.com/uploads/item/201508/10/20150810153526_2ifjW.jpeg","http://img5.duitang.com/uploads/item/201508/10/20150810153526_2ifjW.jpeg","http://img5.duitang.com/uploads/item/201508/10/20150810153526_2ifjW.jpeg","http://img5.duitang.com/uploads/item/201508/10/20150810153526_2ifjW.jpeg"]</span></span><br><span class="line"><span class="attr">isPhoto:</span> <span class="literal">true</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">![test](http://tupian.enterdesk.com/2014/mxy/06/09/4/4.jpg)</span></span><br><span class="line"><span class="string">![test](http://img5.duitang.com/uploads/item/201508/10/20150810153526_2ifjW.jpeg)</span></span><br></pre></td></tr></table></figure></p><pre><code>通过`Hexo server`启动服务，访问`http://localhost:4000/photos/`即可看到生成的相册界面。</code></pre><p>　　<img src="https://infos.rtime.xin/hexo_photo.png" alt="hexo photo"></p><h4 id="心得-总结"><a href="#心得-总结" class="headerlink" title="心得 总结"></a>心得 总结</h4><p>　　　　<br>　　安装Hexo之后，插件默认存放在<code>blog\node_modules</code>目录下。<br>　　插件开发的核心文件:<code>index.js</code>,<code>package</code>.<code>json,generator.js</code><br>　　关于插件开发的Demo：<a href="https://hexo.io/docs/plugins.html" target="_blank" rel="noopener">Plugin Demo</a></p><h4 id="后续优化"><a href="#后续优化" class="headerlink" title="后续优化"></a>后续优化</h4><p>　　<br>　　- 首页、标签、文章详情页日志总数减去相册的条数（site.pages.length）<br>　　- 图片展示优化<br>　　- 图片整理（QQ空间链接不行）<br>　　- 视屏的优化<br>　　- 相册页的日志总条数问题</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>吸血鬼数字</title>
      <link href="/2017/06/16/%E5%90%B8%E8%A1%80%E9%AC%BC%E6%95%B0%E5%AD%97/"/>
      <url>/2017/06/16/%E5%90%B8%E8%A1%80%E9%AC%BC%E6%95%B0%E5%AD%97/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>　　最近公司没有什么事情可做，同事顺便再研究数据结构和算法这块的知识。临近下班的时候给我发一道算法题。计算出4位数中所有的吸血鬼数字。题目如下：<br>　　<img src="https://infos.rtime.xin/xixuegui_sf.png" alt="algorithm xixuegui"><br>　　<br>　　分析题目：<br>　　- 位数为偶数，2位<br>　　- 4位数中包含两个2位数的乘数（可以是无序的）<br>　　- 两个0结尾的数字是不允许的<br>　　<br>　　结论：<br>　　　　两个2位数相乘得到一个4位数，并且两个2位数的字符无序组合可以得到这个4位数。以两个0结尾的数是不允许的。　　</p><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>　　<br>　　- 1.四位数的字符拆分、两两组合相乘，得到的乘积等于这个四位数既是吸血鬼数字<br>　　- 2.两个两位数相乘，得到一个四位数。两个两位数的字符串进行相加排序。四位数也进行排序，如果排序后的两个字符串相等，既是吸血鬼数字。　　</p><h4 id="两数组合"><a href="#两数组合" class="headerlink" title="两数组合"></a>两数组合</h4><p>　　　大致实现：<br><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">for(<span class="name">int</span> i=1000<span class="comment">;i&lt;=9999;i++)&#123;</span></span><br><span class="line">String count = String.valueOf(<span class="name">i</span>)<span class="comment">;</span></span><br><span class="line">for(<span class="name">int</span> a = <span class="number">0</span><span class="comment">;a&lt;count.length();a++)&#123;</span></span><br><span class="line">for(<span class="name">int</span> b=0<span class="comment">;b&lt;count.length()&amp;&amp;b!=a;b++)&#123;</span></span><br><span class="line"></span><br><span class="line">String num1 = String.format(<span class="string">"%s%s"</span>, count.charAt(<span class="name">a</span>),count.charAt(<span class="name">b</span>)) <span class="comment">;</span></span><br><span class="line">String num2 = count.replaceFirst(<span class="name">String</span>.valueOf(<span class="name">count</span>.charAt(<span class="name">a</span>)), <span class="string">""</span>)</span><br><span class="line">.replaceFirst(<span class="name">String</span>.valueOf(<span class="name">count</span>.charAt(<span class="name">b</span>)), <span class="string">""</span>)<span class="comment">;</span></span><br><span class="line">int intNum1 = Integer.valueOf(<span class="name">num1</span>)<span class="comment">;</span></span><br><span class="line">int intNum2 = Integer.valueOf(<span class="name">num2</span>)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line">if( <span class="name">intNum1</span> &gt; <span class="number">10</span> <span class="symbol">&amp;&amp;</span> intNum2 &gt; <span class="number">10</span>  </span><br><span class="line"><span class="symbol">&amp;&amp;</span> intNum1 * intNum2 == Integer.valueOf(count))&#123;</span><br><span class="line">System.out.println(String.format("%s*%s=%s<span class="string">", num1,num2,count));</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></p><p>　　　结果展示：<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">21</span>*<span class="number">60</span>=<span class="number">1260</span></span><br><span class="line"><span class="number">93</span>*<span class="number">15</span>=<span class="number">1395</span></span><br><span class="line"><span class="number">41</span>*<span class="number">35</span>=<span class="number">1435</span></span><br><span class="line"><span class="number">51</span>*<span class="number">30</span>=<span class="number">1530</span></span><br><span class="line"><span class="number">21</span>*<span class="number">87</span>=<span class="number">1827</span></span><br><span class="line"><span class="number">81</span>*<span class="number">27</span>=<span class="number">2187</span></span><br><span class="line"><span class="number">86</span>*<span class="number">80</span>=<span class="number">6880</span></span><br><span class="line"><span class="number">86</span>*<span class="number">80</span>=<span class="number">6880</span></span><br></pre></td></tr></table></figure></p><h4 id="排序比较"><a href="#排序比较" class="headerlink" title="排序比较"></a>排序比较</h4><p>　　　大致实现：<br><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">10</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">10</span>;j&lt;<span class="number">100</span>;j++)&#123;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">count</span> = i * j;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">count</span> &gt; <span class="number">1000</span> &amp;&amp; <span class="keyword">count</span> &lt; <span class="number">9999</span> )&#123;</span><br><span class="line"><span class="keyword">if</span>(isContainIAndJ(<span class="keyword">count</span>,i,j))&#123;</span><br><span class="line">System.out.<span class="keyword">println</span>(i+<span class="string">"*"</span>+j+<span class="string">"="</span>+<span class="keyword">count</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断count是否包含i,j. </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isContainIAndJ(<span class="keyword">int</span> <span class="keyword">count</span>, <span class="keyword">int</span> i, <span class="keyword">int</span> j) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>[] charArray = toChars(String.valueOf(<span class="keyword">count</span>));</span><br><span class="line"><span class="keyword">char</span>[] charArray2 =toChars(String.format(<span class="string">"%s%s"</span>, i,j));</span><br><span class="line">Arrays.<span class="keyword">sort</span>(charArray);  <span class="comment">//排序</span></span><br><span class="line">Arrays.<span class="keyword">sort</span>(charArray2);  <span class="comment">//排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(String.valueOf(charArray).equals(String.valueOf(charArray2)))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//String转char[]</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span>[] toChars(String valueOf) &#123;</span><br><span class="line"><span class="keyword">char</span>[] chars = <span class="keyword">new</span> <span class="keyword">char</span>[valueOf.length()];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;valueOf.length();i++)&#123;</span><br><span class="line">chars[i] = valueOf.charAt(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> chars;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　　结果展示：<br><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">15</span>*<span class="number">93</span>=<span class="number">1395</span></span><br><span class="line"><span class="number">21</span>*<span class="number">60</span>=<span class="number">1260</span></span><br><span class="line"><span class="number">21</span>*<span class="number">87</span>=<span class="number">1827</span></span><br><span class="line"><span class="number">27</span>*<span class="number">81</span>=<span class="number">2187</span></span><br><span class="line"><span class="number">30</span>*<span class="number">51</span>=<span class="number">1530</span></span><br><span class="line"><span class="number">35</span>*<span class="number">41</span>=<span class="number">1435</span></span><br><span class="line"><span class="number">41</span>*<span class="number">35</span>=<span class="number">1435</span></span><br><span class="line"><span class="number">51</span>*<span class="number">30</span>=<span class="number">1530</span></span><br><span class="line"><span class="number">60</span>*<span class="number">21</span>=<span class="number">1260</span></span><br><span class="line"><span class="number">80</span>*<span class="number">86</span>=<span class="number">6880</span></span><br><span class="line"><span class="number">81</span>*<span class="number">27</span>=<span class="number">2187</span></span><br><span class="line"><span class="number">86</span>*<span class="number">80</span>=<span class="number">6880</span></span><br><span class="line"><span class="number">87</span>*<span class="number">21</span>=<span class="number">1827</span></span><br><span class="line"><span class="number">93</span>*<span class="number">15</span>=<span class="number">1395</span></span><br></pre></td></tr></table></figure></p><h4 id="后续遐想"><a href="#后续遐想" class="headerlink" title="后续遐想"></a>后续遐想</h4><p>　　实现上是按照题目的需求来做的、不够灵活。在某些设计上都写死了，比如位数是4位（1000~9999），判断条件值都写死了。假如题目说求6位数中的吸血鬼数据，代码结构或者条件变量都会做出一定的改造，没有可扩展性。写代码不能为了一时之需，而不考虑后续扩展性，可复用性等。谨记！！！！</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java 编码规范</title>
      <link href="/2017/06/15/Java%20%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
      <url>/2017/06/15/Java%20%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="杜绝使用“-”拼接"><a href="#杜绝使用“-”拼接" class="headerlink" title="杜绝使用“+”拼接"></a>杜绝使用“+”拼接</h4><p>　　一般进行字符串拼接的时候，我们常会用”+”进行追加。这种方式每次都创建多个对象、追加的字符串越多越影响性能，而且写法上给别人感觉你很<code>Low</code>、新手程序猿。大致情况我们可以使用<code>StringBuffer</code>或者<code>StringBuilder</code>两种方式。两者差异请自行查找资料、这里就不过多复述。　　</p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String</span> arg1 = <span class="string">"Hello "</span>;</span><br><span class="line"><span class="keyword">String</span> arg2 = <span class="string">"World"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//“+” 的方式</span></span><br><span class="line">System.out.<span class="built_in">println</span>(arg1+arg2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//日志(Log4j)打印指定对象的属性时，常用这种方式</span></span><br><span class="line">System.out.<span class="built_in">println</span>(<span class="keyword">String</span>.format(<span class="string">"%s%s"</span>, arg1,arg2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// StringBuffer 的方式</span></span><br><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer(arg1);</span><br><span class="line">sb.<span class="built_in">append</span>(arg2);</span><br><span class="line">System.out.<span class="built_in">println</span>(sb.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">// StringBuilder 的方式</span></span><br><span class="line">StringBuilder sb2 = <span class="keyword">new</span> StringBuilder(arg1);</span><br><span class="line">sb2.<span class="built_in">append</span>(arg2);</span><br><span class="line">System.out.<span class="built_in">println</span>(sb2.toString());</span><br></pre></td></tr></table></figure><p>　　</p>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git 问题小结</title>
      <link href="/2017/06/15/Git%20%E9%97%AE%E9%A2%98%E5%B0%8F%E7%BB%93/"/>
      <url>/2017/06/15/Git%20%E9%97%AE%E9%A2%98%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="Git-Status-中文乱码解决"><a href="#Git-Status-中文乱码解决" class="headerlink" title="Git Status 中文乱码解决"></a>Git Status 中文乱码解决</h4><p>　　<strong>现象：</strong>　　<br>   <img src="https://infos.rtime.xin/git_status.png" alt="hexo console"></p><p>　　<strong>解决办法：</strong>打开<code>Git Bash</code>，执行<code>git config --global core.quotepath false</code></p>]]></content>
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>巴菲特谏言</title>
      <link href="/2017/06/15/%E5%B7%B4%E8%8F%B2%E7%89%B9%E8%B0%8F%E8%A8%80/"/>
      <url>/2017/06/15/%E5%B7%B4%E8%8F%B2%E7%89%B9%E8%B0%8F%E8%A8%80/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote class="blockquote-center"><p>　　      风险、是来自于你不知道你在做什么。 </p><p><strong>沃伦·巴菲特 </strong></p></blockquote><p><strong>1、不要等待，先投资自己</strong></p><p>　　你或许听到身边的每个人都在建议你趁早投资自己。这建议听起来不错，但顶多算中肯。你知道这样的投资效果消失得多快吗？快到在你读完那些建议时，它就消失了，什么也没有留下，你也没有任何改变。</p><p>　　自我投资该怎么做？我绝对不是要建议你在21岁前就因为助学贷款而负债累累。在这样一个网络如此发达的时代，你完全可以学习任何你想学习的东西，只要你想学。发掘你的热情所在，通过增加智慧和习得知识投资自己，还有就是永不停止学习。</p><p><strong>2、尽早改掉坏习惯</strong></p><p>　　当下你认为自己应该摆脱哪一种习惯？回想过去，于我而言，就是消费习惯。这种习惯不仅仅是不好，而且很糟糕，甚至是可怕。作为年轻人，我还没挣到钱就开始花钱，花完了再借，然后花得更多，当然这让我尝到了一些苦果。所以尽早改掉你的坏习惯，相信你也不想以hard模式来学习人生必修课吧！</p><p><strong>3、聘请一位导师</strong></p><p>　　找到一个自己崇拜的人挺酷的。许多人都有自己的榜样，这并无什么不妥之处。在你感兴趣的领域找到一个颇有影响力的人，或是找一个可以指导你的人。记住，不要一味从别人那里索取。如果你有幸寻得愿为你倾其所有并一直帮助你的导师，不要忘记回馈，否则你拥有他们的时间不会太长。</p><p><strong>4、明确自己的优势</strong></p><p>　　巴菲特曾说”你不需要成为每个领域的专家，明确自己的局限，充分发挥自己的优势与长处这才是十分重要的。”充分了解自己，明白自己的优势，了解自己的不足，这是你目前需要掌握的最重要事情之一。</p><p><strong>5、做所爱之事</strong></p><p>　　巴菲特还曾说过，”要做自己热爱的工作”。为什么一个亿万富翁也给出这样的建议？是因为他明白，倘若生活在痛苦中，你永远体会不到幸福快乐。</p><p><strong>6、不要为了不必要的事去冒险</strong></p><p>　　在拥有了你所需要的一切后，不要为了短暂的快乐或是一时的愤怒而冒险堵上你的所有。权衡利弊，运用常识，作出判断，这正是现在的年轻人所缺乏的。</p><p><strong>7、不要错失良机</strong></p><p>　　有时好机会降临我们却毫无觉察。有时好机会需要努力工作而我们又对之无视。不要错过任何一个好机会，即使它让你感到不舒服。因为多数情况下，这些机会就是会让你感到不舒服。</p><p><strong>8、珍惜时间</strong></p><p>　　越早意识到时间是你最具价值的资产，你就能越早保护和利用好它。听着，现在你应该尽可能地学习时间管理！一旦你管理好了自己的时间，不，是一旦你掌控好自己的时间，你就会势不可挡。做时间的主人，做好日程安排，保护好时间，以此来实现更大的自我价值。</p><p><strong>9、拒绝信用卡</strong></p><p>　　认真说来，你应该避免使用信用卡。越早上钩，你会发现自己正成为卡奴，为快速增长的债务所累。学会在生活中使用现金支付。如果你没带现金，也不要赊账。尽早学会利用必要的自律性与自控力来管理金钱，你会从中受益。</p><p><strong>10、友好待人，关爱他人</strong></p><p>　　友好待人是现代社会一门消失的艺术。学会关爱他人吧！我们需要一直唯诺认同他人的想法吗？当然不。那这意味我们获允做个口出狂言的混蛋吗？也不是。学着友好待人，趁早学会这点，时时用于日常。</p>]]></content>
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鸡汤 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Next 调优</title>
      <link href="/2017/06/14/Next%20%E8%B0%83%E4%BC%98/"/>
      <url>/2017/06/14/Next%20%E8%B0%83%E4%BC%98/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="Links对齐"><a href="#Links对齐" class="headerlink" title="Links对齐"></a>Links对齐</h4><p>　　编辑<code>themes/next/source/css/_custom</code>下的<code>custom.styl</code>，添加如下代码即可。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.links-of-blogroll-title</span>&#123;</span><br><span class="line">   <span class="attribute">margin-left</span>:<span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.links-of-blogroll-inline</span> <span class="selector-class">.links-of-blogroll-item</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">47%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Code标签"><a href="#Code标签" class="headerlink" title="Code标签"></a>Code标签</h4><p>　　编辑<code>themes/next/source/css/_custom</code>下的<code>custom.styl</code>，添加如下代码即可。</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改文章内code样式</span></span><br><span class="line"><span class="selector-tag">code</span> &#123;<span class="attribute">color</span>:<span class="number">#c7254e</span>;<span class="attribute">background</span>:<span class="number">#f8f3f4</span>;&#125;</span><br></pre></td></tr></table></figure><h4 id="文章版权优化"><a href="#文章版权优化" class="headerlink" title="文章版权优化"></a>文章版权优化</h4><p>　　之前添加文章版权的方式比较<code>Low</code>，手工在每个文章末尾添加一段关于版权的代码，不易维护，并且很容易错误。现在优化的办法是将这段代码移至主题的配置加载文件中。并且设置开关，当<code>hexo generate</code>生成代码的时候自动添加版本代码。<br>　　<br>　　参考：<a href="http://tc9011.com/2017/02/02/hexo%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E5%8F%8A%E4%B8%80%E4%BA%9B%E7%89%B9%E6%95%88/" target="_blank" rel="noopener">hexo文章添加版权声明及一些特效</a><br>　　<br>　　与上述参考不同的是，<code>passage-end-tag.swig</code>文件，内容如下：</p><figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> theme.passage_end_tag.enabled %&#125;</span><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>本文作者： </span><span class="template-variable">&#123;&#123; theme.author &#125;&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">br</span>&gt;</span>本文链接： <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">"versionA"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"external"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>版权声明： 本博客所有文章除特别声明外，均采用 <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://creativecommons.org/licenses/by-nc-sa/3.0/cn/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"external"</span>&gt;</span>CC BY-NC-SA 3.0 CN<span class="tag">&lt;/<span class="name">a</span>&gt;</span> 许可协议。转载请注明出处！   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">  window.onload = function () &#123;</span></span><br><span class="line"><span class="xml">   var locationUrl= decodeURI(window.location.href);</span></span><br><span class="line"><span class="xml">   document.getElementById("versionA").href = locationUrl;</span></span><br><span class="line"><span class="xml">   document.getElementById("versionA").innerHTML = locationUrl;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure><h4 id="静态页面压缩"><a href="#静态页面压缩" class="headerlink" title="静态页面压缩"></a>静态页面压缩</h4><p>　　通过<code>Hexo g</code>自动生成的静态js、css、html是没有经过压缩的,而且存在大量无用的空白。想通过优化的方式，自动将生成的页面进行亚索</p><p>　　参考文章：<br>　　　　<a href="http://www.5941740.cn/2016/02/19/gulp-minify-blog/" target="_blank" rel="noopener">使用gulp精简hexo博客代码</a><br>　　　　<a href="http://www.gulpjs.com.cn/docs/getting-started/" target="_blank" rel="noopener">gulp构建入门</a><br>　　　　<a href="http://blog.csdn.net/baidu_31333625/article/details/61916398" target="_blank" rel="noopener">gulp-load-plugins－模块化管理插件</a></p><p>　　gulp是nodejs下的自动构建工具，通过一列的task执行步骤进行自动流程化处理。<br>　　<br>　　安装gulp以及所需插件：<br>　　<code>npm install -d --save gulp gulp-clean gulp-load-plugins gulp-minify-css gulp-minify-html gulp-rename gulp-uglify gulp-shell  typescript</code><br>　　<br>　　在站点的根目录创建gulpfile.js文件（默认的处理文件），我的站点目录是/opt/blog/。<br>　gulpfile.js内容如下：<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"><span class="keyword">var</span> clean = <span class="built_in">require</span>(<span class="string">'gulp-clean'</span>);</span><br><span class="line"><span class="keyword">var</span> minifyCss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> minifyHtml = <span class="built_in">require</span>(<span class="string">'gulp-minify-html'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> shell = <span class="built_in">require</span>(<span class="string">'gulp-shell'</span>);</span><br><span class="line"><span class="keyword">var</span> ts = <span class="built_in">require</span>(<span class="string">'gulp-typescript'</span>);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"clean"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"./dst/*"</span>)</span><br><span class="line">    .pipe(clean());           <span class="comment">//plugins为加载的gulp-load-plugins插件,它可以自动加载项目依赖(package.json定义)</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"css"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">"public/**/*.css"</span>,<span class="string">"!public/**/*.min.css"</span>])</span><br><span class="line">    .pipe(minifyCss(&#123;<span class="attr">compatibility</span>: <span class="string">"ie8"</span>&#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">"./dst/"</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"js"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">"public/**/*.js"</span>,<span class="string">"!public/**/*.min.js"</span>])</span><br><span class="line">   .pipe(ts(&#123;</span><br><span class="line">      target: <span class="string">"es5"</span>,</span><br><span class="line">      allowJs: <span class="literal">true</span>,</span><br><span class="line">      <span class="built_in">module</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">      moduleResolution: <span class="string">"node"</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">"./dst/"</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"html"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"public/**/*.html"</span>)</span><br><span class="line">    .pipe(minifyHtml())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">"./dst/"</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"default"</span>,[<span class="string">"css"</span>,<span class="string">"js"</span>,<span class="string">"html"</span>,<span class="string">"mv"</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"gulp task finished!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"watch"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">"public/*"</span>,[<span class="string">"default"</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">gulp.task(<span class="string">"mv"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">"./dst/*"</span>)</span><br><span class="line">    .pipe(shell([</span><br><span class="line">        <span class="string">"cp -r ./dst/* ./public/"</span></span><br><span class="line">    ]));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>通过执行<code>gulp</code>命令即可开启压缩处理。</p><p>执行结果：<br><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">[~~~~@~~~~~ blog]<span class="comment"># gulp </span></span><br><span class="line">[<span class="number">15</span>:<span class="number">35</span>:<span class="number">41</span>] Using gulpfile /opt/blog/gulpfile.js</span><br><span class="line">[<span class="number">15</span>:<span class="number">35</span>:<span class="number">41</span>] Starting <span class="string">'css'</span>...</span><br><span class="line">[<span class="number">15</span>:<span class="number">35</span>:<span class="number">41</span>] Starting <span class="string">'js'</span>...</span><br><span class="line">[<span class="number">15</span>:<span class="number">35</span>:<span class="number">41</span>] Starting <span class="string">'html'</span>...</span><br><span class="line">[<span class="number">15</span>:<span class="number">35</span>:<span class="number">42</span>] Finished <span class="string">'css'</span> after <span class="number">1.31</span> s</span><br><span class="line">public/<span class="class"><span class="keyword">lib</span>/<span class="title">Han</span>/<span class="title">dist</span>/<span class="title">han</span>.<span class="title">js</span>(2301,7): <span class="title">error</span> <span class="title">TS7028</span>: <span class="title">Unused</span> <span class="title">label</span>.</span></span><br><span class="line">public/<span class="class"><span class="keyword">lib</span>/<span class="title">velocity</span>/<span class="title">velocity</span>.<span class="title">js</span>(348,22): <span class="title">error</span> <span class="title">TS2300</span>: <span class="title">Duplicate</span> <span class="title">identifier</span> '<span class="title">offsetParent</span>'.</span></span><br><span class="line">public/<span class="class"><span class="keyword">lib</span>/<span class="title">velocity</span>/<span class="title">velocity</span>.<span class="title">js</span>(360,17): <span class="title">error</span> <span class="title">TS2300</span>: <span class="title">Duplicate</span> <span class="title">identifier</span> '<span class="title">offsetParent</span>'.</span></span><br><span class="line">[<span class="number">15</span>:<span class="number">36</span>:<span class="number">01</span>] <span class="symbol">TypeScript:</span> <span class="number">3</span> semantic errors</span><br><span class="line">[<span class="number">15</span>:<span class="number">36</span>:<span class="number">01</span>] <span class="symbol">TypeScript:</span> emit succeeded (<span class="keyword">with</span> errors)</span><br><span class="line">[<span class="number">15</span>:<span class="number">36</span>:<span class="number">01</span>] Finished <span class="string">'js'</span> after <span class="number">20</span> s</span><br><span class="line">[<span class="number">15</span>:<span class="number">36</span>:<span class="number">02</span>] Finished <span class="string">'html'</span> after <span class="number">20</span> s</span><br><span class="line">[<span class="number">15</span>:<span class="number">36</span>:<span class="number">02</span>] Starting <span class="string">'default'</span>...</span><br><span class="line">gulp task finished!</span><br><span class="line">[<span class="number">15</span>:<span class="number">36</span>:<span class="number">02</span>] Finished <span class="string">'default'</span> after <span class="number">90</span> μs</span><br></pre></td></tr></table></figure></p><p><strong>遇到的坑</strong></p><p>　　Q：<strong>GulpUglifyError: unable to minify JavaScript???</strong><br>　　A：在进行压缩的时候执行typescript检查javascript的类型(es6,es8)。</p><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改写后的处理</span></span><br><span class="line"><span class="built_in">var</span> ts = <span class="keyword">require</span>(<span class="string">'gulp-typescript'</span>);</span><br><span class="line"><span class="built_in">var</span> uglify = <span class="keyword">require</span>(<span class="string">'gulp-uglifyjs'</span>);</span><br><span class="line"><span class="params">...</span>.</span><br><span class="line">.pipe(ts(&#123;</span><br><span class="line">    target: <span class="string">"es5"</span>,</span><br><span class="line">    allowJs: <span class="literal">true</span>,</span><br><span class="line">    module: <span class="string">"commonjs"</span>,</span><br><span class="line">    moduleResolution: <span class="string">"node"</span></span><br><span class="line">&#125;))</span><br><span class="line">.pipe(uglify())</span><br></pre></td></tr></table></figure><p>　　Q： <strong>gulp command not found ????</strong><br>　　A： <code>npm install -g gulp</code></p><h4 id="菜单项未选中"><a href="#菜单项未选中" class="headerlink" title="菜单项未选中"></a>菜单项未选中</h4><p>　　<br>　　点击左边菜单栏的选项，发现页面刷新之后，选中项样式没有被添加。<br>　　搜寻JS发现（<code>themes/next/source/js/src/utils.js</code>）如下这段代码：<br>　　<code>path = path === &#39;/&#39; ? path : path.substring(0, path.length - 1);</code><br>　　假如<code>Path</code>为<code>/archives/</code>，通过上述代码最终<code>Path</code>会被改成<code>/archives</code>。下面获取元素的时候就会找不到对象，解决办法是将后面 <code>-1</code>去除。　　</p><p>　　</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Site diary</title>
      <link href="/2017/06/14/Site%20diary/"/>
      <url>/2017/06/14/Site%20diary/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><blockquote class="blockquote-center"><p>　　 青，取之于蓝，而青于蓝；冰，水为之，而寒于水。木直中绳，輮以为轮，其曲中规。虽有槁暴，不复挺者，輮使之然也。故木受绳则直，金就砺则利，君子博学而日参省乎己，则知明而行无过矣。      </p><p><strong>劝学 </strong></p></blockquote><ul><li><strong>2017-07-07 　　 下线网易云跟帖（官方不提供服务）</strong></li><li><strong>2017-07-03 　　 全站HTTPS实践</strong></li><li><strong>2017-06-30 　　 增加首页、以及404页面</strong></li><li><strong>2017-06-25 　　 新增评论功能，集成网易云跟帖</strong></li><li><strong>2017-06-25 　　 修复相册的BUG，以及添加相册功能，参考：<a href="http://down.admin5.com/demo/code_pop/19/1191/" target="_blank" rel="noopener">MA5-Gallery</a></strong></li><li><strong>2017-06-22 　　 新增内置标签LocationAddr/lsb</strong></li><li><strong>2017-06-21 　　 High一下优化、集成HTML压缩导致排版存在问题，继续优化排版</strong></li><li><strong>2017-06-20 　　 页面HTML、CSS、JavaScript优化，集成gulp自动构建脚本</strong></li><li><strong>2017-06-19 　　 添加留言、关于</strong></li><li><strong>2017-06-18 　　 添加阅读统计、百度分析</strong></li><li><strong>2017-06-18 　　 添加相册功能</strong></li><li><strong>2017-06-17 　　 去除豆瓣链接、添加网易云音乐的链接</strong></li><li><strong>2017-06-16 　　 文章版权优化</strong> </li><li><strong>2017-06-16 　　 添加打赏、RSS功能</strong></li><li><strong>2017-06-14 　　 添加Hight一下功能，存在点击多次会重复播放的BUG，待修复。参考<a href="http://tc9011.com/2016/12/24/hexo%E6%B7%BB%E5%8A%A0%E9%9F%B3%E4%B9%90%E3%80%81high%E4%B8%80%E4%B8%8B%E5%8F%8A%E4%B8%80%E4%BA%9B%E5%9D%91/" target="_blank" rel="noopener">hexo添加音乐、high一下及一些坑</a></strong></li><li><strong>2017-06-09 　　 鼠标悬浮特效、一些样式的修改。参考<a href="http://tc9011.com/2017/02/02/hexo%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E7%89%88%E6%9D%83%E5%A3%B0%E6%98%8E%E5%8F%8A%E4%B8%80%E4%BA%9B%E7%89%B9%E6%95%88/" target="_blank" rel="noopener">hexo文章添加版权声明及一些特效</a></strong></li><li><strong>2017-06-09 　　 文章添加版权声明，现在采取的办法还比较LOW。待优化</strong></li><li><strong>2017-06-08 　　 最后决定采用NexT主题，根据文档做了一些相应的配置（头像、标签、链接等）</strong></li><li><strong>2017-06-08 　　 read是基于NexT的，集成的时候发现NexT更加精简。并且有<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">完善的文档</a>。</strong></li><li><strong>2017-06-08 　　 准备采用<a href="https://github.com/liuzc/hexo-theme-read" target="_blank" rel="noopener">hexo-theme-read</a>主题</strong></li><li><strong>2017-05-30 　　 构建<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>基础环境 </strong></li></ul>]]></content>
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> site </tag>
            
            <tag> diary </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo Daemon</title>
      <link href="/2017/06/14/Hexo%20Daemon/"/>
      <url>/2017/06/14/Hexo%20Daemon/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>　　今天中午的时候发现自已网站突然不能访问了，我猜肯定是后台的<code>hexo</code>服务异常自动kill掉了。果然登录服务器<code>ps -ef | grep hexo</code>查看进程，果然发现hexo的进程不在了。由于我将输出的日志指向了<code>/dev/null</code>（Linux下的垃圾回收箱）。排查不了错误信息，只能思考有什么方法保证网站一直正常访问。<br>　　<br>　　Hexo后台启动命令：<code>hexo server &amp;</code><br>　　<br>　　<strong>大致方法</strong><br>　　-  通过守护脚本的方式，检测进程是否存在，如果不存在则启动<br>　　- forever让nodejs应用后台执行<br>　　- 通过nginx反向代理静态文件的方式　　</p><h4 id="守护脚本"><a href="#守护脚本" class="headerlink" title="守护脚本"></a>守护脚本</h4><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#! /bin/sh</span></span><br><span class="line"><span class="comment">#进程名字可修改</span></span><br><span class="line"><span class="attribute">PRO_NAME</span>=hexo</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> ; <span class="keyword">do</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#    用ps获取$PRO_NAME进程数量</span></span><br><span class="line">  <span class="attribute">NUM</span>=`ps aux | grep <span class="variable">$&#123;PRO_NAME&#125;</span> | grep -v grep |wc -l`</span><br><span class="line"><span class="comment">#  echo $NUM</span></span><br><span class="line"><span class="comment">#    少于1，重启进程</span></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;NUM&#125;</span>"</span> -lt <span class="string">"1"</span> ];then</span><br><span class="line">    echo <span class="string">"<span class="variable">$&#123;PRO_NAME&#125;</span> was killed"</span></span><br><span class="line">    hexo<span class="built_in"> server </span>&amp;</span><br><span class="line"><span class="comment">#    大于1，杀掉所有进程，重启</span></span><br><span class="line">  elif [ <span class="string">"<span class="variable">$&#123;NUM&#125;</span>"</span> -gt <span class="string">"1"</span> ];then</span><br><span class="line">    echo <span class="string">"more than 1 <span class="variable">$&#123;PRO_NAME&#125;</span>,killall <span class="variable">$&#123;PRO_NAME&#125;</span>"</span></span><br><span class="line">    killall -9 <span class="variable">$PRO_NAME</span></span><br><span class="line">    hexo<span class="built_in"> server </span>&amp;</span><br><span class="line">  fi</span><br><span class="line"><span class="comment">#    kill僵尸进程</span></span><br><span class="line">  <span class="attribute">NUM_STAT</span>=`ps aux | grep <span class="variable">$&#123;PRO_NAME&#125;</span> | grep T | grep -v grep | wc -l`</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;NUM_STAT&#125;</span>"</span> -gt <span class="string">"0"</span> ];then</span><br><span class="line">    killall -9 <span class="variable">$&#123;PRO_NAME&#125;</span></span><br><span class="line">    hexo<span class="built_in"> server </span>&amp;</span><br><span class="line">  fi</span><br><span class="line">done</span><br><span class="line"> </span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><h4 id="npm-forever"><a href="#npm-forever" class="headerlink" title="ｎpm ｆorever"></a>ｎpm ｆorever</h4><p>　　项目地址：<a href="https://github.com/foreverjs/forever" target="_blank" rel="noopener">foreverjs/forever</a><br>　　资料：<br>　　　　<a href="https://zhuanlan.zhihu.com/p/21518843" target="_blank" rel="noopener">Hexo快速搭建</a><br>　　　　<a href="http://www.tuijiankan.com/2015/05/08/hexo-forever-run/" target="_blank" rel="noopener">Hexo博客后台运行技巧</a><br>　　-  <strong>安装步骤</strong>：</p><figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">[sudo] npm install <span class="keyword">forever</span> -g</span><br><span class="line"></span><br><span class="line">cd /path/<span class="keyword">to</span>/your/project<span class="meta">  #hexo根目录</span></span><br><span class="line">[sudo] npm install <span class="keyword">forever</span>-monitor</span><br><span class="line"></span><br><span class="line"><span class="meta">#检查forever是否安装完成</span></span><br><span class="line"><span class="keyword">forever</span><span class="meta">   #返回帮助文档</span></span><br></pre></td></tr></table></figure><p>　　-  <strong><code>forever</code>基础命令</strong>：</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">$ sudo npm install <span class="keyword">forever</span> -g   <span class="comment">#安装</span></span><br><span class="line">$ <span class="keyword">forever</span> <span class="built_in">start</span> app.js          <span class="comment">#启动</span></span><br><span class="line">$ <span class="keyword">forever</span> <span class="built_in">stop</span> app.js           <span class="comment">#关闭</span></span><br><span class="line">$ <span class="keyword">forever</span> <span class="built_in">start</span> -l <span class="keyword">forever</span>.<span class="built_in">log</span> -o out.<span class="built_in">log</span> -e err.<span class="built_in">log</span> app.js   <span class="comment">#输出日志和错误</span></span><br></pre></td></tr></table></figure><p>　　- <strong>守护<code>Hexo</code></strong>：<br>　　在<code>Hexo</code>的根目录<code>/opt/blog</code>下创建app.js文件。<br>　　添加如下内容：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</span><br><span class="line">free = spawn(<span class="string">'hexo'</span>, [<span class="string">'server'</span>, <span class="string">'-p 4000'</span>]);<span class="comment">/* 其实就是等于执行hexo server -p 4000*/</span></span><br><span class="line"></span><br><span class="line">free.stdout.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'standard output:\n'</span> + data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">free.stderr.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'standard error output:\n'</span> + data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">free.on(<span class="string">'exit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">code, signal</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'child process eixt ,exit:'</span> + code);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>　　- <strong>启动<code>forever</code></strong>：</p><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">forever </span><span class="built_in">--minUptime</span> <span class="string">10000 </span><span class="built_in">--spinSleepTime</span> <span class="string">26000 </span><span class="string">start </span><span class="string">app.</span><span class="string">js</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#</span><span class="comment"># minUptime、spinSleepTime可填可不填，不填默认也会有，参数的意思可以直接去forever上查询。</span></span><br></pre></td></tr></table></figure><p>　　- <strong>验证</strong>：<br>　　　-  检查forever是否监控进程(  <code>forever list</code>  )<br>　　　-  查看hexo进程号<br>　　　-  kill 掉Hexo进程( <code>kill -9 pid</code> )<br>　　　- 重新查看hexo进程号<br>　　<strong>如果两次的pid不一样,表示<code>hexo</code>进程不存在时，会自动重启、</strong><br>　　<br>　　<img src="https://infos.rtime.xin/forever_test.png" alt="forever test"></p><h4 id="Nginx静态化"><a href="#Nginx静态化" class="headerlink" title="Nginx静态化"></a>Nginx静态化</h4><p>　　<a href="http://www.tuijiankan.com/2015/05/26/change_hexo_to_static/" target="_blank" rel="noopener">Hexo静态化Host尝试</a><br>　　<br>　　通过<code>hexo g</code>会生成整个站点静态文件，默认存放在<code>blog</code>的<code>public</code>目录。<br>　　采用Nginx指向本地静态资源目录的方式暴露服务。Nginx默认启动会创建两个线程，一个Master process（对请求分配），一个work process（处理每个请求）。对请求的透传处理，不作任何处理。所以相对于其他容器而言更加稳定，并且访问静态资源的效率上会比部署在一般容器中更快。</p><p>　　<strong>Nginx部署</strong></p><p>　　<a href="http://jingyan.baidu.com/album/1974b2898f5eadf4b1f774de.html?picindex=6" target="_blank" rel="noopener">linux环境下安装nginx教程</a><br>　　<a href="http://www.cnblogs.com/kunhu/p/3633002.html" target="_blank" rel="noopener">linux下安装nginx</a><br>　　<a href="https://codybonney.com/installing-nginx-on-centos-6-4/" target="_blank" rel="noopener">Installing nginx on CentOS 6.4</a><br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> pcre* -y</span><br><span class="line">yum <span class="keyword">install</span> openssl* -y</span><br><span class="line">yum <span class="keyword">install</span> zlib -y</span><br><span class="line">yum <span class="keyword">install</span> zlib-devel -y</span><br><span class="line">yum <span class="keyword">install</span> wget -y </span><br><span class="line"></span><br><span class="line">cd /opt</span><br><span class="line">wget <span class="keyword">http</span>://nginx.org/download/nginx<span class="number">-1.13</span><span class="number">.0</span>.tar.gz</span><br><span class="line">cp nginx<span class="number">-1.13</span><span class="number">.0</span>.tar.gz /usr/<span class="keyword">local</span></span><br><span class="line">cd /usr/<span class="keyword">local</span></span><br><span class="line">tar -zxvf nginx<span class="number">-1.13</span><span class="number">.0</span>.tar.gz</span><br><span class="line">mv nginx<span class="number">-1.13</span><span class="number">.0</span> nginx</span><br><span class="line"></span><br><span class="line">./configure <span class="comment">--prefix=/usr/local/nginx</span></span><br><span class="line">make &amp;&amp; make <span class="keyword">install</span> </span><br><span class="line"><span class="keyword">ln</span> -s /usr/<span class="keyword">local</span>/nginx/sbin/nginx /usr/<span class="keyword">local</span>/<span class="keyword">bin</span>/nginx</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">nginx</span><br><span class="line"></span><br><span class="line">#浏览器直接访问<span class="keyword">http</span>://localhost/即可访问到Nginx的静态页面</span><br><span class="line">#因为Nginx默认占用<span class="number">80</span>端口,所以必须以root用户启动</span><br></pre></td></tr></table></figure></p><p>　　<strong>编辑Nginx配置文件</strong><br>　　　- 静态文件的方式<br><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> rtime.xin www.rtime.xin notes.rtime.xin;</span><br><span class="line">  <span class="attribute">if</span> (<span class="variable">$host</span> != <span class="string">'www.rtime.xin'</span> ) &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)$</span> http://www.rtime.xin/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> /opt/blog/public;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>　　　- 端口的方式</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">  <span class="attribute">server_name</span> rtime.xin www.rtime.xin notes.rtime.xin;</span><br><span class="line">  <span class="comment">#access_log /var/log/nginx/log/host.access.log main;</span></span><br><span class="line">  <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>              http://127.0.0.1:4000/;</span><br><span class="line">    <span class="attribute">proxy_redirect</span>          <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span>        X-Real-IP       <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span>        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　建议还是采用<code>静态资源代理</code>的方式。效率上可以直接秒杀通过反向代理hexo服务的方式。但是<strong><em>存在缺陷是public目录必须是最新的</em></strong>、所以每次编写完文章之后，必须执行<code>hexo g</code>,生成最新的静态资源。</p><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p>　　Q ： <strong>nginx 1.9.5 ./configure: error: invalid option “–with-http_spdy_module”？？</strong><br>　　A：nginx 1.9.5 已经没有了 –with-http_spdy_module ，取代的是 –with-http_v2_module</p><h4 id="后续待完成"><a href="#后续待完成" class="headerlink" title="后续待完成"></a>后续待完成</h4><ul><li>Nginx开机自启动</li><li>Forever命令开机自启动</li><li>二级域名映射-Nginx</li><li>阿里云添加80监控</li></ul>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> nginx </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>待处理</title>
      <link href="/2017/06/13/%E5%BE%85%E5%A4%84%E7%90%86/"/>
      <url>/2017/06/13/%E5%BE%85%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="待总结的文章"><a href="#待总结的文章" class="headerlink" title="待总结的文章"></a>待总结的文章</h4><ul><li>Git 基础指令</li><li>博客的Hexo配置</li><li><span style="text-decoration:line-through;"><em>关于</em>（2017-06-27）</span></li><li>技术栈总结</li><li>工具推荐</li><li>Eclipse配置及快捷键</li><li>Https全站实践，以及首页、404页优化记录</li></ul><h4 id="一期功能（2017-06）"><a href="#一期功能（2017-06）" class="headerlink" title="一期功能（2017-06）"></a>一期功能（2017-06）</h4><ul><li><span style="text-decoration:line-through;"><em>相册功能(待优化)</em>（2017-06-25）</span></li><li><span style="text-decoration:line-through;"><em>统计功能</em>（2017-06-19）</span></li><li><span style="text-decoration:line-through;"><em>评论功能</em>（2017-06-25）</span></li><li><span style="text-decoration:line-through;"><em>页面优化</em>(2017-06-20)</span></li><li>全站Https实践</li><li><span style="text-decoration:line-through;"><em>留言界面</em>(2017-06-21)</span></li><li><a href="http://zhwhong.ml/2017/03/23/deal-with-hexo-article-top-problem/" target="_blank" rel="noopener">首页热点排序</a></li><li><span style="text-decoration:line-through;"><em>High一下优化</em>（2017-06-21）</span></li><li>seo 优化</li><li><span style="text-decoration:line-through;"><em>集成网易云音乐</em>（2017-06-17）</span></li><li><span style="text-decoration:line-through;"><em>浏览器缓存问题</em>（2017-06-19）暂时不缓存</span></li><li>github好像访问不了国内七牛的CDN</li><li>工具类整理</li><li><span style="text-decoration:line-through;"><em>gulp html会把空格也优化</em>（2017-06-21）</span></li><li><span style="text-decoration:line-through;"><em>部署优化</em>(2017-06-24)</span></li></ul><h4 id="二期功能（2017-07）"><a href="#二期功能（2017-07）" class="headerlink" title="二期功能（2017-07）"></a>二期功能（2017-07）</h4><ul><li>首页设计</li><li>控制台功能</li><li>书签维护</li><li>常用功能</li></ul>]]></content>
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> task </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 搭建</title>
      <link href="/2017/06/13/hexo%E6%90%AD%E5%BB%BA/"/>
      <url>/2017/06/13/hexo%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>　　最近准备搭建一个博客平台，也看了很多开源的博客框架。比如<a href="https://github.com/b3log/solo" target="_blank" rel="noopener">Solo</a>、<a href="https://wordpress.org/" target="_blank" rel="noopener">wordpress</a>等框架、自已曾经也在<a href="http://www.cnblogs.com/LuisYang/" target="_blank" rel="noopener">cnblog</a>发布过几篇文章、东写写西写写、杂乱无章的。后续可以写一个自动同步各平台的程序~~~</p><ul><li>Solo 是基于Java语言开发的，容器部署有tomcat、或者自带的Jetty等方式</li><li>wordpress是基于PHP语言开发的</li><li>Hexo是基于nodejs语言开发的</li><li>cnblog应该是.net开发的、没研究过.推测、哈哈</li></ul><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><p>　　Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><p>　　文档：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Docs</a><br>　　主题：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Themes</a><br>　　插件：<a href="https://hexo.io/plugins/" target="_blank" rel="noopener">Plugins</a></p><h4 id="构建NodeJS环境"><a href="#构建NodeJS环境" class="headerlink" title="构建NodeJS环境"></a>构建NodeJS环境</h4><p>　　本过程的安装环境：<br><figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">[root<span class="title">@luisyang</span> tmp]# uname -a</span><br><span class="line">Linux luisyang <span class="number">3.10</span>.<span class="number">0</span><span class="number">-327.36</span>.<span class="number">3</span>.el<span class="number">7</span>.<span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> <span class="symbol">#1</span> SMP Mon Oct <span class="number">24</span> <span class="number">16</span>:<span class="number">09</span>:<span class="number">20</span> UTC <span class="number">2016</span> <span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> <span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> <span class="keyword">x</span><span class="number">86</span>_<span class="number">64</span> GNU/Linux</span><br></pre></td></tr></table></figure></p><p>　　下载<a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">NodeJS</a>，我选择的是<code>Source Code</code>的版本。采用编译安装的方式。<br>　　<br>　　Linux下可以通过wget命令直接下载、不需要下载到本地，在上传到远程服务器。</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">yum install -y gcc gcc-c++ make</span><br><span class="line">cd /opt</span><br><span class="line">wget https://nodejs.org/dist/v6.<span class="number">11.0</span>/<span class="keyword">node</span><span class="title">-v6</span>.<span class="number">11.0</span>.tar.gz</span><br></pre></td></tr></table></figure><p>　　解压安装：</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">tar xvf <span class="keyword">node</span><span class="title">-v6</span>.<span class="number">11.0</span>.tar.gz</span><br><span class="line">cd <span class="keyword">node</span><span class="title">-v6</span>.<span class="number">11.0</span></span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">cp /usr/local/bin/<span class="keyword">node</span> <span class="title">/usr</span>/sbin/</span><br><span class="line"></span><br><span class="line">查看当前安装的<span class="keyword">Node</span><span class="title">版本</span></span><br><span class="line"><span class="title">node</span> -v</span><br><span class="line"></span><br><span class="line">查看当前安装npm版本    ---类似于Linux下面的yum</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><h4 id="构建Git环境"><a href="#构建Git环境" class="headerlink" title="构建Git环境"></a>构建Git环境</h4><p>　　<code>Github</code>提供通过<a href="https://github.com/blog/272-github-pages" target="_blank" rel="noopener">Github Pages</a>搭建个人主页。 <code>Hexo</code>的<code>deploy</code>命令可以将生成文章的静态文件部署到远程Github服务器。也可以通过<code>GitHub</code>动态管理维护自已的文章。<br>　　<br>　　基于这些前提、决定先在自已的Linux服务器<code>[CentOS 7]</code>中构建Git环境。<br>　　<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//先安装git依赖的包 </span><br><span class="line">yum <span class="keyword">install</span> zlib-devel </span><br><span class="line">yum <span class="keyword">install</span> openssl-devel </span><br><span class="line">yum <span class="keyword">install</span> perl </span><br><span class="line">yum <span class="keyword">install</span> cpio </span><br><span class="line">yum <span class="keyword">install</span> expat-devel </span><br><span class="line">yum <span class="keyword">install</span> gettext-devel </span><br><span class="line"></span><br><span class="line">//安装autoconf </span><br><span class="line">yum <span class="keyword">install</span> autoconf </span><br><span class="line"></span><br><span class="line">//安装git </span><br><span class="line">wget <span class="keyword">http</span>://www.codemonkey.org.uk/projects/git-snapshots/git/git-latest.tar.xz </span><br><span class="line">xz -d git-latest.tar.xz</span><br><span class="line">tar xvf git-latest.tar </span><br><span class="line">cd git-&#123;<span class="built_in">date</span>&#125; </span><br><span class="line">autoconf </span><br><span class="line">./configure <span class="comment">--with-curl=/usr/local </span></span><br><span class="line">make </span><br><span class="line">make <span class="keyword">install</span></span><br></pre></td></tr></table></figure></p><p>　　安装<code>Git</code>的步骤大同小异，下载包、安装、配置、配合命令使用既可<br>　　<br>　　<a href="https://git-scm.com/book/zh/v1/%E8%B5%B7%E6%AD%A5-%E5%AE%89%E8%A3%85-Git" target="_blank" rel="noopener">起步 - 安装 Git</a><br>　　<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000" target="_blank" rel="noopener">安装Git</a>　　</p><h4 id="搭建Hexo服务器"><a href="#搭建Hexo服务器" class="headerlink" title="搭建Hexo服务器"></a>搭建Hexo服务器</h4><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">cd</span> /<span class="meta">opt</span>    </span><br><span class="line"><span class="symbol">npm</span> install hexo-cli -g</span><br><span class="line"><span class="symbol">hexo</span> init <span class="keyword">blog</span></span><br><span class="line"><span class="keyword">cd </span><span class="keyword">blog</span></span><br><span class="line"><span class="keyword">npm </span>install</span><br><span class="line"><span class="symbol">hexo</span> server</span><br></pre></td></tr></table></figure><p>　　<code>hexo命令</code>：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Usage</span>: hexo &lt;command&gt;</span><br><span class="line"></span><br><span class="line"><span class="attribute">Commands:</span></span><br><span class="line">  help     Get help on a command.</span><br><span class="line">  init     Create a new Hexo folder.</span><br><span class="line">  version  Display version information.</span><br><span class="line"></span><br><span class="line">Global Options:</span><br><span class="line">  --config  Specify config file instead of using _config.yml</span><br><span class="line">  --cwd     Specify the CWD</span><br><span class="line">  --debug   Display all verbose messages in the terminal</span><br><span class="line">  --draft   Display draft posts</span><br><span class="line">  --safe    Disable all plugins and scripts</span><br><span class="line">  --silent  Hide output on console</span><br><span class="line"></span><br><span class="line">For more help, you can use 'hexo help [command]' for the detailed information</span><br><span class="line">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure><p>　　一般我都是采用后台的方式启动Hexo Server<br><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">nohup hexo<span class="built_in"> server </span>-p 80 &gt;/dev/<span class="literal">null</span> 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>　　Kill后台进程：<br><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">ps -ef | <span class="keyword">grep</span> hexo   <span class="comment">#获得Hexo的后台进程</span></span><br><span class="line"><span class="keyword">kill</span> -<span class="number">9</span> pid   <span class="comment">#杀死进程</span></span><br></pre></td></tr></table></figure></p><h4 id="下载Hexo主题"><a href="#下载Hexo主题" class="headerlink" title="下载Hexo主题"></a>下载Hexo主题</h4><p>　　Hexo的主题默认存放在<code>blog根目录下的themes目录[/opt/blog/themes]</code>下。默认主题：<code>landscape</code></p><p>　　本博客采用开源的<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">next</a>主题。外观炫酷吊炸天，简洁明了，博主对常见的配置问题都做了很清晰的讲解。构建起来也比较简单</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">下载主题</span><br><span class="line"><span class="keyword">cd</span> /<span class="keyword">opt</span>/blog</span><br><span class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/iissnan/hexo-theme-<span class="keyword">next</span> themes/<span class="keyword">next</span></span><br><span class="line"></span><br><span class="line">启动主题</span><br><span class="line"><span class="keyword">vi</span> /<span class="keyword">opt</span>/blog/_config.yml</span><br><span class="line">找到thems属性,修改为<span class="keyword">next</span>.重启即可。 </span><br><span class="line"></span><br><span class="line">启动服务</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>　　<br>　　一个简单的<code>Hexo博客</code>就搭建好了。【本文中的<code>Git环境</code>是为另外一篇文章构建基础~~~~】　　</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>名言警句</title>
      <link href="/2017/06/13/%E5%90%8D%E8%A8%80%E8%AD%A6%E5%8F%A5/"/>
      <url>/2017/06/13/%E5%90%8D%E8%A8%80%E8%AD%A6%E5%8F%A5/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="上下五千年"><a href="#上下五千年" class="headerlink" title="上下五千年"></a>上下五千年</h4><h4 id="古今中外"><a href="#古今中外" class="headerlink" title="古今中外"></a>古今中外</h4><h4 id="宁静致远"><a href="#宁静致远" class="headerlink" title="宁静致远"></a>宁静致远</h4><ul><li><strong><em>愿上帝赐予我平静，去接受我不能改变的；赐予我勇气，去改变我能改变的；赐予我智慧，去明白两者的区别。</em></strong></li></ul>]]></content>
      
      <categories>
          
          <category> 记录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Markdown经验总结</title>
      <link href="/2017/06/13/Markdown%E6%80%BB%E7%BB%93/"/>
      <url>/2017/06/13/Markdown%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>　　这两天写博客，感觉使用富文本编辑框来撰写文章，感觉特别的<code>Low</code>，而且不是很理想。决定采用最近流行的Markdown语言，使用指定的语法来编写文章，保存之后编辑器自动对语法进行渲染，生成整洁的文章排版。<code>炫酷吊炸天、36个赞！！！！！</code></p><p>　　本文顺便也总结这两天使用的经验~~~~</p><h4 id="Markdown编辑器"><a href="#Markdown编辑器" class="headerlink" title="Markdown编辑器"></a>Markdown编辑器</h4><p>　　主流的编辑器有：</p><ul><li><a href="http://markdownpad.com/download/markdownpad2-setup.exe" target="_blank" rel="noopener">MarkdownPad 2</a><ul><li>windows 10 存在bug，旁边的渲染页面打不开，需要装<a href="http://markdownpad.com/download/awesomium_v1.6.6_sdk_win.exe" target="_blank" rel="noopener">Awesomium 1.6.6 SDK</a></li></ul></li><li>Mou [Mac平台编辑器，windows不支持。泪崩]</li><li><a href="https://maxiang.io/" target="_blank" rel="noopener">马克飞象</a>[基于网页编写的方式，也支持Chrome插件的方式]</li><li><p>Atom [github开源一款编辑器，觉得写MD。大材小用、不是很适用]　　</p><p>目前撰写MD的方式：<br>　由于我的操作系统是Win10，安装渲染器之后， MarkdownPad 2 渲染页面展示的很<code>Low</code>。决定主要使用<code>马克飞象</code>撰写，之后再通过<code>MarkdownPad 2</code>检查与修正保存[<code>马克飞象与MarkDownPad个别语法有差异</code>]、<strong>不要通过文本的方式直接保存</strong>，可能保存的文件编码格式存在问题。我通过文本的方式保存，文件编码是<code>GB2312</code>，在部署到<code>Hexo</code>会出现乱码的问题，建议采用<strong>MarkdownPad 2</strong>保存，得到的文件格式编码是<code>UTF-8/无 BOM</code>。不会出现乱码问题。</p></li></ul><h4 id="Markdown常用快捷键"><a href="#Markdown常用快捷键" class="headerlink" title="Markdown常用快捷键"></a>Markdown常用快捷键</h4><p>　　常用总结：<br>　　1. 加粗  <code>Ctrl + B</code><br>　　2.斜体   <code>Ctrl + I</code><br>　　3. 链接   <code>Ctrl + L</code><br>　　4. 标题  <code>Ctrl + 1~5</code><br>　　5.代码   <code>Ctrl + K</code><br>　　6.图片   <code>Ctrl + G</code><br>　　7.表格   <code>Ctrl + Alt + T</code><br>　　9.帮助    <code>Ctrl + /</code>  [<strong>马克飞象</strong>]</p><p><img src="https://infos.rtime.xin/markdown_kjj.png" alt="马克飞象快捷键">    </p><h4 id="一些经验"><a href="#一些经验" class="headerlink" title="一些经验"></a>一些经验</h4><ul><li>开头空格<br>  <strong>把输入法由半角改为全角。 两次空格之后就能够有两个汉字的缩进</strong>　<br>　　　也可以在文章开头键入多个<code>nbsp</code>;，不过这种方法很<code>low</code>.</li><li>回车换行<br><strong>在文字末尾输入 2 个及以上的空格，再点击回车即可实现回车换行。</strong></li></ul>]]></content>
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 与 Git 集成</title>
      <link href="/2017/06/12/Hexo%E4%B8%8EGit%E9%9B%86%E6%88%90/"/>
      <url>/2017/06/12/Hexo%E4%B8%8EGit%E9%9B%86%E6%88%90/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="git初始化项目"><a href="#git初始化项目" class="headerlink" title="git初始化项目"></a>git初始化项目</h4><p>　　登录<a href="https://github.com/login" target="_blank" rel="noopener">Github</a>，初始化GitHub Pages项目。即是添加一个Git Project。</p><p>　　点击<code>New repository</code>创建一个新的Project.需要填写选项如下：<br>      　　　<br>　　- <code>Repository Name</code> 填写 <code>{github AccountName}.github.io</code><br>　　　　　　比如我的<code>AccountName</code>为<code>NightAlexLy</code>，即填写的为<code>NightAlexLy.github.io</code><br>　　- 点击保存</p><p>　　<img src="https://infos.rtime.xin/create_rep.png" alt="create repository">  </p><h4 id="配置git信息"><a href="#配置git信息" class="headerlink" title="配置git信息"></a>配置git信息</h4><p>　　登录远程服务器.执行下列命令初始化Git信息： </p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">　　　git<span class="built_in"> config </span>--global user.name <span class="string">"your username"</span>    </span><br><span class="line">　　　git<span class="built_in"> config </span>--global user.email <span class="string">"your email"</span></span><br></pre></td></tr></table></figure><p>　　关于Git的操作：<br>　　　<a href="http://justcoding.iteye.com/blog/1830388" target="_blank" rel="noopener">Git 常用命令整理</a><br>　　　<a href="http://iissnan.com/progit/" target="_blank" rel="noopener">Git Pro</a></p><h4 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h4><p>　　<strong>站点文件和主题文件区别：   </strong><br>　　- 站点文件作用于整个站点,配置一些站点信息（比如<code>Site、URL、Directory</code>等基础信息）<br>　　- 主题文件即是应用主题所采用的配置、一般只做用于你采用的主题。<br>　　站点文件一般在blog的根目录,主题文件在Theme/主题名/下。文件名都为<code>_config.yml</code></p><p>　　找到deploy节点：<br>　　　<code>type</code>设置为<code>git</code><br>　　　<code>repo</code>设置为<code>你刚创建的git Project repository</code><br>　　　<code>branch</code>设置为<code>master</code>   </p><p>　　　保存即可.</p><h4 id="部署至github"><a href="#部署至github" class="headerlink" title="部署至github"></a>部署至github</h4><p>　　 切换到站点目录<code>${BLOG}</code>,执行<code>hexo deploy</code>命令.<br>　　<br>　　<img src="https://infos.rtime.xin/hexo_deploy.png" alt="hexo deploy"></p><p>　　 结尾出现<code>INFO Deploy done:git</code>表示push成功.(部署成功)</p><h4 id="验证Github-Pages"><a href="#验证Github-Pages" class="headerlink" title="验证Github Pages"></a>验证Github Pages</h4><p>　　 浏览器输入”创建项目的repository name”。比如我的为nightalexly.github.io。</p><p>　　<img src="https://infos.rtime.xin/hexo_gitpages.png" alt="github pages"></p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>工作效率</title>
      <link href="/2017/06/12/work-label/"/>
      <url>/2017/06/12/work-label/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>　　工作或者生活中，我们会把自已遇到的一些好的站点或者网页保存为书签。日积月累，不加以整理，这将对于我们来说是一个件糟糕的事情。好的解决办法有，通过书签搜索工具或者将自已所有的书签重新梳理整理一遍。<br>　　蹭着这段时间有点闲，所以将自已工作所会使用的站点或者信息梳理成页面。方便以后快速查找。如下：<br>　　<br>　　<img src="https://infos.rtime.xin/lable_info.png" alt="label infomation"><br>　　<br>　　<strong><em>业精于勤,荒于嬉;行成于思;毁于随.—韩愈</em></strong></p><h4 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h4><ul><li>1.先在MarkDownPage中梳理一列整理内容</li><li>2.整理完成通过MarkDownPad导出页面</li><li>3.修改导出的页面，将body的内容包裹在Div里面</li><li>4.编辑导出页面的样式</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">修改<span class="selector-tag">body</span>的样式.将960修改为1280</span><br><span class="line"><span class="selector-tag">max-width</span>: 1280<span class="selector-tag">px</span>;</span><br><span class="line">添加<span class="selector-tag">div</span>的样式：</span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">30px</span> <span class="number">0px</span> <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>5.重复 1、2、3的步骤，整理导出的页面即可。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>技术问题总结</title>
      <link href="/2017/06/11/%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2017/06/11/%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="Java-操作符实质"><a href="#Java-操作符实质" class="headerlink" title="Java += 操作符实质"></a>Java += 操作符实质</h4><p><strong>问题 我之前以为： i += j 等同于 i = i + j; 但假设有：</strong>  </p><pre><code>int i = 5;long j = 8;</code></pre><p>  这时 i = i + j 不能编译，但 i += j 却可以编译。这说明两者还是有差别的 这是否意味着，i += j，实际是等同于 i= (type of i) (i + j)呢？</p><p><strong>回答 这个问题，其实官方文档中已经解答了。 请看这里</strong><a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.26.2" target="_blank" rel="noopener"> §15.26.2 Compound Assignment Operators</a></p><p>再照搬下官方文档的说明</p><p>对复合赋值表达式来说，E1 op= E2 (诸如 i += j; i -= j 等等)，其实是等同于 E1 = (T)((E1) op (E2))，其中，T是E1这个元素的类型。</p><p>举例来说，如下的代码</p><pre><code>short x = 3;x += 4.6;</code></pre><p>等同于</p><pre><code>short x = 3;x = (short)(x + 4.6);</code></pre><h4 id="将InputStream转换为String"><a href="#将InputStream转换为String" class="headerlink" title="将InputStream转换为String"></a>将InputStream转换为String</h4><p>使用Apache库 不重复造轮子。最靠谱的方法，还是用Apache commons IOUtils 这样简单几行代码就搞定了</p><pre><code>StringWriter writer = new StringWriter();IOUtils.copy(inputStream, writer, encoding);String theString = writer.toString();或者 String theString = IOUtils.toString(inputStream, encoding)//这个方法其实封装了上面的方法，减少了一个参数</code></pre><p><strong>使用原生库 如果不想引入Apache库，也可以这样做</strong></p><pre><code>static String convertStreamToString(java.io.InputStream is) {  java.util.Scanner s = new java.util.Scanner(is).useDelimiter(&quot;\\A&quot;);  return s.hasNext() ? s.next() : &quot;&quot;;}</code></pre><h4 id="将数组转换为List"><a href="#将数组转换为List" class="headerlink" title="将数组转换为List"></a>将数组转换为List</h4><p><strong>问题 假设有数组</strong></p><pre><code>Element[] array = {new Element(1),new Element(2),new Element(3)};</code></pre><p>如何将其转换为ArrayList<element> arraylist = ？？？</element></p><p><strong>回答1</strong></p><pre><code>new ArrayList&lt;Element&gt;(Arrays.asList(array))</code></pre><p><strong>回答2</strong></p><pre><code>Arrays.asList(array)或者Arrays.asList(new Element(1),new Element(2),new Element(3))</code></pre><p>不过，这样做有些坑要注意：</p><p>1.这样做生成的list，是定长的。也就是说，如果你对它做add或者remove，都会抛UnsupportedOperationException。<br>2.如果修改数组的值，list中的对应值也会改变！<br><strong>Arrays.asList() 返回的是Arrays内部静态类，而不是Java.util.ArrayList的类。这个java.util.Arrays.ArrayList有set(),get(),contains()方法，但是没有任何add() 方法，所以它是固定大小的</strong></p><p>如果希望避免这两个坑，请改用这个方式</p><pre><code>Collections.addAll(arraylist, array);</code></pre><h4 id="HashMap遍历"><a href="#HashMap遍历" class="headerlink" title="HashMap遍历"></a>HashMap遍历</h4><p>在Java中有多种遍历HashMAp的方法。让我们回顾一下最常见的方法和它们各自的优缺点。由于所有的Map都实现了Map接口，所以接下来方法适用于所有Map（如：HaspMap，TreeMap,LinkedMap,HashTable,etc）</p><p><strong>方法#1 使用For-Each迭代entries</strong></p><p>这是最常见的方法，并在大多数情况下更可取的。当你在循环中需要使用Map的键和值时，就可以使用这个方法</p><pre><code>Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();for(Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()){    System.out.println(&quot;key = &quot; + entry.getKey() + &quot;, value = &quot; + entry.getValue())}</code></pre><p>注意：For-Each循环是Java5新引入的，所以只能在Java5以上的版本中使用。如果你遍历的map是null的话，For-Each循环会抛出NullPointerException异常，所以在遍历之前你应该判断是否为空引用。</p><p><strong>方法#2 使用For-Each迭代keys和values</strong></p><p>如果你只需要用到map的keys或values时，你可以遍历KeySet或者values代替entrySet</p><pre><code>Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();//iterating over keys onlyfor (Integer key : map.keySet()) {    System.out.println(&quot;Key = &quot; + key);}//iterating over values onlyfor (Integer value : map.values()) {    System.out.println(&quot;Value = &quot; + value);}</code></pre><p>这个方法比entrySet迭代具有轻微的性能优势(大约快10%)并且代码更简洁</p><p><strong>方法#3 使用Iterator迭代</strong></p><pre><code>使用泛型Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entries = map.entrySet().iterator();while (entries.hasNext()) {    Map.Entry&lt;Integer, Integer&gt; entry = entries.next();    System.out.println(&quot;Key = &quot; + entry.getKey() + &quot;, Value = &quot; + entry.getValue());}不使用泛型Map map = new HashMap();Iterator entries = map.entrySet().iterator();while (entries.hasNext()) {    Map.Entry entry = (Map.Entry) entries.next();    Integer key = (Integer)entry.getKey();    Integer value = (Integer)entry.getValue();    System.out.println(&quot;Key = &quot; + key + &quot;, Value = &quot; + value);}</code></pre><p>你可以使用同样的技术迭代keyset或者values</p><p>这个似乎有点多余但它具有自己的优势。首先，它是遍历老java版本map的唯一方法。另外一个重要的特性是可以让你在迭代的时候从map中删除entries的(通过调用iterator.remover())唯一方法.如果你试图在For-Each迭代的时候删除entries，你将会得到unpredictable resultes 异常。</p><p>从性能方法看，这个方法等价于使用For-Each迭代</p><p><strong>方法#4 迭代keys并搜索values（低效的）</strong></p><pre><code>Map&lt;Integer, Integer&gt; map = new HashMap&lt;Integer, Integer&gt;();for (Integer key : map.keySet()) {    Integer value = map.get(key);    System.out.println(&quot;Key = &quot; + key + &quot;, Value = &quot; + value);}</code></pre><p>这个方法看上去比方法#1更简洁，但是实际上它更慢更低效，通过key得到value值更耗时（这个方法在所有实现map接口的map中比方法#1慢20%-200%）。如果你安装了FindBugs，它将检测并警告你这是一个低效的迭代。这个方法应该避免</p><p>总结</p><p>如果你只需要使用key或者value使用方法#2，如果你坚持使用java的老版本（java 5 以前的版本）或者打算在迭代的时候移除entries，使用方法#3。其他情况请使用#1方法。避免使用#4方法。</p><h4 id="Java修饰符：public，protected，private，不加修饰符。有什么区别呢？"><a href="#Java修饰符：public，protected，private，不加修饰符。有什么区别呢？" class="headerlink" title="Java修饰符：public，protected，private，不加修饰符。有什么区别呢？"></a>Java修饰符：public，protected，private，不加修饰符。有什么区别呢？</h4><p>如下表所示,Y表示能访问(可见性），N表示不能访问，例如第一行的第3个Y，表示类的变量/方法如果是用public修饰，它的子类能访问这个变量/方法</p><p>修饰符    类内部    同个包（package）    子类    其他范围</p><table><thead><tr><th style="text-align:left">修饰符</th><th style="text-align:right">类内部</th><th style="text-align:center">同个包（package）</th><th style="text-align:center">子类</th><th style="text-align:center">其他范围</th></tr></thead><tbody><tr><td style="text-align:left">public</td><td style="text-align:right">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td></tr><tr><td style="text-align:left">protected</td><td style="text-align:right">Y</td><td style="text-align:center">Y</td><td style="text-align:center">Y</td><td style="text-align:center">N</td></tr><tr><td style="text-align:left">无修饰符</td><td style="text-align:right">Y</td><td style="text-align:center">Y</td><td style="text-align:center">N or Y(见说明）</td><td style="text-align:center">N</td></tr><tr><td style="text-align:left">private</td><td style="text-align:right">Y</td><td style="text-align:center">N</td><td style="text-align:center">N</td><td style="text-align:center">N</td></tr></tbody></table><p>说明： 需要特别说明“无修饰符”这个情况，子类能否访问父类中无修饰符的变量/方法，取决于子类的位置。如果子类和父类在同一个包中，那么子类可以访问父类中的无修饰符的变量/方法，否则不行。</p><p>译注：本来觉得很简单一个问题，没想记录的，但看到答案，才发现自己以前错了。我以前一直以为无修饰符和private是一样的，如果没给变量加修饰符，java就默认为private。</p><h4 id="如何测试一个数组是否包含指定的值"><a href="#如何测试一个数组是否包含指定的值" class="headerlink" title="如何测试一个数组是否包含指定的值"></a>如何测试一个数组是否包含指定的值</h4><p>指定数组，如:</p><p>public static final String[] VALUES = new String[] {“AB”,”BC”,”CD”,”AE”};<br>现在制定一个值 s，有哪些比较好的方式，判断这个数组 VALUES 是否包含值 s？</p><p><strong>简单且优雅的方法:</strong></p><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="type">Arrays</span>.asList(...).<span class="built_in">contains</span>(...)</span><br><span class="line"></span><br><span class="line">使用 <span class="type">Apache</span> <span class="type">Commons</span> <span class="type">Lang</span>包中的<span class="type">ArrayUtils</span>.<span class="built_in">contains</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span>[] fieldsToInclude = &#123; <span class="string">"id"</span>, <span class="string">"name"</span>, <span class="string">"location"</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( <span class="type">ArrayUtils</span>.<span class="built_in">contains</span>( fieldsToInclude, <span class="string">"id"</span> ) ) &#123;</span><br><span class="line">    <span class="comment">// Do some stuff.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>自己写逻辑</strong></p><p>问题的本质，其实是一个查找的问题，即查找一个数组是否包含某个值。对于原始类型，若是无序的数组，可以直接写一个 for 循环:</p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">boolean</span> useLoop(<span class="keyword">String</span>[] arr, <span class="keyword">String</span> targetValue) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">String</span> s: arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.equals(targetValue))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若是有序的数组，可以考虑二分查找或者其他查找算法:</p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">boolean</span> useArraysBinarySearch(<span class="keyword">String</span>[] arr, <span class="keyword">String</span> targetValue) &#123;</span><br><span class="line">    <span class="built_in">int</span> a =  Arrays.binarySearch(arr, targetValue);</span><br><span class="line">    <span class="keyword">if</span>(a &gt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若数组里包含的是一个个对象，实际上比较就是引用是否相等(String 类型是判断 值是否相等)，本质就是比较 hashcode 和 equal 方法，可以考虑使用 List 或者 Set，如下</p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">boolean</span> useList(<span class="keyword">String</span>[] arr, <span class="keyword">String</span> targetValue) &#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList(arr).contains(targetValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">boolean</span> useLoop(<span class="keyword">String</span>[] arr, <span class="keyword">String</span> targetValue) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">String</span> s: arr)&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.equals(targetValue))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重写（Override）equals和hashCode方法时应考虑的问题"><a href="#重写（Override）equals和hashCode方法时应考虑的问题" class="headerlink" title="重写（Override）equals和hashCode方法时应考虑的问题"></a>重写（Override）equals和hashCode方法时应考虑的问题</h4><p> 理论上讲（编程语言、数学层面） equals() 定义了对象的相等关系（自反性、对称性、传递性）（有点抽象，更详细说明，请参考javadoc) 。 另外，它还具有一致性（也就是说，如果一个对象没有修改，那么对象的equals方法，应总是返回相同的值），此外，o.equals(null)应当总是返回false。 hashCode()（javadoc)也必须具备一致性的（也就是说，如果equal的结果没有变，那么hashcode()也应总是返回相同的值）</p><p>总的来说，这两个方法的关系：</p><p><strong>假如a.equals(b)，那么a.hashCode() 应等于b.hashCode()</strong></p><p>实践上讲</p><p><strong>如果你重写了其中一个方法，那么务必重写另外一个方法</strong></p><p>equals()和hashCode()所计算的属性集（set of fields）应当是一样的 如何更快地重写这两个方法呢？</p><p>使用Apache Commons Lang library中的EqualsBuilder、HashCodeBuilder</p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class Person &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> age;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> hashCode() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashCodeBuilder(<span class="number">17</span>, <span class="number">31</span>). <span class="comment">// two randomly chosen prime numbers</span></span><br><span class="line">            <span class="comment">// if deriving: appendSuper(super.hashCode()).</span></span><br><span class="line">            <span class="built_in">append</span>(name).</span><br><span class="line">            <span class="built_in">append</span>(age).</span><br><span class="line">            toHashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">boolean</span> equals(<span class="keyword">Object</span> obj) &#123;</span><br><span class="line">       <span class="keyword">if</span> (!(obj <span class="keyword">instanceof</span> Person))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="keyword">this</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        Person rhs = (Person) obj;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EqualsBuilder().</span><br><span class="line">            <span class="comment">// if deriving: appendSuper(super.equals(obj)).</span></span><br><span class="line">            <span class="built_in">append</span>(name, rhs.name).</span><br><span class="line">            <span class="built_in">append</span>(age, rhs.age).</span><br><span class="line">            isEquals();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你是用eclipse，可以在代码编辑区右键，然后选择 Source &gt; Generate hashCode() and equals()<br>另外请记得</p><p>当你使用一些基于Hash的 Collection 、 Map，例如HashSet, LinkedHashSet, HashMap, Hashtable, 、WeakHashMap等。在键值对被放到集合中之后，请确保其key值所对应的hashCode()是保持不变的。比较可靠的一个办法，是保持这些key是不可变的，这也能带来不少好处</p><h4 id="从一个多层嵌套循环中直接跳出"><a href="#从一个多层嵌套循环中直接跳出" class="headerlink" title="从一个多层嵌套循环中直接跳出"></a>从一个多层嵌套循环中直接跳出</h4><p><strong>问题 Java中如何从一个多层嵌套循环中退出，例如下面，有两个循环，break只能退出一个for循环，不能直接跳过第二个for循环</strong></p><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">Type</span> <span class="type"><span class="keyword">type</span> </span>: types) &#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">Type</span> <span class="type">t </span>: types2) &#123;  </span><br><span class="line">         <span class="keyword">if</span> (<span class="keyword">some</span> condition) &#123;  </span><br><span class="line">             // <span class="keyword">Do</span> something <span class="keyword">and</span> break...  </span><br><span class="line">             break; // 这样只退出了最里的<span class="keyword">for</span>循环  </span><br><span class="line">         &#125;  </span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>回答</strong><br>可以用break+label的语法，例子如下</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123;  </span><br><span class="line">    outerloop:  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;  </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>; j &lt; <span class="number">5</span>; j++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (i * j &gt; <span class="number">6</span>) &#123;  </span><br><span class="line">          System.<span class="keyword">out</span>.println(<span class="string">"Breaking"</span>);  </span><br><span class="line">          <span class="keyword">break</span> outerloop;  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.<span class="keyword">out</span>.println(i + <span class="string">" "</span> + j);  </span><br><span class="line">      &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"Done"</span>);  </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在for循环前加标签，如例子中的outerloop，然后在for循环内break label(如本例的outerloop),就会跳出该label指定的for循环。</p><h4 id="如何将String转换为Int"><a href="#如何将String转换为Int" class="headerlink" title="如何将String转换为Int"></a>如何将String转换为Int</h4><p>有两种方式</p><figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">Integer x = Integer.valueOf(<span class="keyword">str</span>);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">int</span> y = Integer.parseInt(<span class="keyword">str</span>);</span><br></pre></td></tr></table></figure><p>这两种方式有一点点不同：</p><ul><li><code>valueOf</code>返回的是<code>java.lang.Integer</code>的实例</li><li><code>parseInt</code>返回的是基本数据类型 <code>int</code><br><code>Short.valueOf/parseShort,Long.valueOf/parseLong</code>等也是有类似差别。</li></ul><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> foo;</span><br><span class="line"><span class="keyword">String</span> StringThatCouldBeANumberOrNot = <span class="string">"26263Hello"</span>; <span class="comment">//will throw exception</span></span><br><span class="line"><span class="keyword">String</span> StringThatCouldBeANumberOrNot2 = <span class="string">"26263"</span>; <span class="comment">//will not throw exception</span></span><br><span class="line"><span class="built_in">try</span> &#123;</span><br><span class="line">      foo = Integer.<span class="built_in">parseInt</span>(StringThatCouldBeANumberOrNot);</span><br><span class="line">&#125; <span class="built_in">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">      <span class="comment">//Will Throw exception!</span></span><br><span class="line">      <span class="comment">//do something! anything to handle the exception.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">try</span> &#123;</span><br><span class="line">      foo = Integer.<span class="built_in">parseInt</span>(StringThatCouldBeANumberOrNot2);</span><br><span class="line">&#125; <span class="built_in">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">      <span class="comment">//No problem this time but still it is good practice to care about exceptions.</span></span><br><span class="line">      <span class="comment">//Never trust user input :)</span></span><br><span class="line">      <span class="comment">//do something! anything to handle the exception.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="如何分割（split）string字符串-使用String-split-方法"><a href="#如何分割（split）string字符串-使用String-split-方法" class="headerlink" title="如何分割（split）string字符串 使用String#split()方法"></a>如何分割（split）string字符串 使用String#split()方法</h4><p>如下所示：</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String</span> <span class="keyword">string</span> = <span class="string">"004-034556"</span>;</span><br><span class="line"><span class="keyword">String</span>[] parts = <span class="keyword">string</span>.split(<span class="string">"-"</span>);</span><br><span class="line"><span class="keyword">String</span> part1 = parts[<span class="number">0</span>]; <span class="comment">// 004</span></span><br><span class="line"><span class="keyword">String</span> part2 = parts[<span class="number">1</span>]; <span class="comment">// 034556</span></span><br></pre></td></tr></table></figure><p>需要注意的是，该方法的参数是个正则表达式,要注意对某些字符做转码。例如，.在正则表达式中表示任意字符，因此，如果你要通过.号做分割，需要这样写，<code>split(&quot;\\.&quot;)</code>或者<code>split(Pattern.quote(&quot;.&quot;))</code></p><p>如果只是为了验证字符串中是否包含某个字符，使用<code>String#contains</code>方法就行。注意该方法的参数，不是正则表达式</p><h4 id="在java中如何对比（compare）string"><a href="#在java中如何对比（compare）string" class="headerlink" title="在java中如何对比（compare）string"></a>在java中如何对比（compare）string</h4><ul><li><code>==</code>对应的是指针相等，也就是他们是否为同一个对象</li><li><code>.equals()</code>对应的是值相等，也就是逻辑相等<br>因此，如果你想检查两个字符串是否为相同值，那么应该用<code>.equals()</code>方法</li></ul><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="comment">//值是相等的</span></span><br><span class="line"><span class="literal">new</span> <span class="built_in">String</span>(<span class="string">"test"</span>).<span class="keyword">equals</span>(<span class="string">"test"</span>) <span class="comment">// --&gt; true </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 值相等，但不是同个对象(指向不同的地址空间）</span></span><br><span class="line"><span class="literal">new</span> <span class="built_in">String</span>(<span class="string">"test"</span>) == <span class="string">"test"</span> <span class="comment">// --&gt; false </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 同上</span></span><br><span class="line"><span class="literal">new</span> <span class="built_in">String</span>(<span class="string">"test"</span>) == <span class="literal">new</span> <span class="built_in">String</span>(<span class="string">"test"</span>) <span class="comment">// --&gt; false </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个返回true，是因为这种写法属于字符串字面量，编译器会维护一个常量池，相同的字面量，都会指向相同的一个对象</span></span><br><span class="line"><span class="string">"test"</span> == <span class="string">"test"</span> <span class="comment">// --&gt; true</span></span><br></pre></td></tr></table></figure><p>因此， 值的对比，一般都是用equals方法。字符串字面量之间的对比，也可以用==（大家知其所以然即可，但没必要用==）</p><p>下面多举个字符串字面量的例子,下面代码中，前四个对比，返回true，最后一个返回false。</p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> test1 = <span class="string">"test"</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">String</span> test2 = <span class="string">"test"</span>;</span><br><span class="line"></span><br><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> test() &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">String</span> test3 = <span class="string">"test"</span>;</span><br><span class="line"><span class="keyword">String</span> test = <span class="string">"test"</span>;</span><br><span class="line"></span><br><span class="line">System.out.<span class="built_in">println</span>(test3.equals(test));</span><br><span class="line">System.out.<span class="built_in">println</span>(test3 == test);</span><br><span class="line">System.out.<span class="built_in">println</span>(test1.equals(test2));</span><br><span class="line">System.out.<span class="built_in">println</span>(test1 == test2);</span><br><span class="line">System.out.<span class="built_in">println</span>(test1 == <span class="keyword">new</span> <span class="keyword">String</span>(<span class="string">"test"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>其他</strong></p><ul><li>如果你重写了equal方法，记得相对应地修改hashcode方法，否则将会违反这两个方法的对等关系，如果两个对象是相等（equal）的，那么两个对象调用hashCode必须产生相同的整数结果，即：equal为true，hashCode必须为true，equal为false，hashCode也必须为false</li><li>如果要忽略大小写进行对比，可以用equalsIgnoreCase()方法</li></ul><h4 id="Map-lt-Key-Value-gt-基于Value值排序"><a href="#Map-lt-Key-Value-gt-基于Value值排序" class="headerlink" title="Map&lt;Key,Value&gt;基于Value值排序"></a>Map&lt;Key,Value&gt;基于Value值排序</h4><p><strong>方法1： 使用TreeMap，可以参考下面的代码</strong></p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class Testing &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) &#123;  </span><br><span class="line">  </span><br><span class="line">        HashMap&lt;<span class="keyword">String</span>,Double&gt; <span class="built_in">map</span> = <span class="keyword">new</span> HashMap&lt;<span class="keyword">String</span>,Double&gt;();  </span><br><span class="line">        ValueComparator bvc =  <span class="keyword">new</span> ValueComparator(<span class="built_in">map</span>);  </span><br><span class="line">        TreeMap&lt;<span class="keyword">String</span>,Double&gt; sorted_map = <span class="keyword">new</span> TreeMap&lt;<span class="keyword">String</span>,Double&gt;(bvc);  </span><br><span class="line">  </span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"A"</span>,<span class="number">99.5</span>);  </span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"B"</span>,<span class="number">67.4</span>);  </span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"C"</span>,<span class="number">67.4</span>);  </span><br><span class="line">        <span class="built_in">map</span>.<span class="built_in">put</span>(<span class="string">"D"</span>,<span class="number">67.3</span>);  </span><br><span class="line">  </span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"unsorted map: "</span>+<span class="built_in">map</span>);  </span><br><span class="line">  </span><br><span class="line">        sorted_map.putAll(<span class="built_in">map</span>);  </span><br><span class="line">  </span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">"results: "</span>+sorted_map);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">class ValueComparator implements Comparator&lt;<span class="keyword">String</span>&gt; &#123;  </span><br><span class="line">  </span><br><span class="line">    Map&lt;<span class="keyword">String</span>, Double&gt; base;  </span><br><span class="line">    <span class="keyword">public</span> ValueComparator(Map&lt;<span class="keyword">String</span>, Double&gt; base) &#123;  </span><br><span class="line">        <span class="keyword">this</span>.base = base;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// Note: this comparator imposes orderings that are inconsistent with equals.      </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> compare(<span class="keyword">String</span> a, <span class="keyword">String</span> b) &#123;  </span><br><span class="line">        <span class="built_in">if</span> (base.<span class="built_in">get</span>(a) &gt;= base.<span class="built_in">get</span>(b)) &#123;  </span><br><span class="line">            <span class="built_in">return</span> <span class="number">-1</span>;  </span><br><span class="line">        &#125; <span class="built_in">else</span> &#123;  </span><br><span class="line">            <span class="built_in">return</span> <span class="number">1</span>;  </span><br><span class="line">        &#125; <span class="comment">// returning 0 would merge keys  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>译注：如果不自己写Comparator,treemap默认是用key来排序</p><p><strong>方法2：</strong><br>先通过linkedlist排好序，再放到LinkedHashMap中</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MapUtil</span>  </span></span><br><span class="line"><span class="class"></span>&#123;  </span><br><span class="line">    public <span class="keyword">static</span> &lt;K, V <span class="keyword">extends</span> <span class="built_in">Comparable</span>&lt;? <span class="keyword">super</span> V&gt;&gt; <span class="built_in">Map</span>&lt;K, V&gt;   </span><br><span class="line">        sortByValue( <span class="built_in">Map</span>&lt;K, V&gt; map )  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="built_in">List</span>&lt;<span class="built_in">Map</span>.Entry&lt;K, V&gt;&gt; list =  </span><br><span class="line">            <span class="keyword">new</span> LinkedList&lt;<span class="built_in">Map</span>.Entry&lt;K, V&gt;&gt;( map.entrySet() );  </span><br><span class="line">        Collections.sort( list, <span class="keyword">new</span> Comparator&lt;<span class="built_in">Map</span>.Entry&lt;K, V&gt;&gt;()  </span><br><span class="line">        &#123;  </span><br><span class="line">            public <span class="built_in">int</span> compare( <span class="built_in">Map</span>.Entry&lt;K, V&gt; o1, <span class="built_in">Map</span>.Entry&lt;K, V&gt; o2 )  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">return</span> (o1.getValue()).compareTo( o2.getValue() );  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; );  </span><br><span class="line">  </span><br><span class="line">        <span class="built_in">Map</span>&lt;K, V&gt; result = <span class="keyword">new</span> LinkedHashMap&lt;K, V&gt;();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">Map</span>.Entry&lt;K, V&gt; entry : list)  </span><br><span class="line">        &#123;  </span><br><span class="line">            result.put( entry.getKey(), entry.getValue() );  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>译注：这两种方法，我简单测试了下，如果map的size在十万级别以上，两者的耗时都是几百毫秒，第二个方法会快一些。否则，第一个方法快一些。因此，如果你处理的map，都是几十万级别以下的大小，两种方式随意使用，看个人喜欢了。</p><h4 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h4><p><strong>问题</strong></p><p>在Java中<code>HashMap</code>和<code>Hashtable</code>的区别？ 哪一个对于多线程应用程序更好？</p><p><strong>回答</strong></p><ol><li><code>Hashtable</code>是同步的，加了<code>synchronized</code>锁，而<code>HashMap</code>不是。没有加<code>synchronized</code>锁的对象，性能通常比加了<code>synchronized</code>锁的对象要更好一些，因此，如果是非多线程程序，不需要考虑锁、同步等问题，那么使用<code>HashMap</code>更好。</li><li><code>Hashtable</code>不允许有空的键或值。<code>HashMap</code>允许空键和空值。</li><li><code>HashMap</code>有一个子类<code>LinkedHashMap</code>,对这个类对象进行迭代时，它的顺序是有序的（按插入顺序排序）。如有需要，你也能轻易的从<code>LinkedHashMap</code>转化成<code>HashMap</code>。<code>Hashtable</code>就没那么简单了，<br>总之，如果你无需关心同步（<code>synchronized</code>）问题，我会建议用HashMap。反之，你可以考虑使用<code>ConcurrentHashMap</code></li></ol><h4 id="如何便捷地将两个数组合到一起"><a href="#如何便捷地将两个数组合到一起" class="headerlink" title="如何便捷地将两个数组合到一起"></a>如何便捷地将两个数组合到一起</h4><p><strong>一行代码搞定 Apache Commons Lang library ArrayUtils.addAll(T[], T…)就是专门干这事的</strong><br>代码：</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String[] </span><span class="keyword">both </span>= ArrayUtils.<span class="keyword">addAll(first, </span>second)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><strong>不借助依赖包</strong><br><strong>非泛型 把下面的Foo替换成你自己的类名</strong></p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">public Foo[] concat(Foo[] a, Foo[] <span class="keyword">b) </span>&#123;</span><br><span class="line">   int aLen = a.length<span class="comment">;</span></span><br><span class="line">   int <span class="keyword">bLen </span>= <span class="keyword">b.length;</span></span><br><span class="line"><span class="keyword"> </span>  Foo[] c= new Foo[aLen+<span class="keyword">bLen];</span></span><br><span class="line"><span class="keyword"> </span>  System.arraycopy(a, <span class="number">0</span>, c, <span class="number">0</span>, aLen)<span class="comment">;</span></span><br><span class="line">   System.arraycopy(<span class="keyword">b, </span><span class="number">0</span>, c, aLen, <span class="keyword">bLen);</span></span><br><span class="line"><span class="keyword"> </span>  return c<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>泛型</strong></p><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">public &lt;<span class="built_in">T</span>&gt; <span class="built_in">T</span>[] <span class="built_in">concatenate</span> (<span class="built_in">T</span>[] a, <span class="built_in">T</span>[] b) &#123;</span><br><span class="line">    <span class="built_in">int</span> aLen = a.length;</span><br><span class="line">    <span class="built_in">int</span> bLen = b.length;</span><br><span class="line"></span><br><span class="line">    @SuppressWarnings(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="built_in">T</span>[] c = (<span class="built_in">T</span>[]) Array.newInstance(a.getClass().getComponentType(), aLen+bLen);</span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, c, <span class="number">0</span>, aLen);</span><br><span class="line">    System.arraycopy(b, <span class="number">0</span>, c, aLen, bLen);</span><br><span class="line"></span><br><span class="line">    return c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，泛型的方案不适用于基本数据类型（int，boolean……)</p><h4 id="Java-是否支持默认的参数值？"><a href="#Java-是否支持默认的参数值？" class="headerlink" title="Java 是否支持默认的参数值？"></a>Java 是否支持默认的参数值？</h4><p>在 c++ 中，常见到如下的方法定义(param3 默认为 false)：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyParameterizedFunction</span><span class="params">(String param1, <span class="keyword">int</span> param2, <span class="keyword">bool</span> param3=<span class="literal">false</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>那在 java 中，是否也支持这样的定义方式？</p><p>答案是否定的，不过我们可以通过多种方式处理这种参数默认值的情况。</p><p><strong>创建者模式</strong><br>使用创建者模式，你可以设定部分参数是有默认值，部分参数是可选的。如：</p><figure class="highlight pony"><table><tr><td class="code"><pre><span class="line"><span class="type">Student</span> s1 = <span class="function"><span class="keyword">new</span> <span class="title">StudentBuilder</span>().<span class="title">name</span>("<span class="type">Eli</span>").<span class="title">buildStudent</span>();</span></span><br><span class="line"><span class="function"><span class="title">Student</span> <span class="title">s2</span> = <span class="title">new</span> <span class="title">StudentBuilder</span>()</span></span><br><span class="line"><span class="function">                 .<span class="title">name</span>("<span class="type">Spicoli</span>")</span></span><br><span class="line"><span class="function">                 .<span class="title">age</span>(<span class="number">16</span>)</span></span><br><span class="line"><span class="function">                 .<span class="title">motto</span>("<span class="type">Aloha</span>, <span class="type">Mr</span> <span class="type">Hand</span>")</span></span><br><span class="line"><span class="function">                 .<span class="title">buildStudent</span>();</span></span><br></pre></td></tr></table></figure><p><strong>方法（构造函数）重载</strong><br>如:</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">void foo<span class="comment">(String a, Integer b)</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void foo<span class="comment">(String a)</span> &#123;</span><br><span class="line">    foo<span class="comment">(a, 0)</span>; <span class="comment">// here, 0 is a default value for b</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo<span class="comment">("a", 2)</span>;</span><br><span class="line">foo<span class="comment">("a")</span>;</span><br></pre></td></tr></table></figure><p>构造函数重载，对于参数比较少的情况下，比较适合；当参数相对多的时候，可以考虑使用静态工厂方法，或添加一个参数辅助对象。</p><p>如果是常规方法重载，可以考虑使用 参数辅助对象，或者重命名多种情况（比如说，有多个开银行卡的重载方法，可以根据需要重命名为 开交行卡，开招行卡 等多种方法）。</p><p><strong>null 的传递</strong><br>当有多个默认参数时，可以考虑传递 null，当参数为 null 时，将参数设为 默认值。如：</p><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="literal">void</span> foo(<span class="built_in">String</span> a, <span class="built_in">Integer</span> b, <span class="built_in">Integer</span> c) &#123;</span><br><span class="line">    b = b != <span class="built_in">null</span> ? b : <span class="number">0</span>;</span><br><span class="line">    c = c != <span class="built_in">null</span> ? c : <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(<span class="string">"a"</span>, <span class="built_in">null</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>多参数方式<br>当有多个参数，且某些参数可以忽略不设置的情况下，可以考虑使用多参数方式。</p><ul><li>可选的参数类型的一致</li></ul><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">void</span> foo(<span class="keyword">String </span>a, Integer... <span class="keyword">b) </span>&#123;</span><br><span class="line">    Integer <span class="keyword">b1 </span>= <span class="keyword">b.length </span>&gt; <span class="number">0</span> ? <span class="keyword">b[0] </span>: <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    Integer <span class="keyword">b2 </span>= <span class="keyword">b.length </span>&gt; <span class="number">1</span> ? <span class="keyword">b[1] </span>: <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">foo</span>(<span class="string">"a"</span>)<span class="comment">;</span></span><br><span class="line"><span class="symbol">foo</span>(<span class="string">"a"</span>, <span class="number">1</span>, <span class="number">2</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><ul><li>可选参数类型不一致</li></ul><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">void</span> foo(<span class="keyword">String </span>a, Object... <span class="keyword">b) </span>&#123;</span><br><span class="line">    Integer <span class="keyword">b1 </span>= <span class="number">0</span><span class="comment">;</span></span><br><span class="line">    <span class="keyword">String </span><span class="keyword">b2 </span>= <span class="string">""</span><span class="comment">;</span></span><br><span class="line">    <span class="meta">if</span> (<span class="keyword">b.length </span>&gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="meta">if</span> (!(<span class="keyword">b[0] </span>instanceof Integer)) &#123; </span><br><span class="line">          throw new IllegalArgumentException(<span class="string">"..."</span>)<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">b1 </span>= (Integer)<span class="keyword">b[0];</span></span><br><span class="line"><span class="keyword"> </span>   &#125;</span><br><span class="line">    <span class="meta">if</span> (<span class="keyword">b.length </span>&gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="meta">if</span> (!(<span class="keyword">b[1] </span>instanceof <span class="keyword">String)) </span>&#123; </span><br><span class="line">            throw new IllegalArgumentException(<span class="string">"..."</span>)<span class="comment">;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">b2 </span>= (<span class="keyword">String)b[1];</span></span><br><span class="line"><span class="keyword"> </span>       //...</span><br><span class="line">    &#125;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="symbol">foo</span>(<span class="string">"a"</span>)<span class="comment">;</span></span><br><span class="line"><span class="symbol">foo</span>(<span class="string">"a"</span>, <span class="number">1</span>)<span class="comment">;</span></span><br><span class="line"><span class="symbol">foo</span>(<span class="string">"a"</span>, <span class="number">1</span>, <span class="string">"b2"</span>)<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><strong>使用 Map 作为方法中的参数</strong><br>当参数很多，且大部分参数都会使用默认值的情况，可以使用 Map 作为方法中的参数。</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> foo(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; parameters) &#123;</span><br><span class="line">    <span class="built_in">String</span> a = <span class="string">""</span>; </span><br><span class="line">    Integer b = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (parameters.containsKey(<span class="string">"a"</span>)) &#123; </span><br><span class="line">        <span class="keyword">if</span> (!(parameters.<span class="keyword">get</span>(<span class="string">"a"</span>) instanceof Integer)) &#123; </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"..."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        a = (<span class="built_in">String</span>)parameters.<span class="keyword">get</span>(<span class="string">"a"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (parameters.containsKey(<span class="string">"b"</span>)) &#123; </span><br><span class="line">        <span class="comment">//... </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(ImmutableMap.&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt;of(</span><br><span class="line">    <span class="string">"a"</span>, <span class="string">"a"</span>,</span><br><span class="line">    <span class="string">"b"</span>, <span class="number">2</span>, </span><br><span class="line">    <span class="string">"d"</span>, <span class="string">"value"</span>));</span><br></pre></td></tr></table></figure><h4 id="java-产生指定范围的随机数"><a href="#java-产生指定范围的随机数" class="headerlink" title="java 产生指定范围的随机数"></a>java 产生指定范围的随机数</h4><p>问题，如何使用 java 产生 010,510 之间的随机数？</p><p><strong>Math.random()</strong><br>Math.random() 可以产生一个 <strong>大于等于</strong> 0 且 <strong>小于</strong> 1 的双精度伪随机数，假设需要产生 ”0《= 随机数 &lt;=10” 的随机数，可以这样做:</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">int num =(<span class="name">int</span>)(<span class="name">Math</span>.random() * 11);</span><br></pre></td></tr></table></figure><p>那如何产生 “5 &lt;= 随机数 &lt;= 10” 的随机数呢?</p><figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">int num = <span class="number">5</span> + (<span class="name">int</span>)(<span class="name">Math</span>.random() * 6);</span><br></pre></td></tr></table></figure><p>生成 “min &lt;= 随机数 &lt;= max ” 的随机数</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num = <span class="built_in">min</span> + (<span class="keyword">int</span>)(Math.<span class="built_in">random</span>() * (<span class="built_in">max</span>-<span class="built_in">min</span>+<span class="number">1</span>));</span><br></pre></td></tr></table></figure><p><strong>java.util.Random</strong><br>Random 是 java 提供的一个伪随机数生成器。</p><p>生成 “ min &lt;= 随机数 &lt;= max ” 的随机数：</p><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">import java.util.Random;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Returns a pseudo-random number between <span class="built_in">min</span> <span class="built_in">and</span> <span class="built_in">max</span>, inclusive.</span><br><span class="line"> * The difference between <span class="built_in">min</span> <span class="built_in">and</span> <span class="built_in">max</span> can be at most</span><br><span class="line"> * &lt;code&gt;Integer.MAX_VALUE - <span class="number">1</span>&lt;/code&gt;.</span><br><span class="line"> *</span><br><span class="line"> * @param <span class="built_in">min</span> Minimum <span class="built_in">value</span></span><br><span class="line"> * @param <span class="built_in">max</span> Maximum <span class="built_in">value</span>.  Must be greater than <span class="built_in">min</span>.</span><br><span class="line"> * @return Integer between <span class="built_in">min</span> <span class="built_in">and</span> <span class="built_in">max</span>, inclusive.</span><br><span class="line"> * @see java.util.Random#nextInt(<span class="type">int</span>)</span><br><span class="line"> */</span><br><span class="line">public static <span class="type">int</span> randInt(<span class="type">int</span> <span class="built_in">min</span>, <span class="type">int</span> <span class="built_in">max</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> Usually this should be a field rather than a method</span></span><br><span class="line">    <span class="comment">// variable so that it is not re-seeded every call.</span></span><br><span class="line">    Random <span class="built_in">rand</span> = new Random();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// nextInt is normally exclusive of the top value,</span></span><br><span class="line">    <span class="comment">// so add 1 to make it inclusive</span></span><br><span class="line">    <span class="type">int</span> randomNum = <span class="built_in">rand</span>.nextInt((<span class="built_in">max</span> - <span class="built_in">min</span>) + <span class="number">1</span>) + <span class="built_in">min</span>;</span><br><span class="line"></span><br><span class="line">    return randomNum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>标准库</strong><br>在实际使用中，没有必要区重新写一次这些随机数的生成规则，可以借助一些标准库完成。如 <code>commons-lang</code>.</p><p><code>org.apache.commons.lang3.RandomUtils</code> 提供了如下产生指定范围的随机数方法:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// 产生 <span class="keyword">start</span> &lt;= 随机数 &lt; <span class="keyword">end</span> 的随机整数</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> nextInt(<span class="keyword">final</span> <span class="built_in">int</span> startInclusive, <span class="keyword">final</span> <span class="built_in">int</span> endExclusive);</span><br><span class="line">// 产生 <span class="keyword">start</span> &lt;= 随机数 &lt; <span class="keyword">end</span> 的随机长整数</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> nextLong(<span class="keyword">final</span> <span class="keyword">long</span> startInclusive, <span class="keyword">final</span> <span class="keyword">long</span> endExclusive);</span><br><span class="line">// 产生 <span class="keyword">start</span> &lt;= 随机数 &lt; <span class="keyword">end</span> 的随机双精度数</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> nextDouble(<span class="keyword">final</span> <span class="keyword">double</span> startInclusive, <span class="keyword">final</span> <span class="keyword">double</span> endInclusive);</span><br><span class="line">// 产生 <span class="keyword">start</span> &lt;= 随机数 &lt; <span class="keyword">end</span> 的随机浮点数</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> nextFloat(<span class="keyword">final</span> <span class="built_in">float</span> startInclusive, <span class="keyword">final</span> <span class="built_in">float</span> endInclusive);</span><br></pre></td></tr></table></figure><p><code>org.apache.commons.lang3.RandomStringUtils</code> 提供了生成随机字符串的方法，简单介绍一下:</p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 生成指定个数的随机数字串</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">randomNumeric</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"><span class="comment">// 生成指定个数的随机字母串</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">randomAlphabetic</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"><span class="comment">// 生成指定个数的随机字母数字串</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">String <span class="title">randomAlphanumeric</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> count)</span></span>;</span><br></pre></td></tr></table></figure><h4 id="JavaBean-到底是什么？"><a href="#JavaBean-到底是什么？" class="headerlink" title="JavaBean 到底是什么？"></a>JavaBean 到底是什么？</h4><p><strong>问题</strong><br>按照我的理解： “<code>Bean</code>” 是一个带有属性和<code>getters/setter</code>方法的Java类。它是不是和C的结构体是相似的呢，对吗？ 一个“<code>Bean</code>“类与普通的类相比是不是语法的不同呢？还是有特殊的定义和接口？ 为什么会出现这个术语呢，这让我很困惑？ 如果你很好心告诉我一些关于<code>Serializable</code>接口的信息，对于你的答案那到底是什么意思，我会非常感谢你的。<br><strong>回答</strong><br><code>JavaBean</code> 只是一个标准</p><ol><li>所有的属性是私有的（通过getters/setters处理属性）</li><li>一个公有的无参数的构造器</li><li>实现了<code>序列化（Serializable）</code><br>就这些，它只是一个规范。但是很多的类库都是依赖于这些预定。</li></ol><p>对于<code>Serializable</code>,看一下API文档的解释</p><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">实现java<span class="selector-class">.io</span><span class="selector-class">.Serializable</span>接口的类能串行化。</span><br><span class="line">不实现此接口的类不会有任何状态的序列化和反序列化。</span><br><span class="line">可序列化类的所有子类型本身都是可序列化。</span><br><span class="line">序列化接口没有方法或字段，仅用于标识的可序列化的语义。</span><br></pre></td></tr></table></figure><p>换句话说，序列化的对象可以被写入流，文件，对象数据库等。</p><p>另外，一个<code>JavaBean</code>类和一个普通的类没有语法区别，如果遵循上面的标准的话，一个类可以认为成<code>JavaBean</code>类。</p><p>之所以需要<code>JavaBean</code>，是因为这样预定义了一种类的格式，一些库能依据这个约定的格式，来做一些自动化处理。举个例子，如果一个类库需要通过流来处理你传递的任何对象，它知道它可以正常处理，因为这个对象是可序列化的。（假设这个类库要求你的对象是<code>JavaBeans</code>）</p><h4 id="wait-和sleep-的区别"><a href="#wait-和sleep-的区别" class="headerlink" title="wait()和sleep()的区别"></a>wait()和sleep()的区别</h4><p><strong>问题：</strong><br>在线程里 <code>wait()</code> 和 <code>sleep()</code> 的区别？</p><p>我的理解是执行 <code>wait()</code> 语句后，该线程仍是运行态，并且会占用CPU，但是执行 <code>sleep()</code>后，该线程则不会占用CPU，对吗？</p><p>为什么需要 <code>sleep()</code> 和 <code>wait()</code> 两条语句：他们底层是如何实现的？<br><strong>回答：</strong></p><p>线程 在<code>wait</code> 后，可以被另一个拥有相同 <code>synchronized</code> 对象的线程，通过调用 <code>notify</code> 唤醒，而 <code>sleep</code> 不行。<code>wait</code> 和 <code>notify</code> 能正常执行的条件是（否则会抛异常）：多个线程的代码，都包在<code>synchronized</code>块中，并且 <code>synchronized</code> 锁的对象需要是同一个。如下所示：</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">Object mon = ...<span class="comment">;</span></span><br><span class="line"><span class="keyword">synchronized </span>(mon) &#123;</span><br><span class="line">    mon.<span class="keyword">wait();</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure><p>上面这个线程调用了 <code>wait</code>后，会进入等待状态。这时另外一个线程可以这样做：</p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">synchronized</span> (mon) &#123; <span class="selector-tag">mon</span><span class="selector-class">.notify</span>(); &#125;</span><br></pre></td></tr></table></figure><p>可以看到，<code>synchronized</code>锁对象，都是<code>mon</code>。因此，当第二个线程调用了 notify() 方法，第一个线程就会唤醒（假设有且仅有一个线程是被包在 <code>synchronized (mon)</code> 中且处于等待状态)。<br>如果有多个线程在等待（且<code>synchronized</code> 锁对象是同一个，如上例中的<code>mon</code>），则可以调用 <code>notifyAll</code> 来唤醒。但是，只有其中一个线程能抢到锁并继续执行（因为 <code>wait</code> 的线程都是在 <code>synchronized</code> 块内，需要争夺 <code>synchronized</code> 锁）。其他的线程会被锁住，直到他们依次获得锁。</p><p>再补充几点：</p><ul><li><p><code>wait</code> 方法由 <code>Object</code> 对象调用（例如：你可以让 <code>synchronized</code> 锁对象调用 wait ,如上面例子的<code>mon.wait()</code>）,而 <code>sleep</code> 则由线程调用。</p></li><li><p><code>wait</code> 之后，可能会伪唤醒（<code>spurious wakeups</code>）（正在<code>waiting</code>的线程,无故就被唤醒了，如遇到<code>interrupted, timing out</code>等情况）。因此，你需要多设置一些检查，如果不满足实际的运行条件，则继续等待，如下：</p></li></ul><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (!condition) &#123; mon.wait(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当线程调用 <code>sleep</code> 时，并没有释放对象锁，而 <code>wait</code> 则释放了对象锁：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">synchronized(<span class="keyword">LOCK</span>) &#123;</span><br><span class="line">    Thread.sleep(<span class="number">1000</span>); // <span class="keyword">LOCK</span> <span class="keyword">is</span> held</span><br><span class="line">&#125;</span><br><span class="line">synchronized(<span class="keyword">LOCK</span>) &#123;</span><br><span class="line">    LOCK.wait(); // <span class="keyword">LOCK</span> <span class="keyword">is</span> <span class="keyword">not</span> held</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，再小结一下：</p><ul><li><code>sleep()</code>:“我已经完成了一个时间片，<strong>在n微秒</strong>前，请不要再给我一个时间片”。这时操作系统不会让这个线程做任何事情，直到<code>sleep</code>时间结束。</li><li><code>wait()</code>:”我已经完成了一个时间片，<strong>在其他线程调用<code>notify()</code>前</strong>，请不要再给我一个时间片）。这时操作系统不会安排这个线程继续运行，直到有人调用了<code>notify()</code></li></ul><h4 id="能否在一个构造器中调用另一个构造器"><a href="#能否在一个构造器中调用另一个构造器" class="headerlink" title="能否在一个构造器中调用另一个构造器"></a>能否在一个构造器中调用另一个构造器</h4><p><strong>问题 能否在一个构造器中调用另一个构造器（在同一个类中，不是子类）？如果可以，怎么做？ 调用另一个构造器的最好方法是什么（如果有几种方法可以选择的话）？</strong></p><p><strong>回答 可以这样做：</strong></p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Foo</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Foo</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想调用一个特定的父类构造器，而不是本类的构造器，应该使用super，而不是this. 请注意，在构造器中，你只能调用一次其他的构造器。并且调用其他构造器的语句，必须是这个构造器的第一个语句。</p><h4 id="finally-代码块总会被执行么"><a href="#finally-代码块总会被执行么" class="headerlink" title="finally 代码块总会被执行么"></a>finally 代码块总会被执行么</h4><p><strong>有一个 try/catch 代码块，其中包含一个打印语句。finally代码块总会被执行么？</strong><br>示例：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    something();  </span><br><span class="line">    <span class="keyword">return</span> success;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">return</span> failure;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">finally</span> &#123;  </span><br><span class="line">    System.<span class="keyword">out</span>.println(<span class="string">"i don't know if this will get printed out."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>回答</strong></p><ol><li>finally 将会被调用。<br>只有以下情况 finally 不会被调用：</li></ol><ul><li>当你使用 System.exit() 后</li><li>其他线程干扰了现在运行的线程（通过 interrupt 方法）</li><li>JVM 崩溃( crash )了   </li></ul><p>Answered by Jodonnell, edited by jpaugh.</p><ol start="2"><li>//示例代码</li></ol><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Test</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String args[]</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    System.<span class="keyword">out</span>.println(Test.test());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">finally</span> &#123;  </span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">"finally trumps return."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">finally</span> trumps <span class="keyword">return</span>.</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="如何将String转换为enum"><a href="#如何将String转换为enum" class="headerlink" title="如何将String转换为enum"></a>如何将String转换为enum</h4><p><strong>问题</strong><br>假设定义了如下的enum（枚举）：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">enum</span> <span class="title">Blah</span> &#123;</span></span><br><span class="line">    A, B, C, D</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>已知枚举对应的String值，希望得到对应的枚举值。例如，已知”A”，希望得到对应的枚举——Blah.A，应该怎么做？<br>Enum.valueOf()是否能实现以上目的，如果是，那我如何使用？<br><strong>答案</strong><br>是的，Blah.valueOf(“A”) 将会得到 Blah.A</p><p>静态方法valueOf() 和 values() 不存在于源码中，而是在编译时创建，我们也可以在JavaDoc查看到它们，比如 Dialog.ModalityTyp 就中出现这两个方法。<br><strong>其他答案</strong><br>我有一个挺赞的工具方法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A common method for all enums since they can't have another base class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; Enum type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> c enum type. All enums must be all caps.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string case insensitive</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> corresponding enum, or null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Enum&lt;T&gt;&gt; T getEnumFromString(<span class="class"><span class="keyword">Class</span>&lt;<span class="title">T</span>&gt; <span class="title">c</span>, <span class="title">String</span> <span class="title">string</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( c != <span class="keyword">null</span> &amp;&amp; string != <span class="keyword">null</span> ) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Enum.valueOf(c, string.trim().toUpperCase());</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalArgumentException ex) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以这么使用：</p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function">MyEnum <span class="title">fromString</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">return</span> <span class="title">getEnumFromString</span><span class="params">(MyEnum.class, name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在java中声明数组"><a href="#在java中声明数组" class="headerlink" title="在java中声明数组"></a>在java中声明数组</h4><p><strong>问题描述： 你是如何在Java中声明数组的。</strong><br><strong>回答： 你可以直接用数组声明，或者通过数组的字面常量（array literal ）声明</strong><br>对于原始类型（primitive types）：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] myIntArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span>[] myIntArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">int</span>[] myIntArray = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure><p>对于其他类，比如String类，也是相同的：</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String</span>[] myStringArray = <span class="keyword">new</span> <span class="keyword">String</span>[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">String</span>[] myStringArray = &#123;<span class="string">"a"</span>, <span class="string">"b"</span>,<span class="string">"c"</span>&#125;;</span><br><span class="line"><span class="keyword">String</span>[] myStringArray = <span class="keyword">new</span> <span class="keyword">String</span>[]&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="反射（reflection）是什么及其用途"><a href="#反射（reflection）是什么及其用途" class="headerlink" title="反射（reflection）是什么及其用途?"></a>反射（reflection）是什么及其用途?</h4><p><strong>问题描述 反射是什么，为什么它是有用的？ 我特别感兴趣的是java，但我认为任何语言的原理都是相同的。</strong></p><p><strong>回答 反射的概念，主要是指程序可以访问、检测和修改它本身状态或行为的一种能力。在java中，通过反射，能够在”运行态”动态获得任意一个类的所有属性和方法，动态地调用对象的方法。</strong><br>举个例子，假设你有一个不知道具体类的对象，并且你想调用它的”dosomething”方法（如果存在的话）。java的静态类型系统只能调用一个已知类对象对应的已知接口，在未指定对象类型时，无法调用它的方法。但是通过反射，你的代码能检查这个未知类对象，并试图找出这个dosomething方法。如果存在这个方法，你可以通过反射调用这个方法。</p><p>为了进一步说明，请看下面的例子（下面的对象foo，就是上文提到的，我们不知道它对应的类是什么）：</p><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">Method</span> <span class="title">method</span> = <span class="title">foo</span>.<span class="title">getClass</span><span class="params">()</span>.<span class="title">getMethod</span><span class="params">("dosomething",null)</span>;</span></span><br><span class="line"><span class="function"><span class="keyword">method</span>.<span class="title">invoke</span><span class="params">(foo,null)</span>;</span>  <span class="comment">//调用foo的dosomething方法</span></span><br></pre></td></tr></table></figure><p>反射这个特性，经常会用于各种注解中(<code>annotations</code>)。举个例子，<code>Junit4</code>将使用反射来遍历你的代码，查找所有加了<code>@test</code>注解的类方法，之后运行测试单元时就调用这些方法。</p><p>最后，其概念在其他支持反射的静态类型语言中也是非常相似的。在动态语言中，无需用到上面说的第一种用法场景——调用未知类的方法（因为动态语言编允许任意对象调用任意方法，如果不存在对应方法，在运行时就会失败），但是第二种情况，查找做了指定标记的方法，这种场景还是很常见的</p><h4 id="为什么不能用string类型进行switch判断"><a href="#为什么不能用string类型进行switch判断" class="headerlink" title="为什么不能用string类型进行switch判断"></a>为什么不能用string类型进行switch判断</h4><p><strong>问题描述 为什么不能用string类型进行switch判断？ 在java的后续版本中，是否会增加这个新特性？ 有人能给我一篇文章，解释一下为什么不能这样做，或者进一步说明java中switch语句的运行方式？</strong></p><p><strong>回答 在switch语句中用string作为case，这个特性已经在java SE7 中被实现了，距离 这个’bug’ 被提出至少也有16年了。为何迟迟不提供这个特性，原因不明。但可以推测，可能跟性能有关。</strong></p><p><strong>Implementtation in JDK 7</strong><br>在JDK7中，这个特性已经实现了。在编译阶段，以string作为case值的代码，会按照特定的模式，被转换为更加复杂的代码。最终的执行代码将是一些使用了JVM指令的代码。</p><p>究竟是如何转换的呢？我们直接看看源码及编译后的代码。源代码：</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StringInSwitchCase</span> &#123; </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) </span>&#123; </span><br><span class="line">            String mode = args[<span class="number">0</span>]; </span><br><span class="line">            <span class="keyword">switch</span> (mode) &#123; </span><br><span class="line">                  <span class="keyword">case</span> <span class="string">"ACTIVE"</span>: </span><br><span class="line">                        System.<span class="keyword">out</span>.println(<span class="string">"Application is running on Active mode"</span>); </span><br><span class="line">                        <span class="keyword">break</span>; </span><br><span class="line">                  <span class="keyword">case</span> <span class="string">"PASSIVE"</span>:</span><br><span class="line">                        System.<span class="keyword">out</span>.println(<span class="string">"Application is running on Passive mode"</span>); </span><br><span class="line">                         <span class="keyword">break</span>; </span><br><span class="line">                  <span class="keyword">case</span> <span class="string">"SAFE"</span>: </span><br><span class="line">                          System.<span class="keyword">out</span>.println(<span class="string">"Application is running on Safe mode"</span>); </span><br><span class="line">          &#125; </span><br><span class="line">      &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后再反编译的代码：</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">import java.io.PrintStream; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">StringInSwitchCase</span>&#123; </span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="title">StringInSwitchCase</span>(<span class="params"></span>) </span>&#123; &#125; </span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params"><span class="keyword">string</span> args[]</span>) </span>&#123; </span><br><span class="line">             String mode = args[<span class="number">0</span>]; </span><br><span class="line">            String s; <span class="keyword">switch</span> ((s = mode).hashCode()) &#123; </span><br><span class="line">                  <span class="keyword">default</span>: <span class="keyword">break</span>; </span><br><span class="line">                  <span class="keyword">case</span> <span class="number">-74056953</span>: </span><br><span class="line">                        <span class="keyword">if</span> (s.<span class="keyword">equals</span>(<span class="string">"PASSIVE"</span>)) &#123; </span><br><span class="line">                                    System.<span class="keyword">out</span>.println(<span class="string">"Application is running on Passive mode"</span>); </span><br><span class="line">                         &#125; </span><br><span class="line">                        <span class="keyword">break</span>; </span><br><span class="line">                  <span class="keyword">case</span> <span class="number">2537357</span>: </span><br><span class="line">                        <span class="keyword">if</span> (s.<span class="keyword">equals</span>(<span class="string">"SAFE"</span>)) &#123; </span><br><span class="line">                              System.<span class="keyword">out</span>.println(<span class="string">"Application is running on Safe mode"</span>); </span><br><span class="line">                         &#125; </span><br><span class="line">                        <span class="keyword">break</span>; </span><br><span class="line">                  <span class="keyword">case</span> <span class="number">1925346054</span>: </span><br><span class="line">                        <span class="keyword">if</span> (s.<span class="keyword">equals</span>(<span class="string">"ACTIVE"</span>)) &#123; </span><br><span class="line">                              System.<span class="keyword">out</span>.println(<span class="string">"Application is running on Active mode"</span>); </span><br><span class="line">                         &#125; </span><br><span class="line">                        <span class="keyword">break</span>; </span><br><span class="line">               &#125; </span><br><span class="line">          &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包含case string的 switch 语句，在编译时会转为为嵌套代码（switch+if）。第一个switch将 case 中的string转为唯一的integer值。这个integer值就是原先string的hashcode值。在case的逻辑中，会加入if语句，这个if语句用于进一步检查string值是否跟原先的case string匹配。这样可以防止hash碰撞，确保代码的健壮。这本质上是一种语法糖，既支持了string作为case值这一特性，又能确保逻辑正确性。<br><strong>Switchs in the JVM</strong><br>switch的更多深层技术实现，可以参考JVM规范，<code>compliation of switch statements</code>。简单概括说，根据使用的常量的多寡，switch会对应到两种不同的JVM指令。JVM指令有所不同，归根结底都是为了代码的效率。</p><p>如果常量很多，会将case的int值去掉最低位后作为索引，放到一个指针表中——也就是所谓的tablewitch指令</p><p>如果常量相对较少，那么可用二分查找来找到正确的case–也就是所谓的lookupswitch指令</p><p>这两种指令，都要求在编译时确保case的对应值是integer常量。在运行时，虽然<code>tableswitchO（1）</code>的性能通常要好于<code>lookupswitchO(log(n))</code>的性能。但是前者需要更多的空间开销，因此需要兼顾空间及时间综合考虑性价比。<code>Bill Venners</code>的文章<code>a great article</code>有更多深入的分析。<br><strong>Before JDK 7</strong><br>在JDK之前，可以用枚举来实现类似的需求。它和在case中使用string有异曲同工之妙。例如如下：</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">Pill p = Pill.valueOf(str);</span><br><span class="line"><span class="keyword">switch</span>(p) &#123;</span><br><span class="line">    <span class="keyword">case</span> RED:<span class="keyword">pop</span>();<span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> BLUE:<span class="keyword">push</span>();<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="比较java枚举成员使用equal还是"><a href="#比较java枚举成员使用equal还是" class="headerlink" title="比较java枚举成员使用equal还是=="></a>比较java枚举成员使用equal还是==</h4><p><strong>问题</strong><br>我知道Java枚举会被编译成一个包含私有构造参数和一堆静态方法的类，当去比较两个枚举的时候，总是使用equals()方法，例如：</p><figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> useEnums(SomeEnum a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(a.<span class="keyword">equals</span>(SomeEnum.SOME_ENUM_VALUE))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="params">...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="params">...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外，我也可以使用 == 替代equals() 方法</p><figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">public useE<span class="symbol">nums2</span><span class="comment">(SomeEnum a)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span><span class="comment">(a == SomeEnum.SOME_ENUM_VALUE)</span></span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我有5年以上的java编程经验，并且我想我也懂得 == 和 equals() 之间的区别，但是我仍然觉得很困惑，哪一个操作符才是我该使用的。<br><strong>答案</strong><br>二者皆对，如果你看过枚举的源码，你会发现在源码中，equals也仅仅非常简单的 == 。 我使用 == ，因为无论如何，这个左值是可以为 null的<br>译者补充 java.lang.Enum 中Equals 代码：</p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>==other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>额外答案</strong><br><strong>能在枚举中使用 == 进行判断？</strong><br>答案是肯定的，因为枚举有着严格的实例化控制，所以你可以用 == 去做比较符，这个用法，在官方文档中也有明确的说明。</p><blockquote><p>JLS 8.9 Enums 一个枚举类型除了定义的那些枚举常量外没有其他实例了。 试图明确地说明一种枚举类型是会导致编译期异常。在枚举中final clone方法确保枚举常量从不会被克隆，而且序列化机制会确保从不会因为反序列化而创造复制的实例。枚举类型的反射实例化也是被禁止的。总之，以上内容确保了除了定义的枚举常量之外，没有枚举类型实例。</p></blockquote><p>因为每个枚举常量只有一个实例，所以如果在比较两个参考值，至少有一个涉及到枚举常量时，允许使用“==”代替equals()。（equals()方法在枚举类中是一个final方法，在参数和返回结果时，很少调用父类的equals()方法，因此是一种恒等的比较。）<br><strong>什么时候 == 和 equals 不一样？</strong><br>As a reminder, it needs to be said that generally, == is NOT a viable alternative to equals. When it is, however (such as with enum), there are two important differences to consider: 通常来说 == 不是一个 equals的一个备选方案，无论如何有2个重要的不同处需要考虑：<br><strong>== 不会抛出 NullPointerException</strong></p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span> &#123; <span class="title">BLACK</span>, <span class="title">WHITE</span> &#125;;</span></span><br><span class="line"></span><br><span class="line">Color nothing = null;</span><br><span class="line"><span class="keyword">if</span> (nothing == Color.BLACK);      <span class="regexp">//</span> runs fine</span><br><span class="line"><span class="keyword">if</span> (nothing.equals(Color.BLACK)); <span class="regexp">//</span> throws NullPointerException</span><br></pre></td></tr></table></figure><p><strong>== 在编译期检测类型兼容性</strong></p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Color</span> &#123; <span class="title">BLACK</span>, <span class="title">WHITE</span> &#125;;</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Chiral</span> &#123; <span class="title">LEFT</span>, <span class="title">RIGHT</span> &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Color.BLACK.equals(Chiral.LEFT)); <span class="regexp">//</span> compiles fine</span><br><span class="line"><span class="keyword">if</span> (Color.BLACK == Chiral.LEFT);      <span class="regexp">//</span> DOESN<span class="string">'T COMPILE!!! Incompatible types!</span></span><br></pre></td></tr></table></figure><p><strong>什么时候使用 == ？</strong><br>Bloch specifically mentions that immutable classes that have proper control over their instances can guarantee to their clients that == is usable. enum is specifically mentioned to exemplify. 具体来说，那些提供恰当实例控制的不可变类能够保证 == 是可用的，枚举刚好符合这个条件。</p><p>考虑静态工厂方法代替构造器 它使得不可变的类可以确保不会存在两个相等的实例，即当且仅当a==b的时候才有a.equals(b)为true。如果类保证了这一点，它的客户端可以使用“==”操作符来代替equals（Object）方法，这样可以提升性能。枚举类型保证了这一点</p><p>总而言之，在枚举比较上使用 == ， 因为：</p><ol><li>能正常工作</li><li>更快</li><li>运行时是安全的</li><li>编译期也是安全的</li></ol><p><strong>用java怎么创建一个文件并向该文件写文本内容</strong><br>创建一个文本文件（注意：如果该文件存在，则会覆盖该文件）</p><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">PrintWriter <span class="built_in">writer</span> = <span class="keyword">new</span> PrintWriter(<span class="string">"the-file-name.txt"</span>, <span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="built_in">writer</span>.println(<span class="string">"The first line"</span>);</span><br><span class="line"><span class="built_in">writer</span>.println(<span class="string">"The second line"</span>);</span><br><span class="line"><span class="built_in">writer</span>.<span class="built_in">close</span>();</span><br></pre></td></tr></table></figure><p>创建一个二进制文件（同样会覆盖这文件）</p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span> data[] = ...</span><br><span class="line">FileOutputStream <span class="keyword">out</span> = <span class="keyword">new</span> FileOutputStream(<span class="string">"the-file-name"</span>);</span><br><span class="line"><span class="keyword">out</span>.write(data);</span><br><span class="line"><span class="keyword">out</span>.close();</span><br></pre></td></tr></table></figure><p>Java 7+ 用户可以用<code>File</code>类来写文件 创建一个文本文件</p><figure class="highlight lua"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; <span class="built_in">lines</span> = Arrays.asList(<span class="string">"The first line"</span>, <span class="string">"The second line"</span>);</span><br><span class="line">Path file = Paths.get(<span class="string">"the-file-name.txt"</span>);</span><br><span class="line">Files.<span class="built_in">write</span>(file, <span class="built_in">lines</span>, Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">//Files.<span class="built_in">write</span>(file, <span class="built_in">lines</span>, Charset.forName(<span class="string">"UTF-8"</span>), StandardOpenOption.APPEND);</span><br></pre></td></tr></table></figure><p>创建一个二进制文件</p><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">byte <span class="keyword">data</span>[] = ...</span><br><span class="line">Path <span class="keyword">file</span> = Paths.get(<span class="string">"the-file-name"</span>);</span><br><span class="line">Files.<span class="built_in">write</span>(<span class="keyword">file</span>, <span class="keyword">data</span>);</span><br><span class="line">//Files.<span class="built_in">write</span>(<span class="keyword">file</span>, <span class="keyword">data</span>, StandardOpenOption.APPEND);</span><br></pre></td></tr></table></figure><p><strong>其他的答案（1）:</strong><br>在Java 7+中</p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> (Writer writer = <span class="keyword">new</span> <span class="type">BufferedWriter</span>(<span class="keyword">new</span> <span class="type">OutputStreamWriter</span>(</span><br><span class="line">              <span class="keyword">new</span> <span class="type">FileOutputStream</span>(<span class="string">"filename.txt"</span>), <span class="string">"utf-8"</span>))) &#123;</span><br><span class="line">   writer.write(<span class="string">"something"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一些实用的方法如下：</p><ul><li><code>FileUtils.writeStringtoFile(..)</code> 来自于 <code>commons-io</code> 包</li><li><code>Files.write(..)</code> 来自于 <code>guava</code><br>Note also that you can use a FileWriter, but it uses the default encoding, which is often a bad idea - it’s best to specify the encoding explicitly. 还要注意可以使用 <code>FileWriter</code>，但是它使用的是默认编码，这不是很好的方法，最好是明确指定编码</li></ul><p>下面是来自于prior-to-java-7的原始方法</p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">Writer writer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    writer = <span class="keyword">new</span> <span class="type">BufferedWriter</span>(<span class="keyword">new</span> <span class="type">OutputStreamWriter</span>(</span><br><span class="line">          <span class="keyword">new</span> <span class="type">FileOutputStream</span>(<span class="string">"filename.txt"</span>), <span class="string">"utf-8"</span>));</span><br><span class="line">    writer.write(<span class="string">"Something"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">  <span class="comment">// report</span></span><br><span class="line">&#125; finally &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;writer.close();&#125; <span class="keyword">catch</span> (Exception ex) &#123;<span class="comment">/*ignore*/</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看<code>Reading, Writing, and Creating Files</code>(包含NIO2)<br><strong>其他答案（2）：</strong></p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> Program &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) &#123;</span><br><span class="line">        String text = <span class="string">"Hello world"</span>;</span><br><span class="line">        BufferedWriter output = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"example.txt"</span>);</span><br><span class="line">            output = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">file</span>));</span><br><span class="line">            output.<span class="keyword">write</span>(text);</span><br><span class="line">        &#125; <span class="keyword">catch</span> ( IOException e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> ( output != <span class="keyword">null</span> ) output.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>其他答案（3）：</strong><br>如果已经有想要写到文件中的内容，<code>java.nio.file.Files</code> 作为 Java 7 附加部分的native I/O，提供了简单高效的方法来实现你的目标</p><p>基本上创建文件，写文件只需要一行，而且是只需一个方法调用！ 下面的例子创建并且写了6个不同的文件来展示是怎么使用的</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">Charset utf8 = StandardCharsets.UTF_8;</span><br><span class="line">List&lt;<span class="keyword">String</span>&gt; lines = Arrays.asList(<span class="string">"1st line"</span>, <span class="string">"2nd line"</span>);</span><br><span class="line"><span class="keyword">byte</span>[] data = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">try</span> &#123;</span><br><span class="line">    Files.<span class="built_in">write</span>(Paths.<span class="built_in">get</span>(<span class="string">"file1.bin"</span>), data);</span><br><span class="line">    Files.<span class="built_in">write</span>(Paths.<span class="built_in">get</span>(<span class="string">"file2.bin"</span>), data,</span><br><span class="line">            StandardOpenOption.CREATE, StandardOpenOption.APPEND);</span><br><span class="line">    Files.<span class="built_in">write</span>(Paths.<span class="built_in">get</span>(<span class="string">"file3.txt"</span>), <span class="string">"content"</span>.getBytes());</span><br><span class="line">    Files.<span class="built_in">write</span>(Paths.<span class="built_in">get</span>(<span class="string">"file4.txt"</span>), <span class="string">"content"</span>.getBytes(utf8));</span><br><span class="line">    Files.<span class="built_in">write</span>(Paths.<span class="built_in">get</span>(<span class="string">"file5.txt"</span>), lines, utf8);</span><br><span class="line">    Files.<span class="built_in">write</span>(Paths.<span class="built_in">get</span>(<span class="string">"file6.txt"</span>), lines, utf8,</span><br><span class="line">            StandardOpenOption.CREATE, StandardOpenOption.APPEND);</span><br><span class="line">&#125; <span class="built_in">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>其他答案（4）：</strong><br>下面是一个小程序来创建和写文件。该版本的代码比较长，但是可以容易理解</p><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.BufferedWriter;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.File;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.FileOutputStream;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.IOException;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.OutputStreamWriter;</span></span><br><span class="line"><span class="meta"><span class="meta-keyword">import</span> java.io.Writer;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">writer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> writing() &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//Whatever the file path is.</span></span><br><span class="line">            File statText = <span class="keyword">new</span> File(<span class="string">"E:/Java/Reference/bin/images/statsTest.txt"</span>);</span><br><span class="line">            FileOutputStream <span class="keyword">is</span> = <span class="keyword">new</span> FileOutputStream(statText);</span><br><span class="line">            OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">is</span>);    </span><br><span class="line">            Writer w = <span class="keyword">new</span> BufferedWriter(osw);</span><br><span class="line">            w.write(<span class="string">"POTATO!!!"</span>);</span><br><span class="line">            w.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            System.err.println(<span class="string">"Problem writing to the file statsTest.txt"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[]args) &#123;</span><br><span class="line">        writer write = <span class="keyword">new</span> writer();</span><br><span class="line">        write.writing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="serialVersionUID-有什么作用？该如何使用？"><a href="#serialVersionUID-有什么作用？该如何使用？" class="headerlink" title="serialVersionUID 有什么作用？该如何使用？"></a>serialVersionUID 有什么作用？该如何使用？</h4><p><strong>问题</strong><br>当一个对象实现 Serializable 接口时，多数 ide 会提示声明一个静态常量 serialVersionUID(版本标识），那 serialVersionUID 到底有什么作用呢？应该如何使用 serialVersionUID ？<br><strong>回答</strong><br>serialVersionUID 是实现 Serializable 接口而来的，而 Serializable 则是应用于Java 对象序列化/反序列化。对象的序列化主要有两种用途:</p><ul><li>把对象序列化成字节码，保存到指定介质上(如磁盘等)</li><li>用于网络传输<br>现在反过来说就是，serialVersionUID 会影响到上述所提到的两种行为。那到底会造成什么影响呢？<br><code>java.io.Serializable doc</code> 文档，给出了一个相对详细解释:<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line"><span class="symbol">serialVersionUID 是 Java 为每个序列化类产生的版本标识，可用来保证在反序列时，发送方发送的和接受方接收的是可兼容的对象。如果接收方接收的类的 serialVersionUID 与发送方发送的 serialVersionUID 不一致，进行反序列时会抛出 InvalidClassException。序列化的类可显式声明 serialVersionUID 的值，如下:</span></span><br><span class="line">` ` ` </span><br><span class="line">ANY-ACCESS-MODIFIER static final long serialVersionUID = <span class="number">1</span>L<span class="comment">;</span></span><br><span class="line">` ` `</span><br><span class="line">当显式定义 serialVersionUID 的值时，Java 根据类的多个方面(具体可参考 Java 序列化规范)动态生成一个默认的 serialVersionUID 。尽管这样，还是建议你在每一个序列化的类中显式指定 serialVersionUID 的值，因为不同的 jdk 编译很可能会生成不同的 serialVersionUID 默认值，进而导致在反序列化时抛出 InvalidClassExceptions 异常。所以，为了保证在不同的 jdk 编译实现中，其 serialVersionUID 的值也一致，可序列化的类必须显式指定 serialVersionUID 的值。另外，serialVersionUID 的修饰符最好是 private，因为 serialVersionUID 不能被继承，所以建议使用 private 修饰 serialVersionUID。</span><br></pre></td></tr></table></figure></li></ul><p>举例说明如下: 现在尝试通过将一个类 Person 序列化到磁盘和反序列化来说明 serialVersionUID 的作用: Person 类如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单的测试一下：</p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span> void testversion1L() throws Exception &#123;</span><br><span class="line">    File file = <span class="keyword">new</span> <span class="type">File</span>(<span class="string">"person.out"</span>);</span><br><span class="line">    <span class="comment">// 序列化</span></span><br><span class="line">    ObjectOutputStream oout = <span class="keyword">new</span> <span class="type">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="type">FileOutputStream</span>(file));</span><br><span class="line">    Person person = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">"John"</span>, <span class="number">21</span>, <span class="string">"广州"</span>);</span><br><span class="line">    oout.writeObject(person);</span><br><span class="line">    oout.close();</span><br><span class="line">    <span class="comment">// 反序列化</span></span><br><span class="line">    ObjectInputStream oin = <span class="keyword">new</span> <span class="type">ObjectInputStream</span>(<span class="keyword">new</span> <span class="type">FileInputStream</span>(file));</span><br><span class="line">    Object <span class="keyword">new</span><span class="type">Person</span> = oin.readObject(); </span><br><span class="line">    oin.close();</span><br><span class="line">    System.out.println(<span class="keyword">new</span><span class="type">Person</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试发现没有什么问题。有一天，因发展需要， 需要在 Person 中增加了一个字段 email，如下:</p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword"><span class="keyword">implements</span> <span class="type">Serializable</span></span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final long serialVersionUID = <span class="number">1</span>L;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> address;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">String</span> email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Person() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">public</span> Person(<span class="keyword">String</span> name, Integer age, <span class="keyword">String</span> address) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Person(<span class="keyword">String</span> name, Integer age, <span class="keyword">String</span> address,<span class="keyword">String</span> email) &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">String</span> toString() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", email='"</span> + email + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时我们假设和之前序列化到磁盘的 Person 类是兼容的，便不修改版本标识 serialVersionUID。再次测试如下</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">@Test</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> testversion1LWithExtraEmail() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">File</span> <span class="keyword">file</span> = <span class="keyword">new</span> <span class="keyword">File</span>(<span class="string">"person.out"</span>);</span><br><span class="line">    ObjectInputStream oin = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="keyword">file</span>));</span><br><span class="line">    Object newPerson = oin.readObject(); </span><br><span class="line">    oin.close();</span><br><span class="line">    System.out.<span class="keyword">println</span>(newPerson);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将以前序列化到磁盘的旧 Person 反序列化到新 Person 类时，没有任何问题。</p><p>可当我们增加 email 字段后，不作向后兼容。即放弃原来序列化到磁盘的 Person 类，这时我们可以将版本标识提高，如下:</p><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2</span>L;</span><br></pre></td></tr></table></figure><p>再次进行反序列化，则会报错，如下:</p><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">java.io.InvalidClassException:Person <span class="keyword">local</span> <span class="built_in">class</span> incompatible: stream classdesc serialVersionUID = <span class="number">1</span>, <span class="keyword">local</span> <span class="built_in">class</span> serialVersionUID = <span class="number">2</span></span><br></pre></td></tr></table></figure><p>谈到这里，我们大概可以清楚，serialVersionUID 就是控制版本是否兼容的，若我们认为修改的 Person 是向后兼容的，则不修改 serialVersionUID；反之，则提高 serialVersionUID的值。再回到一开始的问题，为什么 ide 会提示声明 serialVersionUID 的值呢？<br>因为若不显式定义 serialVersionUID 的值，Java 会根据类细节自动生成 serialVersionUID 的值，如果对类的源代码作了修改，再重新编译，新生成的类文件的serialVersionUID的取值有可能也会发生变化。类的serialVersionUID的默认值完全依赖于Java编译器的实现，对于同一个类，用不同的Java编译器编译，也有可能会导致不同的serialVersionUID。所以 ide 才会提示声明 serialVersionUID 的值。</p><p>附录拓展:</p><ul><li><a href="http://developer.51cto.com/art/201202/317181.htm" target="_blank" rel="noopener">深入理解 Java 对象序列化</a></li><li><a href="http://www.blogjava.net/lingy/archive/2008/10/10/233630.html" target="_blank" rel="noopener">对象的序列化和反序列化</a></li></ul><h4 id="为什么Java的Vector类被认为是过时的或者废弃的"><a href="#为什么Java的Vector类被认为是过时的或者废弃的" class="headerlink" title="为什么Java的Vector类被认为是过时的或者废弃的"></a>为什么Java的Vector类被认为是过时的或者废弃的</h4><p><strong>问题</strong><br>为什么java <code>Vector</code>类被认为是一个遗留的，过时的或废弃的类？在并发操作时，使用它是无效的吗？</p><p>如果我不想手动对对象实现同步，只想用一个线程安全的集合而无需创建底层数组的全新副本（如<code>CopyOnWriteArrayList</code>一样）。这种情况下，我使用Vector合理吗?</p><p>然后就是关于栈的问题，它是<code>Vector</code>的一个子类，我应该用什么代替它？<br><strong>回答</strong><br>Vector中对每一个独立操作都实现了同步，这通常不是我们想要的做法。对单一操作实现同步通常不是线程安全的（举个例子，比如你想遍历一个Vector实例。你仍然需要申明一个锁来防止其他线程在同一时刻修改这个Vector实例。如果不添加锁的话</p><p>通常会在遍历实例的这个线程中导致一个<code>ConcurrentModificationException</code>）同时这个操作也是十分慢的(在创建了一个锁就已经足够的前提下，为什么还需要重复的创建锁)</p><p>当然，即使你不需要同步，<code>Vector</code>也是有锁的资源开销的。</p><p>总的来说，在大多数情况下，这种同步方法是存在很大缺陷的。正如Mr Brain Henk指出，你可以通过调用<code>Collections.synchronizedList</code>来装饰一个集合 -事实上 <code>Vector</code> 将“可变数组”的集合实现与“同步每一个方法”结合起来的做法是另一个糟糕的设计；</p><p>各个装饰方法能够更明确的指示其关注的功能实现。</p><p>对于Stack这个类-我更乐于使用<code>Deque/ArrayDeque</code>来实现</p><h4 id="Java的foreach循环是如何工作的？"><a href="#Java的foreach循环是如何工作的？" class="headerlink" title="Java的foreach循环是如何工作的？"></a>Java的foreach循环是如何工作的？</h4><p><strong>问题</strong></p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">List</span>&lt;<span class="keyword">String&gt; </span>someList = new ArrayList&lt;<span class="keyword">String&gt;();</span></span><br><span class="line"><span class="keyword">// </span><span class="keyword">add </span><span class="string">"monkey"</span>, <span class="string">"donkey"</span>, <span class="string">"skeleton key"</span> to someList</span><br><span class="line"><span class="symbol">for</span> (<span class="keyword">String </span><span class="keyword">item </span>: someList) &#123;</span><br><span class="line">    System.out.println(<span class="keyword">item);</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure><p>如果不用for each语法，等价的循环语句是什么样的？<br><strong>回答</strong></p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">for</span>(<span class="keyword">Iterator&lt;String&gt; </span>i = someList.<span class="keyword">iterator(); </span>i.hasNext()<span class="comment">; ) &#123;</span></span><br><span class="line">    <span class="keyword">String </span><span class="keyword">item </span>= i.next()<span class="comment">;</span></span><br><span class="line">    System.out.println(<span class="keyword">item);</span></span><br><span class="line"><span class="keyword">&#125;</span></span><br></pre></td></tr></table></figure><p>记住，如果需要在循环中使用i.remove;或者以某种方式获取实际的iterator，你不能使用for(:)语法，因为实际的Iterator很难被推断出来。 正如Denis Bueno写的那样，这种代码对任何实现了Iterable接口的对象都奏效。 此外，如果for(:)句法中右侧是一个数组而不是一个可迭代对象，那么内部代码用一个int型的计数器来防止数组越界。详见<a href="http://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.14.2" target="_blank" rel="noopener">Java Language Specification</a></p><h4 id="为什么这两个时间（1927年）相减会得到一个奇怪的结果？"><a href="#为什么这两个时间（1927年）相减会得到一个奇怪的结果？" class="headerlink" title="为什么这两个时间（1927年）相减会得到一个奇怪的结果？"></a>为什么这两个时间（1927年）相减会得到一个奇怪的结果？</h4><p><strong>问题描述 如果我运行如下的程序，将两个相距一秒的日期解析成字符串并比较他们。</strong></p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(<span class="keyword">String</span>[] args) <span class="keyword">throws</span> ParseException &#123;</span><br><span class="line">    SimpleDateFormat sf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);  </span><br><span class="line">    <span class="keyword">String</span> str3 = <span class="string">"1927-12-31 23:54:07"</span>;  </span><br><span class="line">    <span class="keyword">String</span> str4 = <span class="string">"1927-12-31 23:54:08"</span>;  </span><br><span class="line">    Date sDt3 = sf.parse(str3);  </span><br><span class="line">    Date sDt4 = sf.parse(str4);  </span><br><span class="line">    <span class="keyword">long</span> ld3 = sDt3.getTime() /<span class="number">1000</span>;  </span><br><span class="line">    <span class="keyword">long</span> ld4 = sDt4.getTime() /<span class="number">1000</span>;</span><br><span class="line">    System.out.<span class="built_in">println</span>(ld4-ld3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为:</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">353</span></span><br></pre></td></tr></table></figure><p>为什么<code>ld4-ld3</code>不是<code>1</code>（正如我所期望的那样），而是<code>353</code>?</p><p>如果我把时间改变为之后的一秒:</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">String </span><span class="keyword">str3 </span>= <span class="string">"1927-12-31 23:54:08"</span><span class="comment">;  </span></span><br><span class="line"><span class="keyword">String </span><span class="keyword">str4 </span>= <span class="string">"1927-12-31 23:54:09"</span><span class="comment">;</span></span><br></pre></td></tr></table></figure><p>时区：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sun.util.calendar.ZoneInfo[<span class="attribute">id</span>=<span class="string">"Asia/Shanghai"</span>,</span><br><span class="line"><span class="attribute">offset</span>=28800000,dstSavings=0,</span><br><span class="line"><span class="attribute">useDaylight</span>=<span class="literal">false</span>,</span><br><span class="line"><span class="attribute">transitions</span>=19,</span><br><span class="line"><span class="attribute">lastRule</span>=<span class="literal">null</span>]</span><br><span class="line"></span><br><span class="line">Locale(Locale.getDefault()): zh_CN</span><br></pre></td></tr></table></figure><p><strong>问题回答</strong><br>　　 这是因为1927年11月31日上海的时区改变了。 观看此页获得更多关于上海1927年的细节。 这个问题主要是由于在1927年12月31日的午夜，时钟回调了5分钟零52秒。 所以”1927-12-31 23:54:08”这个时间实际上发生了两次，看上去java将这个时间解析为之后的那个瞬间。 因此出现了这种差别。</p><h4 id="该什么时候使用-ThreadLocal变量，它是如何工作的？"><a href="#该什么时候使用-ThreadLocal变量，它是如何工作的？" class="headerlink" title="该什么时候使用 ThreadLocal变量，它是如何工作的？"></a>该什么时候使用 ThreadLocal变量，它是如何工作的？</h4><p><strong>回答1</strong><br>一种可能的（也是常见的）使用情形是你不想通过同步方式（synchronized）访问非线程安全的对象（说的就是SimpleDateFormat）,而是想给每个线程一个对象实例的时候。 例如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// SimpleDateFormat is not thread-safe, so give one to each thread</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;SimpleDateFormat&gt; formatter = <span class="keyword">new</span> ThreadLocal&lt;SimpleDateFormat&gt;()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> SimpleDateFormat <span class="title">initialValue</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd HHmm"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">formatIt</span><span class="params">(Date date)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> formatter.get().format(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>回答2</strong><br>因为ThreadLocal是一个既定线程内部的数据引用，你可能在使用线程池的应用服务器上因此引起类加载时候的内存泄漏。你需要使用remove()方法很小心地清理TheadLocal中get()或者set()的变量。 如果程序执行完毕没有清理的话，它持有的任何对类的引用将作为部署的Web应用程序的一部分仍保持在永久堆，永远无法得到回收。重新部署/取消部署也无法清理对应用程序类的引用，因为线程不是被你的应用程序所拥有的。 每次成功部署都会创建一个永远不会被垃圾回收类的实例。</p><p>最后将会遇到内存不足的异常<code>-java.lang.java.lang.OutOfMemoryError: PermGen space -XX:MaxPermSize</code>，在google了很多答案之后你可能只是增加了<code>-XX:MaxPermSize</code>，而不是修复这个bug。 倘若你的确遇到这种问题，可以通过<code>Eclipse&#39;s Memory Analyzer</code>或根据<code>Frank Kieviet&#39;s guide</code> 和 <code>followup</code>来判断哪些线程和类保留了那些引用。</p><p>更新：又发现了Alex Vasseur’s blog entry，它帮助我查清楚了一些ThreadLocal的问题。</p><h4 id="如何计算MD5值"><a href="#如何计算MD5值" class="headerlink" title="如何计算MD5值"></a>如何计算MD5值</h4><p><strong>问题 Java中有没有方法可以计算一个String的MD5值？</strong><br><strong>回答 你可以用 <code>MessageDigest</code> 的MD5实例来计算String的MD5值。</strong><br>使用 <code>MessageDigest</code> 和 <code>String</code> 时，一定要显式声明你的数据编码类型。如果你使用无参的 <code>String.getBytes()</code> , 它会以当前平台的默认编码来转换数据。不同平台的默认编码可能是不同的，这可能会导致你的数据不一致。</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">import <span class="keyword">java.security.*;</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">..</span></span><br><span class="line"><span class="keyword"></span></span><br><span class="line"><span class="keyword">byte[] </span><span class="keyword">bytesOfMessage </span>= yourString.getBytes(<span class="string">"UTF-8"</span>)<span class="comment">;</span></span><br><span class="line">MessageDigest md = MessageDigest.getInstance(<span class="string">"MD5"</span>)<span class="comment">;</span></span><br><span class="line"><span class="keyword">byte[] </span>thedigest = md.<span class="keyword">digest(bytesOfMessage);</span></span><br></pre></td></tr></table></figure><p>如果你的要计算的数据量很大，你可以循环使用 .update(byte[]) 方法来加载数据。加载完毕后用 .digest() 方法来得到计算出的MD5值。</p><h4 id="Java内部类和嵌套静态类"><a href="#Java内部类和嵌套静态类" class="headerlink" title="Java内部类和嵌套静态类"></a>Java内部类和嵌套静态类</h4><p><strong>问题</strong><br>Java 当中的内部类和静态嵌套类有什么主要区别? 在这两者中有什么设计或者实现么?<br><strong>回答</strong><br>嵌套类分为两类: 静态和非静态. 用<code>static</code>装饰的嵌套类叫做静态类, 非静态的嵌套类叫做内部类.</p><p>静态嵌套类使用外围类名来访问:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">OuterClass</span><span class="selector-class">.StaticNestedClass</span></span><br></pre></td></tr></table></figure><p>例如, 实例化一个静态嵌套类的对象就要使用这种语法:</p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">OuterClass.StaticNestedClass nestedObject = <span class="keyword">new</span> <span class="type">OuterClass</span>.StaticNestedClass();</span><br></pre></td></tr></table></figure><p>内部类对象的存在需要依靠一个外部类的对象. 看看下面的类:</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> &#123;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> &#123;</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部类对象只有当外部类对象存在时才有效, 并且可以直接访问他的包裹对象(外部类对象)的方法以及成员.</p><p>因此, 要实例化一个内部类对象, 必须先实例化外部类对象. 然后用这种语法来创建内部类对象:</p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">OuterClass.InnerClass innerObject = outerObject.<span class="keyword">new</span> <span class="type">InnerClass</span>();</span><br></pre></td></tr></table></figure><p>提醒一下, 还有一种不用外部类对象来创建内部类对象的方法: <a href="http://stackoverflow.com/questions/20468856/is-it-true-that-every-inner-class-requires-an-enclosing-instance" target="_blank" rel="noopener">inner class without an enclosing</a></p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">t</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">1</span>; &#125;</span><br><span class="line">  <span class="keyword">static</span> A a =  <span class="keyword">new</span> A() &#123; <span class="function"><span class="keyword">int</span> <span class="title">t</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="number">2</span>; &#125; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里, <code>new A() { ... }</code>是一个定义在静态上下文的内部类对象, 并没有一个外围对象.</p><h4 id="如何创建泛型java数组"><a href="#如何创建泛型java数组" class="headerlink" title="如何创建泛型java数组"></a>如何创建泛型java数组</h4><p> <strong>问题</strong><br> 数组是不能通过泛型创建的，因为我们不能创建不可具体化的类型的数组。如下面的代码：</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenSet</span>&lt;E&gt; &#123;</span></span><br><span class="line">    <span class="keyword">private</span> E a[];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        a = <span class="keyword">new</span> E[INITIAL_ARRAY_LENGTH]; <span class="comment">//编译期就会报错：不能创建泛型数组</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>采纳答案</strong></p><ul><li>检查：强类型。<code>GenSet</code>明确知道数组中包含的类型是什么（例如通过构造器传入<code>Class&lt;E&gt;</code>，当方法中传入类型不是E将抛出异常）</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenSet</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> E[] a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenSet</span><span class="params">(Class&lt;E&gt; c, <span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用原生的反射方法，在运行时知道其数组对象类型</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="keyword">final</span> E[] a = (E[]) Array.newInstance(c, s);</span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...如果传入参数不为E类型，那么强制添加进数组将会抛出异常</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>未检查：弱类型。数组内对象不会有任何类型检查，而是作为Object类型传入。<br>在这种情况下，你可以采取如下写法：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenSet</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] a;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenSet</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">        a = <span class="keyword">new</span> Object[s];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="keyword">final</span> E e = (E) a[i];</span><br><span class="line">        <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码在编译期能够通过，但因为泛型擦除的缘故，在程序执行过程中，数组的类型有且仅有Object类型存在，这个时候如果我们强制转化为E类型的话，在运行时会有ClassCastException抛出。所以，要确定好泛型的上界，将上边的代码重写一下：</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">GenSet&lt;E</span> <span class="keyword">extends</span> <span class="title">Foo&gt;</span> </span>&#123; <span class="comment">// E has an upper bound of Foo</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Foo</span>[] a; <span class="comment">// E 泛型在运行期会被擦除为Foo类型，所以这里使用Foo[]</span></span><br><span class="line"></span><br><span class="line">    public <span class="type">GenSet</span>(int s) &#123;</span><br><span class="line">        a = <span class="keyword">new</span> <span class="type">Foo</span>[s];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> stackoverflow </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo auto shell</title>
      <link href="/2017/06/11/hexo%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2017/06/11/hexo%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="灵感"><a href="#灵感" class="headerlink" title="灵感"></a>灵感</h4><p>　　　     最近认证阿里云学生用户，参与ESC服务器9.9元/月的活动，准备先搭建一个博客网站，写写自已的心得以及经验。之前也搭建过网站，最后由于个人没时间（没时间是假的，就是懒。哈哈）的原因导致最后服务器到期，域名被回收。累觉不爱楽、<br>     　　　<br>　　　     新站准备通过Hexo来构建（Hexo是基于NodeJs），文章通过github托管。<strong>通过脚本来实现自动更新，自动发布等功能</strong>。也采用Linux别名的方式来简化命令。做一个效率猿，<strong>不做重复的事情，不浪费时间</strong>。　　　     </p><h4 id="linux-命令名"><a href="#linux-命令名" class="headerlink" title="linux 命令名"></a>linux 命令名</h4><p>　　　Linux下 给命令起别名是通过 alias命令<br>　　　大致语法格式： alias  name= ‘  command  ‘<br>　　　<br>　　　如果直接在console中键入别名命令，只能在本次环境中生效，当服务器重启或者关机等异常情况，配置的别名会丢失。一般都是保存至开机启动文件中，保证自已的别名不管在什么情况下都会生效。<br>　　　<br>　　　一般都会把别名命令存放至    <strong>~/.bashrc</strong>  文件中。 通过<code>source ~/.bashrc</code>让配置的别名生效。   </p><p>　　　如我在服务器中配置的命令别名：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> vwc=<span class="string">'vi /opt/blog/_config.yml'</span>  <span class="comment">#编辑站点文件</span></span><br><span class="line"><span class="built_in">alias</span> vwtc=<span class="string">'vi /opt/blog/themes/next/_config.yml'</span>  <span class="comment">#编辑主题文件</span></span><br><span class="line"><span class="built_in">alias</span> cdblog=<span class="string">'cd /opt/blog'</span>    <span class="comment">#切换到博客目录</span></span><br><span class="line"><span class="built_in">alias</span> hs=<span class="string">'nohup hexo server -p 80 &gt;/dev/null 2&gt;&amp;1 &amp;'</span>  <span class="comment">#启动hexo</span></span><br><span class="line"><span class="built_in">alias</span> hst=<span class="string">"sh /opt/blog/killhexo.sh "</span>   <span class="comment">#停止hexo</span></span><br><span class="line"><span class="built_in">alias</span> psh=<span class="string">'ps -ef | grep hexo'</span>   <span class="comment">#查看hexo 进程</span></span><br></pre></td></tr></table></figure><h4 id="hexo-cmd-console"><a href="#hexo-cmd-console" class="headerlink" title="hexo cmd console"></a>hexo cmd console</h4><p>　　自已编写的hexo console  ，有点low。 多多包涵，哈哈。。。<br>   <img src="https://infos.rtime.xin/hexo_console.png" alt="hexo console"><br>　　　<br>　　　　大致功能：<br>　　　　　　　１.启动hexo服务<br>　　　　　　　２.关闭hexo服务<br>　　　　　　　 3.获得hexo pid<br>　　　　　　　 4. 自动更新<br>　　　　　　　 5. 自动部署github</p><p>　　　　shell：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> initUI() </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="literal">true</span> ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"------------------------"</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"-----   h  e  x  o -----"</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">"------------------------"</span></span><br><span class="line"></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">" 1. start    server "</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">" 2. shutdown server "</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">" 3. hexo pid        "</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">" 4. auto update     "</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">" 5. auto deploy     "</span></span><br><span class="line">     <span class="built_in">echo</span> -n <span class="string">" Please enter :     "</span></span><br><span class="line">     </span><br><span class="line">     <span class="built_in">read</span> num</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> [ -z <span class="variable">$num</span> ];<span class="keyword">then</span></span><br><span class="line">       <span class="built_in">exit</span> 0</span><br><span class="line">     <span class="keyword">elif</span>  [ <span class="variable">$num</span> = 1 ];<span class="keyword">then</span></span><br><span class="line">      startServer</span><br><span class="line">     <span class="keyword">elif</span> [ <span class="variable">$num</span> = 2 ];<span class="keyword">then</span></span><br><span class="line">      stopServer</span><br><span class="line">     <span class="keyword">elif</span> [ <span class="variable">$num</span> = 3 ];<span class="keyword">then</span></span><br><span class="line">      getPID</span><br><span class="line">             <span class="keyword">elif</span> [ <span class="variable">$num</span> = 4 ];<span class="keyword">then</span></span><br><span class="line">              autoUpdate</span><br><span class="line">              startServer</span><br><span class="line">             <span class="keyword">elif</span> [ <span class="variable">$num</span> = 5 ];<span class="keyword">then</span></span><br><span class="line">              autoDeploy</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"Input error !!!!!!"</span></span><br><span class="line">     <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>  startServer() </span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">cd</span> /opt/blog</span><br><span class="line">   nohup hexo server -p 80 &gt;/dev/null 2&gt;&amp;1 &amp;  </span><br><span class="line">   <span class="built_in">echo</span> -n <span class="string">"start server sucess !!!  PID ::: "</span> </span><br><span class="line">   getPID</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> stopServer()</span><br><span class="line">&#123;</span><br><span class="line">   ps -ef|grep hexo |grep -v grep | grep -v /bin/bash| awk <span class="string">'&#123;print $2&#125;'</span> | xargs <span class="built_in">kill</span> -9  &gt;&gt; /dev/null</span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"stop hexo success !!! "</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> getPID()</span><br><span class="line">&#123;</span><br><span class="line">  ps -ef | grep hexo | grep -v grep | grep -v /bin/bash |  awk <span class="string">'&#123;print $2&#125;'</span> </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> autoUpdate()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  chkHexo=`ps -ef|grep hexo |grep -v grep | grep -v /bin/bash |awk <span class="string">'&#123;print $2&#125;'</span>`</span><br><span class="line">  <span class="keyword">if</span> [[ -z <span class="variable">$chkHexo</span> ]];<span class="keyword">then</span></span><br><span class="line">     <span class="built_in">echo</span> <span class="string">" hexo server is stop !!! "</span></span><br><span class="line">  <span class="keyword">else</span> </span><br><span class="line">     stopServer</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">  </span><br><span class="line">  <span class="built_in">echo</span> <span class="string">""</span></span><br><span class="line">  <span class="built_in">cd</span> /opt/blog</span><br><span class="line">  rm -rf db.json</span><br><span class="line">  hexo clean</span><br><span class="line">  hexo generate</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> autoDeploy()</span><br><span class="line">&#123;</span><br><span class="line">   </span><br><span class="line">  autoUpdate</span><br><span class="line"></span><br><span class="line">/usr/bin/expect &lt;&lt;-EOF</span><br><span class="line">  spawn hexo deploy</span><br><span class="line">  expect <span class="string">"Username"</span></span><br><span class="line">  send <span class="string">"<span class="variable">$gitUn</span>\r"</span>      <span class="comment">#github UserName</span></span><br><span class="line">  expect <span class="string">"Password"</span>   </span><br><span class="line">  send <span class="string">"<span class="variable">$gitPwd</span>\r"</span>     <span class="comment">#github Password</span></span><br><span class="line">  interact</span><br><span class="line">  expect eof</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">  startServer</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clear</span><br><span class="line">initUI</span><br></pre></td></tr></table></figure></p><h4 id="定时部署github"><a href="#定时部署github" class="headerlink" title="定时部署github"></a>定时部署github</h4><p>　　将<code>console shell</code>中<code>autoDeploy</code>的方法，独立于一个脚本(hexo-deploy.sh)中，通过Linux下的crontab定时器，配置指定的时间规则，定时执行脚本即可实现需求。</p><p>　　如我配置的每天23:30自动部署：</p><p>　　<code>30 23 * * * root &quot;sh /opt/blog/hexo-deploy.sh &gt;&gt; /tmp/test.txt&quot;</code></p><ul><li>遇到的坑</li></ul><p>　　　 Q ： crontab内环境变量与Shell环境变量不一致？<br>　　　 A ： 比如，我在脚本中使用hexo命令，但是hexo命令在/usr/local/bin下面。crontab环境的PATH没有指定这个目录配置，导致这个命令差找不到。自动化操作一致不成功，解决办法是在<code>/etc/profile</code>中的PATH后面追加<code>:/usr/local/bin</code>。在脚本部署的头部添加<code>. /etc/profile</code>即可。   </p><p>　　　 Q：Linux命令自动交互？<code>expect command not found</code><br>　　　 A :  <code>yum install -y expect</code>   </p><p>　　　 Q：执行脚本，直接返回killed,脚本直接结束？<br>　　　 A：有可能<code>kill -9</code>的时候，杀死了不存在的进程或者异常进程导致。</p>]]></content>
      
      <categories>
          
          <category> hexo </category>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> shell </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell 问题总结</title>
      <link href="/2017/06/11/Shell%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2017/06/11/Shell%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h4><p>　　由于自已从事<code>java</code>后端开发这块的工作，有时候会登录到远程<code>Linux</code>服务器查看日志，分析错误，统计数据等场景，会键入大量的命令。突发奇想，可以通过编写脚本（<code>Shell</code>）来实现工作简化。提到<code>Linux Shell</code>，自已曾经也系统化学习过，买过关于<code>Shell编程</code>的书籍。但是当自已要开始编写脚本的时候，才发现一些基础的知识都可能遗忘掉，比如声明变量、基础语法（<code>if-else</code>，<code>for</code>）、方法定义 （<code>function</code>）、自带Linux命令等一些基础的东西。只能通过百度一点点组装，完成最后脚本的编写，花费了大量的时间以及精力，不断地去重复搜索与记忆。也许自已不是一个运维工程师，不需要去尝试写这些东西。但是编写脚本，简化工作，节约时间，最后受益的人是自已，不是别人。<br>　　<br>　　 只有畏惧不敢尝试才是真正的失败！<br>　　<br>　　 本篇仅是对自已搜索知识的记录，方便下次查找！！！</p><h4 id="Shell接收用户输入"><a href="#Shell接收用户输入" class="headerlink" title="Shell接收用户输入"></a>Shell接收用户输入</h4><p>　　<a href="http://www.linuxidc.com/Linux/2015-08/122471.htm" target="_blank" rel="noopener">read命令读取用户输入</a><br>　　<a href="http://blog.csdn.net/zhangjikuan/article/details/51105166" target="_blank" rel="noopener">Shell脚本交互之：自动输入密码</a><br>　　<br>　　通过read命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line"><span class="built_in">read</span> <span class="built_in">test</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$test</span></span><br></pre></td></tr></table></figure></p><h4 id="Shell中声明函数"><a href="#Shell中声明函数" class="headerlink" title="Shell中声明函数"></a>Shell中声明函数</h4><p>　　<a href="http://c.biancheng.net/cpp/view/7011.html" target="_blank" rel="noopener">Shell函数：Shell函数返回值、删除函数、在终端调用函数</a><br>　　<br>　　通过funcation name(){}方式声明函数，{}中放入需要执行的命令。通过name即可调用函数<br><figure class="highlight openscad"><table><tr><td class="code"><pre><span class="line">声明函数</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printEcho</span><span class="params">()</span></span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"hello world！！！"</span></span><br><span class="line">&#125;</span><br><span class="line">调用函数</span><br><span class="line">printEcho</span><br></pre></td></tr></table></figure></p><h4 id="Shell中的if判断"><a href="#Shell中的if判断" class="headerlink" title="Shell中的if判断"></a>Shell中的if判断</h4><p>　　<a href="http://www.cnblogs.com/huai371720876/p/4561195.html" target="_blank" rel="noopener">Linux shell if判断语句</a><br>　　<a href="http://www.jb51.net/article/90454.htm" target="_blank" rel="noopener">对用户输入的判断的shell实现代码</a></p><p>几种方式：</p><ul><li><p>if</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">stdout=` <span class="keyword">ps</span> -ef|<span class="keyword">grep</span> hexo |<span class="keyword">grep</span> -v <span class="keyword">grep</span>|awk <span class="string">'&#123;print $2&#125;'</span> `</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"$stdout"</span> ]</span><br><span class="line">then</span><br><span class="line">  <span class="keyword">echo</span> -n <span class="string">"有货"</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>if-else</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">stdout=` <span class="keyword">ps</span> -ef|<span class="keyword">grep</span> hexo |<span class="keyword">grep</span> -v <span class="keyword">grep</span>|awk <span class="string">'&#123;print $2&#125;'</span> `</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"$stdout"</span> ]</span><br><span class="line">then</span><br><span class="line">  <span class="keyword">echo</span> -n <span class="string">"有货"</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="keyword">echo</span> -n <span class="string">"没货"</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li><li><p>if-elif-else</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> [ -z <span class="variable">$num</span> ];<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">exit</span> 0</span><br><span class="line"><span class="keyword">elif</span>  [ <span class="variable">$num</span> = 1 ];<span class="keyword">then</span></span><br><span class="line"> startServer</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$num</span> = 2 ];<span class="keyword">then</span></span><br><span class="line"> stopServer</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$num</span> = 3 ];<span class="keyword">then</span></span><br><span class="line"> getPID</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$num</span> = 4 ];<span class="keyword">then</span></span><br><span class="line"> autoUpdate</span><br><span class="line"> startServer</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$num</span> = 5 ];<span class="keyword">then</span></span><br><span class="line"> autoDeploy</span><br><span class="line"><span class="keyword">elif</span> [ <span class="variable">$num</span> = 6 ];<span class="keyword">then</span></span><br><span class="line"> updateSou</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="built_in">echo</span> <span class="string">"Input error !!!!!!"</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p>判断表达式<br><strong>关于文件属性的判断式</strong><br>　　-a 如果文件存在<br>　　-b 如果文件存在，且该文件是区域设备文件<br>　　-c 当file存在并且是字符设备文件时返回真<br>　　-d 当pathname存在并且是一个目录时返回真<br>　　-e 当pathname指定的文件或目录存在时返回真<br>　　-f 当file存在并且是普通文件时返回真<br>　　-g 当由pathname指定的文件或目录存在并且设置了SGID位时返回为真<br>　　-h 当file存在并且是符号链接文件时返回真，该选项在一些老系统上无效<br>　　-k 当由pathname指定的文件或目录存在并且设置了“sticky”位时返回真<br>　　-r 当由pathname指定的文件或目录存在并且可读时返回为真<br>　　-s 当file存在文件大小大于0时返回真<br>　　-t 文件描述符   如果文件描述符是开启的，且链接了某一个终端<br>　　-u 当由pathname指定的文件或目录存在并且设置了SUID位时返回真<br>　　-w 当由pathname指定的文件或目录存在并且可执行时返回真。一个目录为了它的内容被访问必然是可执行的。<br>　　-x  如果文件存在，且该文件有可执行的属性<br>　　-O 当由pathname指定的文件或目录存在并且被子当前进程的有效用户ID所指定的用户拥有时返回真。<br>　　-G  如果文件存在，且该文件为有效的群组 id 所拥有<br>　　-L  如果该文件存在，且该文件是符号链接文件<br>　　-S  如果该文件存在，且该文件是Socket文件<br>　　-N  如果该文件存在，且该文件自上次读取后曾修改过<br>　　文件1   –nt  文件2   如果文件1比文件2新，或者文件1存在，文件2不存在<br>　　文件1   –ot  文件2   如果文件1比文件2旧，或者文件1不存在，文件2存在<br>　　文件1   –ef  文件2   如果文件1和文件2 引用到相同的设备和 inode 编号<br><strong>关于字符串的条件判断式</strong><br>　　<br>　　<a href="http://www.cnblogs.com/TikyZheng/p/3352208.html" target="_blank" rel="noopener">linux if 命令判断条件总结</a><br>　　<br>　　-z                                           空串 (如果字符串长度为0)<br>　　-n                                           非空串 (如果字符串长度不为0)<br>　　字符串                                       如果字符串长度不为0<br>　　!=                                           如果两个字符串不相等<br>　　=                                           如果两个字符串相等<br>　　==                                          如果两个字符串相等<br>　　字符串 1 &lt; 字符串      2            如果字符串1小于字符串2<br>　　字符串 1 &gt; 字符串      2            如果字符串1大于字符串2<br><strong>关于算式的条件判断</strong><br>　　-eq   等于<br>　　-ne    不等于<br>　　-gt    大于<br>　　-lt    小于<br>　　-le    小于等于<br>　　-ge   大于等于<br><strong>关于 Bash 选项的条件判断</strong><br>　　-o set的选项名称         如果选项是开启的状态</p></li></ul><h4 id="Shell中的循环"><a href="#Shell中的循环" class="headerlink" title="Shell中的循环"></a>Shell中的循环</h4><p>　　<a href="http://www.linuxidc.com/Linux/2012-02/53030.htm" target="_blank" rel="noopener">Shell for&amp;while 循环详细总结</a></p><p>几种方式：　　</p><ul><li><p>for  in循环</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> &#123;1..10&#125;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li><li><p>for(?,?,?)循环</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>((i=1;i&lt;100;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span>((i%3==0))</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line">        <span class="built_in">continue</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li><li><p>while循环</p><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="built-in">min</span>=<span class="number">1</span></span><br><span class="line"><span class="built-in">max</span>=<span class="number">100</span></span><br><span class="line"><span class="keyword">while</span> [ <span class="symbol">$</span><span class="built-in">min</span> -<span class="keyword">le</span> <span class="symbol">$</span><span class="built-in">max</span> ]</span><br><span class="line">do</span><br><span class="line">    echo <span class="symbol">$</span><span class="built-in">min</span></span><br><span class="line">    <span class="built-in">min</span>=`expr <span class="symbol">$</span><span class="built-in">min</span> + <span class="number">1</span>`</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li></ul><h4 id="Linux判断命令是否有输出"><a href="#Linux判断命令是否有输出" class="headerlink" title="Linux判断命令是否有输出"></a>Linux判断命令是否有输出</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">第一种方式：</span><br><span class="line"><span class="meta">$</span><span class="bash"> stdout=`ls /asdfkasd`</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$stdout</span>"</span> ]</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">then</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"有货"</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">else</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"没货"</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="keyword">fi</span></span></span><br><span class="line">没货</span><br><span class="line"></span><br><span class="line">第二种方式：</span><br><span class="line"><span class="meta">$</span><span class="bash"> stdout=`ls /tmp`</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$stdout</span>"</span> ]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">"有货"</span>; <span class="keyword">else</span> <span class="built_in">echo</span> <span class="string">"没货"</span>; <span class="keyword">fi</span></span></span><br><span class="line">有货</span><br></pre></td></tr></table></figure><h4 id="Linux-Crontab内环境变量与Shell环境变量的关系"><a href="#Linux-Crontab内环境变量与Shell环境变量的关系" class="headerlink" title="Linux Crontab内环境变量与Shell环境变量的关系"></a>Linux Crontab内环境变量与Shell环境变量的关系</h4><p>  　　 <a href="http://www.360doc.com/content/14/0418/13/3300331_370028474.shtml" target="_blank" rel="noopener">Linux Crontab内环境变量与Shell环境变量的关系及解决问题的办法</a><br>  　　 <a href="http://blog.csdn.net/liuxu0703/article/details/53858406" target="_blank" rel="noopener">对一次 crontab 执行失败的调试</a><br>  　　 <a href="http://blog.csdn.net/qustdjx/article/details/7830327" target="_blank" rel="noopener">cron 定时执行脚本 执行用户自定义脚本</a><br>  　　 <a href="http://www.cnblogs.com/itech/archive/2011/02/09/1950226.html" target="_blank" rel="noopener">Linux的cron和crontab</a><br>  　　<br>  　　 在线Crontab表达式执行时间验证工具：<br>  　　 <a href="http://www.atool.org/crontab.php" target="_blank" rel="noopener">crontab执行时间计算</a><br>  　　 <a href="http://cron.qqe2.com/" target="_blank" rel="noopener">crontab在线生成器</a>  　　 </p><p>　　crontab有一个坏毛病，就是它总是不会缺省的从<strong>用户profile文件中读取环境变量参数</strong>，经常导致在手工执行某个 脚本时是成功的，但是到crontab中试图让它定期执行时就是会出错。</p><p>　　crontab配置文件路径：<code>/etc/crontab</code><br>　　<br>　　编写crontab有两种方式：<br>　　1.通过文件的方式，编辑上述路径文件<br>　　2.通过contab命令的方式   </p><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">Usage:</span><br><span class="line"> crontab [options] file</span><br><span class="line"> crontab [options]</span><br><span class="line"> crontab -n [hostname]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"> -<span class="ruby">u &lt;user&gt;  define user</span></span><br><span class="line"><span class="ruby"> -e         edit user<span class="string">'s crontab</span></span></span><br><span class="line"><span class="ruby"> -l         list user<span class="string">'s crontab</span></span></span><br><span class="line"><span class="ruby"> -r         delete user<span class="string">'s crontab</span></span></span><br><span class="line"><span class="ruby"> -i         prompt before deleting</span></span><br><span class="line"><span class="ruby"> -n &lt;host&gt;  set host <span class="keyword">in</span> cluster to run users<span class="string">' crontabs</span></span></span><br><span class="line"><span class="ruby"> -c         get host <span class="keyword">in</span> cluster to run users<span class="string">' crontabs</span></span></span><br><span class="line"><span class="ruby"> -s         selinux context</span></span><br><span class="line"><span class="ruby"> -x &lt;mask&gt;  enable debugging</span></span><br></pre></td></tr></table></figure><p>　　Example of job definition：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  |  |  |</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> *  *  *  *  * user-name <span class="built_in">command</span> to be executed</span></span><br></pre></td></tr></table></figure><p>　　<br>　　解决办法：<br>　　1.  PATH 后面加入缺少目录，将crontab表达式追加到最后一行<br>　　表达式格式：<code>30 23 * * * root &quot;sh /opt/blog/hexo-deploy.sh &gt;&gt; /tmp/test.txt&quot;</code><br>　　2. 在Shell脚本缺省的#!/bin/sh开头换行后的第一行加上<code>. /etc/profile</code></p><h4 id="CentOS-7-下重启服务"><a href="#CentOS-7-下重启服务" class="headerlink" title="CentOS 7 下重启服务"></a>CentOS 7 下重启服务</h4><p>　　　<a href="http://www.linuxdiyf.com/linux/2363.html" target="_blank" rel="noopener">RHEL/CentOS 7中启动/停止/重启服务</a><br>　　　<br>　　　在CentOS 7之前，比如6的时候，是通过  <code>service  name [start/stop/restart/status]</code>　的方式启动或停止服务。<br>　　　CentOS7好像是在6之后的最大改版，在某些命令上会存在差异，比如服务的启动（7采用<code>systemctl</code>）、查看ip（<code>ip addr</code>）等<br>　　　<br>　　　下列演示对crontab服务的操作：<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">　　　systemctl status crond<span class="selector-class">.service</span>  #查看服务的状态</span><br><span class="line">　　　systemctl stop  crond<span class="selector-class">.service</span>  #停止服务</span><br><span class="line">　　　systemctl start crond<span class="selector-class">.service</span>  #启动服务</span><br><span class="line">　　　systemctl restart crond<span class="selector-class">.service</span> #重启服务</span><br></pre></td></tr></table></figure></p><h4 id="Linux-date-指定时间格式"><a href="#Linux-date-指定时间格式" class="headerlink" title="Linux date 指定时间格式"></a>Linux date 指定时间格式</h4><p>　　<a href="http://www.jb51.net/LINUXjishu/117785.html" target="_blank" rel="noopener">linux中通过date命令获取昨天或明天时间的方法</a><br>　　<br>　　通过 <code>date --help</code>命令可以查看帮助文档<br>　　<br>　　date +”%F”　　#输出格式  2017-06-10   yyyy-MM-dd<br>　　date +”%F %H:%M:%S”    #输出格式   2017-06-10 18:55:38    yyyy-MM-dd HH:mm:ss　　</p><h4 id="Linux-设置环境变量"><a href="#Linux-设置环境变量" class="headerlink" title="Linux 设置环境变量"></a>Linux 设置环境变量</h4><p>　　<a href="http://jingyan.baidu.com/article/ea24bc399a73bcda62b33104.html" target="_blank" rel="noopener">Linux环境下如何修改环境变量</a><br>　　<br>　　通过export命令的方式</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">export: usage: <span class="builtin-name">export</span> [-fn] [name[=value] <span class="built_in">..</span>.] <span class="keyword">or</span> <span class="builtin-name">export</span> -p</span><br></pre></td></tr></table></figure><p>　　查看环境变量配置 ： <code>export -p</code><br>　　<br>　　一般不通过命令的方式，因为服务器重启或者关机等异常情况，之前配置的环境变量可能会失效，一般都配置在启动文件中（<code>/etc/profile</code>）中，通过<code>source</code>命令让环境变量生效。</p><h4 id="Shell中嵌套执行expect命令"><a href="#Shell中嵌套执行expect命令" class="headerlink" title="Shell中嵌套执行expect命令"></a>Shell中嵌套执行expect命令</h4><p>　　<a href="http://www.jb51.net/article/58777.htm" target="_blank" rel="noopener">shell中嵌套执行expect命令实例</a><br>　　<a href="https://www.centos.bz/2013/07/expect-spawn-linux-expect-usage/" target="_blank" rel="noopener">expect spawn、linux expect 用法小记</a><br>　　<br>　　1.先安装<code>expect</code><br><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">　　yum <span class="keyword">install</span> -y expect</span><br></pre></td></tr></table></figure></p><p>　　2. 脚本示例</p><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line">/usr/bin/expect &lt;&lt;-EOF</span><br><span class="line">set <span class="keyword">time</span> <span class="number">30</span></span><br><span class="line">spawn ssh -p1833<span class="number">0</span> root@192.<span class="number">168.10</span>.<span class="number">22</span></span><br><span class="line">expect &#123;</span><br><span class="line"><span class="string">"*yes/no"</span> &#123; <span class="keyword">send</span> <span class="string">"yes\r"</span>; exp_continue &#125;</span><br><span class="line"><span class="string">"*password:"</span> &#123; <span class="keyword">send</span> <span class="string">"$passwd\r"</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"><span class="keyword">send</span> <span class="string">"cd /home/trunk\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"><span class="keyword">send</span> <span class="string">"svn up\r"</span></span><br><span class="line">expect <span class="string">"*#"</span></span><br><span class="line"><span class="keyword">send</span> <span class="string">"exit\r"</span></span><br><span class="line">interact</span><br><span class="line">expect <span class="keyword">eof</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h4 id="Shell-加解密"><a href="#Shell-加解密" class="headerlink" title="Shell 加解密"></a>Shell 加解密</h4><p>　　<a href="http://blog.csdn.net/loomz/article/details/47001691" target="_blank" rel="noopener">shell几种字符串加密解密的方法</a></p><p>　　<strong>第一种：〔 Python 与 Bash Shell 的结合 〕</strong><br>　　这个命令会让你输入一个字符串，然后会再输出一串加密了的数字。</p><p>　　加密代码[照直输入]:<br>　　python -c ‘print reduce(lambda a,b: a*256+ord(b), raw_input(“string: “), 0)’</p><p>　　解密代码[数字后+P]：<br>　　dc -e 输出的数字P</p><p>　　<strong>第二种：〔 应该是纯 Bash Shell，含 VIM 的 xxd 〕</strong><br>　　用 <a href="mailto:gtalk@gmail.com" target="_blank" rel="noopener">gtalk@gmail.com</a> 作为明文，加密分两步，当然了，也是可以一步过的，呆会说～</p><p>　　加密代码：<br>　　1、echo “<a href="mailto:gtalk@gmail.com" target="_blank" rel="noopener">gtalk@gmail.com</a>“ |xxd -ps -u<br>　　得到：6774616C6B40676D61696C2E636F6D0A<br>　　2、echo “ibase=16; 6774616C6B40676D61696C2E636F6D0A” |bc<br>　　得到：137514765985002236391382606438443478282</p><p>　　一步加密代码：<br>　　echo “ibase=16; $(echo “<a href="mailto:gtalk@gmail.com" target="_blank" rel="noopener">gtalk@gmail.com</a>“ |xxd -ps -u)” |bc<br>　　得到：137514765985002236391382606438443478282</p><p>　　解密代码：<br>　　3、dc -e 137514765985002236391382606438443478282P<br>　　得到：<a href="mailto:gtalk@gmail.com" target="_blank" rel="noopener">gtalk@gmail.com</a></p><p>　　<strong>第三种：〔 Base64 编码，这个很好很强大，适合写加密脚本 〕</strong><br>　　同样用 <a href="mailto:gtalk@gmail.com" target="_blank" rel="noopener">gtalk@gmail.com</a> 作为明文，来看代码：</p><p>　　加密代码：<br>　　echo “<a href="mailto:gtalk@gmail.com" target="_blank" rel="noopener">gtalk@gmail.com</a>“ |base64 -i<br>　　得到：Z3RhbGtAZ21haWwuY29tCg==</p><p>　　解密代码：<br>　　echo “Z3RhbGtAZ21haWwuY29tCg==” |base64 -d<br>　　得到：<a href="mailto:gtalk@gmail.com" target="_blank" rel="noopener">gtalk@gmail.com</a>　　</p><h4 id="Shell-kill-杀进程"><a href="#Shell-kill-杀进程" class="headerlink" title="Shell kill 杀进程"></a>Shell kill 杀进程</h4><p>　　<a href="http://harveyzeng.iteye.com/blog/1452258" target="_blank" rel="noopener">linux kill终止进程</a><br>　　<br>　　先通过<code>ps -ef | grep 进程名</code>的方式获得pid。在通过<code>kill -9 pid</code> 的方式杀死进程，也可以通过  <code>killall 进程名</code>的方式。</p><p>　　</p><h4 id="Shell编写异常收集"><a href="#Shell编写异常收集" class="headerlink" title="Shell编写异常收集"></a>Shell编写异常收集</h4><p>　　Q：<strong>warning: here-document at line 17 delimited by end-of-file (wanted EOF)</strong><br>　　A：末尾的EOF后面带有空格，EOF前后都不应有空格或其他符号<br>　　<br>　　Q：<strong>linux bash中too many arguments问题的解决方法</strong><br>　　A：  <code>if [ -z &quot; lsof -i:22 &quot; ]</code>    //这种写法会报too many arguments,改成<code>[[ -z &quot; lsof -i:22 &quot; ]]</code></p><p>　　 　　　　</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>骑行之旅</title>
      <link href="/2017/01/01/%E9%AA%91%E8%A1%8C%E4%B9%8B%E6%97%85/"/>
      <url>/2017/01/01/%E9%AA%91%E8%A1%8C%E4%B9%8B%E6%97%85/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="2017-06-17"><a href="#2017-06-17" class="headerlink" title="2017-06-17"></a>2017-06-17</h4> <div class="location"><i class="location-icon" style="opacity: 1; top:0px;"></i><span class="location-text animate-init" style="opacity: 1; top: 0px;"> ChuanSha Road </span></div> <img src="https://infos.rtime.xin/qx_20170617.jpg" title="[ChuanSha Road]"><h4 id="2017-06-10"><a href="#2017-06-10" class="headerlink" title="2017-06-10"></a>2017-06-10</h4> <div class="location"><i class="location-icon" style="opacity: 1; top:0px;"></i><span class="location-text animate-init" style="opacity: 1; top: 0px;"> ChuanSha Road </span></div> <img src="https://infos.rtime.xin/qx_20170610.jpg" title="[ChuanSha Road]"><h4 id="2017-05-28"><a href="#2017-05-28" class="headerlink" title="2017-05-28"></a>2017-05-28</h4> <div class="location"><i class="location-icon" style="opacity: 1; top:0px;"></i><span class="location-text animate-init" style="opacity: 1; top: 0px;"> Shanghai pudong international airport Road </span></div> <img src="https://infos.rtime.xin/qx_20170528.jpg" title="[Shanghai pudong international airport Road]">  <h4 id="2017-05-27"><a href="#2017-05-27" class="headerlink" title="2017-05-27"></a>2017-05-27</h4> <div class="location"><i class="location-icon" style="opacity: 1; top:0px;"></i><span class="location-text animate-init" style="opacity: 1; top: 0px;"> ZhangYang Road </span></div> <img src="https://infos.rtime.xin/qx_20170527.jpg" title="[zhangyang Road]">   ]]></content>
      
      
    </entry>
    
    <entry>
      <title>西安之行</title>
      <link href="/2017/01/01/%E8%A5%BF%E5%AE%89%E4%B9%8B%E8%A1%8C/"/>
      <url>/2017/01/01/%E8%A5%BF%E5%AE%89%E4%B9%8B%E8%A1%8C/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script>  <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_60ls.jpg " alt=" 西安六十年历史 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 西安六十年历史 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_bmy.jpg " alt=" 兵马俑 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 兵马俑 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_bmy2.jpg " alt=" 兵马俑2 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 兵马俑2 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_bpyz.jpg " alt=" 半坡遗址 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 半坡遗址 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_bpyz2.jpg " alt=" 半坡遗址2 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 半坡遗址2 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_cl.jpg " alt=" 垂柳 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 垂柳 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_cq.jpg " alt=" 大唐芙蓉园 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 大唐芙蓉园 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_csml.jpg " alt=" 钟楼 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 钟楼 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_dm17d.jpg " alt=" 大明十七帝 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 大明十七帝 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_dmg.jpg " alt=" 大明宫 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 大明宫 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_dmg2.jpg " alt=" 大明宫2 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 大明宫2 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_dtfry.jpg " alt=" 大唐芙蓉园2 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 大唐芙蓉园2 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_dtyz.jpg " alt=" 慈恩寺遗址 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 慈恩寺遗址 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_gfcy.jpg " alt=" 贵妃出浴 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 贵妃出浴 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_gj.jpg " alt=" 孔雀 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 孔雀 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_gsy.jpg " alt=" 跪射俑 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 跪射俑 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_hydy.jpg " alt=" 文物 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 文物 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_kj.jpg " alt=" 盔甲 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 盔甲 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_lslq.jpg " alt=" 骊山灵泉 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 骊山灵泉 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_nyl.jpg " alt=" 鸟语林 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 鸟语林 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_qhl.jpg " alt=" 秦始皇 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 秦始皇 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_sqg.jpg " alt=" 功德成神 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 功德成神 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_tdmyz.jpg " alt=" 大唐遗址 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 大唐遗址 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_tg.jpg " alt=" 天宫 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 天宫 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_tk.jpg " alt=" 托运车 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 托运车 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_tsc.jpg " alt=" 唐三彩-女俑 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 唐三彩-女俑 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_tzlc.jpg " alt=" 天子祭天 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 天子祭天 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_wblc.jpg " alt=" 万邦朝拜 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 万邦朝拜 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_xadml.jpg " alt=" 大明宫3 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 大明宫3 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_xaysbwg.jpg " alt=" 书法艺术博物馆 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 书法艺术博物馆 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/170101_zl.jpg " alt=" 钟楼2 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 钟楼2 </figcaption></figure><p>  <br><br>  <br><br>  <br></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>咸阳之旅</title>
      <link href="/2016/12/31/%E5%92%B8%E9%98%B3%E4%B9%8B%E6%97%85/"/>
      <url>/2016/12/31/%E5%92%B8%E9%98%B3%E4%B9%8B%E6%97%85/</url>
      <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script>  <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/161231_ags.gif " alt=" 安国市1 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 安国市1 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/161231_ags2.jpg " alt=" 安国市2 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 安国市2 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/161231_bh1.jpg " alt=" 壁画 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 壁画 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/161231_hl.jpg " alt=" 大葫芦 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 大葫芦 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/161231_wm.jpg " alt=" 咸阳文庙1 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 咸阳文庙1 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/161231_xa1.jpg " alt=" 西安 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 西安 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/161231_xywm.jpg " alt=" 咸阳文庙2 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 咸阳文庙2 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/161231_xy.jpg " alt=" 咸阳 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 咸阳 </figcaption></figure> <figure class="gallery-item" style="margin:0px;"><img src=" https://infos.rtime.xin/161231_zhy.jpg " alt=" 指挥俑 " style="margin: auto;padding: initial;border: none;box-sizing: initial;"><figcaption> 指挥俑 </figcaption></figure><p>  <br><br>  <br><br>  <br></p>]]></content>
      
      
    </entry>
    
  
  
</search>
